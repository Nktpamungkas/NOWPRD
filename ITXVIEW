-- DB2ADMIN.ITXVIEWAKJ source

CREATE VIEW ITXVIEWAKJ AS
SELECT
    BUSINESSPARTNER.LEGALNAME1,
    SALESORDER.CODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    (
        (
            DB2ADMIN.ORDERPARTNER ORDERPARTNER
        LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        )
    RIGHT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
        ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
    )
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE;


-- DB2ADMIN.ITXVIEWALLOCATION0 source

CREATE VIEW ITXVIEWALLOCATION0 AS
SELECT
    ALLOCATIONDATE,
    CODE ,
    THEORETICISSUEDATE ,
    ITEMTYPECODE ,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    DECOSUBCODE09,
    DECOSUBCODE10,
    WHSLOCATIONWAREHOUSEZONECODE,
    WAREHOUSELOCATIONCODE,
    LOTCODE,
    ITEMELEMENTCODE,
    PROJECTCODE,
    BASEPRIMARYQUANTITY,
    USERPRIMARYQUANTITY,
    BASESECONDARYQUANTITY,
    USERSECONDARYQUANTITY,
    FULLITEMIDENTIFIER
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
WHERE
    ALLOCATION.DETAILTYPE = '0';


-- DB2ADMIN.ITXVIEWALLOCATION0_SJEXIM source

CREATE VIEW ITXVIEWALLOCATION0_SJEXIM AS
SELECT
    *
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
WHERE
    ALLOCATION.DETAILTYPE = '0';


-- DB2ADMIN.ITXVIEWALLOCATIONLAPKIRIMPPC source

CREATE VIEW ITXVIEWALLOCATIONLAPKIRIMPPC AS
SELECT
    ALLOCATION.CODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE
FROM
    ALLOCATION ALLOCATION
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL;


-- DB2ADMIN.ITXVIEWALURPROSESBONORDER source

CREATE VIEW ITXVIEWALURPROSESBONORDER AS 
SELECT
    PRODUCTIONDEMANDCODE,
    ITEMTYPEAFICODE AS ITEMTYPECODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    SUBCODE06,
    SUBCODE07,
    SUBCODE08,
    SUBCODE09,
    SUBCODE10,
    LISTAGG(
        ALUR,
        '-'
    ) AS ALUR
FROM
    (
        SELECT
            TRIM(p.PRODUCTIONDEMANDCODE) AS PRODUCTIONDEMANDCODE,
            p2.ITEMTYPEAFICODE,
            p2.SUBCODE01,
            p2.SUBCODE02,
            p2.SUBCODE03,
            p2.SUBCODE04,
            p2.SUBCODE05,
            p2.SUBCODE06,
            p2.SUBCODE07,
            p2.SUBCODE08,
            p2.SUBCODE09,
            p2.SUBCODE10,
            TRIM(p.OPERATIONCODE) AS ALUR
        FROM
            PRODUCTIONDEMANDSTEP p
        LEFT JOIN PRODUCTIONDEMAND p2 ON
            p2.CODE = p.PRODUCTIONDEMANDCODE
            --	WHERE 
            --		p.PRODUCTIONDEMANDCODE = '00185353'  
        ORDER BY
            p.STEPNUMBER ASC
    )
GROUP BY
    PRODUCTIONDEMANDCODE,
    ITEMTYPEAFICODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    SUBCODE06,
    SUBCODE07,
    SUBCODE08,
    SUBCODE09,
    SUBCODE10;


-- DB2ADMIN.ITXVIEWANALISA_KEB_BENANG source

CREATE VIEW ITXVIEWANALISA_KEB_BENANG AS
SELECT
    *
FROM
    (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ORDERDATE,
            TRIM(PRODUCTIONDEMAND.SUBCODE01) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE02) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE03) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE04) AS ITEM_CODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            A.BUYER,
            PRODUCTIONDEMAND.FINALPLANNEDDATE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
            PRODUCTIONRESERVATION.RESERVATIONLINE,
            TRIM(PRODUCTIONRESERVATION.SUBCODE01) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE02) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE03) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE04) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE05) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE06) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE07) || '-' || TRIM(PRODUCTIONRESERVATION.SUBCODE08) AS ITEM_BENANG,
            FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
            PRODUCTIONDEMAND.USERPRIMARYQUANTITY AS QTY_KO,
            PRODUCTIONDEMAND.USERPRIMARYUOMCODE AS UOM_KO,
            PRODUCTIONRESERVATIONCOMMENT.COMMENTTEXT,
            BOMCOMPONENT.QUANTITYPER * 100 AS PERCENT_BOM,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
            PRODUCTIONRESERVATION.USERPRIMARYQUANTITY,
            PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
            PRODUCTIONDEMAND.ABSUNIQUEID,
            B.MC_IN,
            C.MC_GAUGE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
            PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
        LEFT JOIN (
                SELECT
                    SALESORDER.CODE,
                    SALESORDER.ORDERPARTNERBRANDCODE,
                    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
                    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
                FROM
                    SALESORDER SALESORDER
                LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
                    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
                    AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
            ) A ON
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = A.CODE
        LEFT JOIN PRODUCT PRODUCT ON
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
            AND PRODUCTIONDEMAND.SUBCODE01 = PRODUCT.SUBCODE01
            AND PRODUCTIONDEMAND.SUBCODE02 = PRODUCT.SUBCODE02
            AND PRODUCTIONDEMAND.SUBCODE03 = PRODUCT.SUBCODE03
            AND PRODUCTIONDEMAND.SUBCODE04 = PRODUCT.SUBCODE04
        LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
            PRODUCTIONRESERVATION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
        LEFT JOIN PRODUCTIONRESERVATIONCOMMENT PRODUCTIONRESERVATIONCOMMENT ON
            PRODUCTIONRESERVATION.ORDERCODE = PRODUCTIONRESERVATIONCOMMENT.PRODUCTIONRESERVATIONORDERCODE
            AND PRODUCTIONRESERVATION.RESERVATIONLINE = PRODUCTIONRESERVATIONCOMMENT.PRORESERVATIONRESERVATIONLINE
        LEFT JOIN BOMCOMPONENT BOMCOMPONENT ON
            PRODUCTIONRESERVATION.BOMCOMPBILLOFMATERIALNUMBERID = BOMCOMPONENT.BILLOFMATERIALNUMBERID
            AND PRODUCTIONRESERVATION.BOMCOMPSEQUENCE = BOMCOMPONENT."SEQUENCE"
        LEFT JOIN (
                SELECT
                    PRODUCT.ABSUNIQUEID,
                    PRODUCT.SUBCODE01,
                    PRODUCT.SUBCODE02,
                    PRODUCT.SUBCODE03,
                    PRODUCT.SUBCODE04,
                    PRODUCT.SUBCODE05,
                    PRODUCT.SUBCODE06,
                    PRODUCT.SUBCODE07,
                    PRODUCT.SUBCODE08 ,
                    PRODUCT.SUBCODE09,
                    PRODUCT.SUBCODE10,
                    ADSTORAGE.VALUEDECIMAL AS MC_IN
                FROM
                    PRODUCT PRODUCT
                LEFT JOIN ADSTORAGE ADSTORAGE ON
                    PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
                WHERE
                    ADSTORAGE.NAMENAME = 'Diameter'
            ) B ON
            PRODUCTIONDEMAND.SUBCODE01 = B.SUBCODE01
            AND PRODUCTIONDEMAND.SUBCODE02 = B.SUBCODE02
            AND PRODUCTIONDEMAND.SUBCODE03 = B.SUBCODE03
            AND PRODUCTIONDEMAND.SUBCODE04 = B.SUBCODE04
            AND PRODUCTIONDEMAND.SUBCODE05 = B.SUBCODE05
            AND PRODUCTIONDEMAND.SUBCODE06 = B.SUBCODE06
            AND PRODUCTIONDEMAND.SUBCODE07 = B.SUBCODE07
            AND PRODUCTIONDEMAND.SUBCODE08 = B.SUBCODE08
            AND PRODUCTIONDEMAND.SUBCODE09 = B.SUBCODE09
            AND PRODUCTIONDEMAND.SUBCODE10 = B.SUBCODE10
        LEFT JOIN (
                SELECT
                    PRODUCT.ABSUNIQUEID,
                    PRODUCT.SUBCODE01,
                    PRODUCT.SUBCODE02,
                    PRODUCT.SUBCODE03,
                    PRODUCT.SUBCODE04,
                    PRODUCT.SUBCODE05,
                    PRODUCT.SUBCODE06,
                    PRODUCT.SUBCODE07,
                    PRODUCT.SUBCODE08 ,
                    PRODUCT.SUBCODE09,
                    PRODUCT.SUBCODE10,
                    ADSTORAGE.VALUEDECIMAL AS MC_GAUGE
                FROM
                    PRODUCT PRODUCT
                LEFT JOIN ADSTORAGE ADSTORAGE ON
                    PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
                WHERE
                    ADSTORAGE.NAMENAME = 'Gauge'
            ) C ON
            PRODUCTIONDEMAND.SUBCODE01 = C.SUBCODE01
            AND PRODUCTIONDEMAND.SUBCODE02 = C.SUBCODE02
            AND PRODUCTIONDEMAND.SUBCODE03 = C.SUBCODE03
            AND PRODUCTIONDEMAND.SUBCODE04 = C.SUBCODE04
            AND PRODUCTIONDEMAND.SUBCODE05 = C.SUBCODE05
            AND PRODUCTIONDEMAND.SUBCODE06 = C.SUBCODE06
            AND PRODUCTIONDEMAND.SUBCODE07 = C.SUBCODE07
            AND PRODUCTIONDEMAND.SUBCODE08 = C.SUBCODE08
            AND PRODUCTIONDEMAND.SUBCODE09 = C.SUBCODE09
            AND PRODUCTIONDEMAND.SUBCODE10 = C.SUBCODE10
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KGF'
        ORDER BY
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONRESERVATION.RESERVATIONLINE ASC
    );


-- DB2ADMIN.ITXVIEWBALANCEGYR source

CREATE VIEW ITXVIEWBALANCEGYR AS
SELECT
    BALANCE.COMPANYCODE,
    BALANCE.NUMBERID,
    BALANCE.ITEMTYPECODE,
    CASE
        WHEN ITTSUPPLIERPACKINGLIST.MANUFACTURINGDATE IS NOT NULL THEN ITTSUPPLIERPACKINGLIST.MANUFACTURINGDATE
        ELSE NULL
    END AS MANUFACTURINGDATE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.PHYSICALWAREHOUSECODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.QUALITYLEVELCODE,
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.CUSTOMERTYPE,
    BALANCE.CUSTOMERCODE,
    BALANCE.SUPPLIERTYPE,
    BALANCE.SUPPLIERCODE,
    BALANCE.PROJECTCODE,
    BALANCE.STATISTICALGROUPCODE,
    BALANCE.STOCKTYPECODE,
    BALANCE.DETAILTYPE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASEPRIMARYUNITCODE,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.CREATIONDATETIME,
    BALANCE.CREATIONUSER
FROM
    BALANCE BALANCE
LEFT JOIN ITTSUPPLIERPACKINGLIST ITTSUPPLIERPACKINGLIST ON
    BALANCE.ITEMTYPECODE = ITTSUPPLIERPACKINGLIST.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = ITTSUPPLIERPACKINGLIST.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = ITTSUPPLIERPACKINGLIST.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = ITTSUPPLIERPACKINGLIST.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = ITTSUPPLIERPACKINGLIST.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = ITTSUPPLIERPACKINGLIST.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = ITTSUPPLIERPACKINGLIST.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = ITTSUPPLIERPACKINGLIST.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = ITTSUPPLIERPACKINGLIST.SUBCODE08
    AND BALANCE.LOTCODE = ITTSUPPLIERPACKINGLIST.LOTCODE
    AND BALANCE.ELEMENTSCODE = ITTSUPPLIERPACKINGLIST.ITEMELEMENTCODE
WHERE
    BALANCE.ITEMTYPECODE = 'GYR'
GROUP BY
    BALANCE.COMPANYCODE,
    BALANCE.NUMBERID,
    BALANCE.ITEMTYPECODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.PHYSICALWAREHOUSECODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.QUALITYLEVELCODE,
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.CUSTOMERTYPE,
    BALANCE.CUSTOMERCODE,
    BALANCE.SUPPLIERTYPE,
    BALANCE.SUPPLIERCODE,
    BALANCE.PROJECTCODE,
    BALANCE.STATISTICALGROUPCODE,
    BALANCE.STOCKTYPECODE,
    BALANCE.DETAILTYPE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASEPRIMARYUNITCODE,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.CREATIONDATETIME,
    BALANCE.CREATIONUSER,
    ITTSUPPLIERPACKINGLIST.MANUFACTURINGDATE;


-- DB2ADMIN.ITXVIEWBALANCE_STOKHARIAN_GKG source

CREATE VIEW ITXVIEWBALANCE_STOKHARIAN_GKG AS
SELECT
    BALANCE.COMPANYCODE,
    BALANCE.PROJECTCODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.LOTCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.CREATIONDATETIME,
    BUSINESSPARTNER.LEGALNAME1
FROM
    BALANCE BALANCE
LEFT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
    BALANCE.PROJECTCODE = SALESORDER.CODE
    AND BALANCE.COMPANYCODE = SALESORDER.COMPANYCODE
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID;


-- DB2ADMIN.ITXVIEWBENANGWARNA source

CREATE VIEW ITXVIEWBENANGWARNA AS    
SELECT
    LONGDESCRIPTION,
    CODE
FROM
    DB2ADMIN.USERGENERICGROUP x
WHERE
    USERGENERICGROUPTYPECODE = 'CL1';


-- DB2ADMIN.ITXVIEWBONORDER source

CREATE VIEW ITXVIEWBONORDER AS 
SELECT
    DISTINCT
    SALESORDER.CREATIONDATETIME AS CREATIONDATETIME_SALESORDER,
    SALESORDERLINE.LINESTATUS,
    a33.VALUESTRING AS PRODUCTIONORDER_AKW,
    PRODUCTIONDEMAND.CODE AS DEMAND,
    SALESORDER.CODE AS SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    BUSINESSPARTNER.POSTALCODE AS ORDERPARTNERPOSTALCODE,
    BUSINESSPARTNER.TOWN AS ORDERPARTNERTOWN,
    BUSINESSPARTNER.DISTRICT AS ORDERPARTNERDISTRICT,
    TERMSOFSHIPPING.LONGDESCRIPTION AS TERMSOFSHPLONGDESCRIPTION,
    PAYMENTMETHOD.LONGDESCRIPTION AS PAYMENTMETHODLONGDESCRIPTION,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.INTERNALREFERENCE AS INTERNALREFERENCE_SALESORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    COALESCE(p.SUBCODE02, SALESORDERLINE.SUBCODE02) AS RESERVATION_SUBCODE02,
    COALESCE(p.SUBCODE03, SALESORDERLINE.SUBCODE03) AS RESERVATION_SUBCODE03,
    COALESCE(p.SUBCODE04, SALESORDERLINE.SUBCODE04) AS RESERVATION_SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10,
    SALESORDERLINE.USERPRIMARYUOMCODE,
    SALESORDERLINE.USERPRIMARYQUANTITY,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    SALESORDERLINE.USERSECONDARYQUANTITY,
    SALESORDERLINE.BASESECONDARYQUANTITY,
    SALESORDERLINE.BASEPRIMARYQUANTITY,
    SALESORDERLINE.NETVALUE,
    i.WARNA,
    SALESORDERLINE.ABSUNIQUEID AS ABSUNIQUEID_SALESORDERLINE,
    SALESORDER.CODE,
    SALESORDER.ORDERDATE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.DESCRIPTION,
    SALESORDER.INTERNALREFERENCE AS INTERNALREFERENCE_SALESORDER,
    SALESORDER.STATISTICALGROUPCODE,
    SALESORDER.CREATIONUSER,
    SALESORDER.ABSUNIQUEID AS ABSUNIQUEID_SALESORDER,
    ORDERPARTNER.ABSUNIQUEID AS ABSUNIQUEID_ORDERPARTNER,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.PERSON,
    BUSINESSPARTNER.PHONENUMBER,
    BUSINESSPARTNER.FAXNUMBER,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    ADDRESS.ADDRESSFAXNUMBER,
    COUNTRY.LONGDESCRIPTION,
    COUNTRY_1.LONGDESCRIPTION AS LONGDESCRIPTION_1,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER,
    BUSINESSPARTNER.FISCALCODE,
    PRODUCTIONDEMAND.ABSUNIQUEID,
    a2.VALUESTRING AS ADDITIONALDATA,
    a7.VALUEDECIMAL AS QTY,
    a3.VALUESTRING AS ADDITIONALDATA2,
    a8.VALUEDECIMAL AS QTY2,
    a4.VALUESTRING AS ADDITIONALDATA3,
    a9.VALUEDECIMAL AS QTY3,
    a5.VALUESTRING AS ADDITIONALDATA4,
    a10.VALUEDECIMAL AS QTY4,
    a6.VALUESTRING AS ADDITIONALDATA5,
    a11.VALUEDECIMAL AS QTY5,
    a18.VALUESTRING AS LEGACYORDER,
    a19.VALUEDECIMAL AS QTY6,
    a12.VALUEDATE AS DATE_AKTUAL,
    a27.VALUEDATE AS DATE_AKTUAL_TO,
    a13.VALUEDATE AS DATE_AKTUAL2,
    a28.VALUEDATE AS DATE_AKTUAL_TO2,
    a14.VALUEDATE AS DATE_AKTUAL3,
    a29.VALUEDATE AS DATE_AKTUAL_TO3,
    a15.VALUEDATE AS DATE_AKTUAL4,
    a30.VALUEDATE AS DATE_AKTUAL_TO4,
    a16.VALUEDATE AS DATE_AKTUAL5,
    a31.VALUEDATE AS DATE_AKTUAL_TO5,
    a20.VALUEDATE AS DATE_AKTUAL6,
    a32.VALUEDATE AS DATE_AKTUAL_TO6,
    CASE
        WHEN a17.VALUESTRING = '1' THEN 'AKJ'
        WHEN a17.VALUESTRING = '2' THEN 'AKW'
        ELSE 'NON AKJ'
    END AS AKJ,
    CASE
        WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%SINTEX%' THEN 'With Shipping'
        WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%MAS%' THEN 'With Shipping'
        WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%INQUBE%' THEN 'With Shipping'
        ELSE 'Without Shipping'
    END AS shipping_mark,
    a21.VALUESTRING AS PROD_ORDER_AKJ,
    a22.VALUESTRING AS SALESORDER_AKJ,
    a23.VALUESTRING AS PROD_ORDER_AKJ2,
    a24.VALUESTRING AS SALESORDER_AKJ2,
    a25.VALUESTRING AS PROD_ORDER_AKJ3,
    a26.VALUESTRING AS SALESORDER_AKJ3,
    a34.VALUESTRING AS NOTETAS
FROM
    SALESORDER SALESORDER
LEFT OUTER JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.LINESTATUS = 1
LEFT OUTER JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PAYMENTMETHOD.CODE = SALESORDERLINE.PAYMENTMETHODCODE
LEFT OUTER JOIN TERMSOFSHIPPING TERMSOFSHIPPING ON
    TERMSOFSHIPPING.CODE = SALESORDER.TERMSOFSHIPPINGCODE
LEFT OUTER JOIN ORDERPARTNERBANK ORDERPARTNERBANK ON
    SALESORDER.COMPANYCODE = ORDERPARTNERBANK.ORDPRNCSMSUPPLIERCOMPANYCODE
    AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBANK.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDER.ORDERPARTNERBANKIDENTIFIER = ORDERPARTNERBANK.IDENTIFIER
LEFT OUTER JOIN BANK BANK ON
    ORDERPARTNERBANK.BANKBRANCHCODE = BANK.BRANCHCODE
    AND ORDERPARTNERBANK.BANKCODE = BANK.CODE
LEFT OUTER JOIN ORDERPARTNER ORDERPARTNER ON
    SALESORDER.COMPANYCODE = ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE
    AND SALESORDER.ORDERTYPE = ORDERPARTNER.CUSTOMERSUPPLIERTYPE
    AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT OUTER JOIN SALESORDERTEMPLATE SALESORDERTEMPLATE ON
    SALESORDER.TEMPLATECODE = SALESORDERTEMPLATE.CODE
    AND SALESORDER.COMPANYCODE = SALESORDERTEMPLATE.COMPANYCODE
LEFT OUTER JOIN AGENT AGENT ON
    SALESORDER.COMPANYCODE = AGENT.COMPANYCODE
    AND SALESORDER.AGENT1CODE = AGENT.CODE
LEFT OUTER JOIN ADDRESS ADDRESS ON
    SALESORDER.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESORDER.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT OUTER JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT OUTER JOIN COUNTRY COUNTRY_1 ON
    BUSINESSPARTNER.COUNTRYCODE = COUNTRY_1.CODE
LEFT OUTER JOIN PRODUCTIONDEMAND ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDERLINE.SALESORDERCODE
    AND PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a2.FIELDNAME = 'ProAllow'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a3.FIELDNAME = 'ProAllow2'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a4.FIELDNAME = 'ProAllow3'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a5.FIELDNAME = 'ProAllow4'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a6.FIELDNAME = 'ProAllow5'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a7.FIELDNAME = 'ProAllowQty'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a8.FIELDNAME = 'ProAllowQty2'
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a9.FIELDNAME = 'ProAllowQty3'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a10.FIELDNAME = 'ProAllowQty4'
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a11.FIELDNAME = 'ProAllowQty5'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a12.FIELDNAME = 'ProAllowDate'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a13.FIELDNAME = 'ProAllowDate2'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a14.FIELDNAME = 'ProAllowDate3'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a15.FIELDNAME = 'ProAllowDate4'
LEFT JOIN ADSTORAGE a16 ON
    a16.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a16.FIELDNAME = 'ProAllowDate5'
LEFT JOIN ADSTORAGE a17 ON
    a17.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a17.FIELDNAME = 'KainAKJ'
LEFT JOIN ADSTORAGE a18 ON
    a18.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a18.FIELDNAME = 'LegacyOrder'
LEFT JOIN ADSTORAGE a19 ON
    a19.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a19.FIELDNAME = 'ProAllowQty6'
LEFT JOIN ADSTORAGE a20 ON
    a20.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a20.FIELDNAME = 'ProAllowDate6'
LEFT JOIN ITXVIEWCOLOR i ON
    i.ITEMTYPECODE = SALESORDERLINE.ITEMTYPEAFICODE
    AND i.SUBCODE01 = SALESORDERLINE.SUBCODE01
    AND i.SUBCODE02 = SALESORDERLINE.SUBCODE02
    AND i.SUBCODE03 = SALESORDERLINE.SUBCODE03
    AND i.SUBCODE04 = SALESORDERLINE.SUBCODE04
    AND i.SUBCODE05 = SALESORDERLINE.SUBCODE05
    AND i.SUBCODE06 = SALESORDERLINE.SUBCODE06
    AND i.SUBCODE07 = SALESORDERLINE.SUBCODE07
    AND i.SUBCODE08 = SALESORDERLINE.SUBCODE08
    AND i.SUBCODE09 = SALESORDERLINE.SUBCODE09
    AND i.SUBCODE10 = SALESORDERLINE.SUBCODE10
LEFT JOIN PRODUCTIONRESERVATION p ON
    p.ORDERCODE = PRODUCTIONDEMAND.CODE
    AND (
        p.ITEMTYPEAFICODE = 'KGF'
            OR p.ITEMTYPEAFICODE = 'KFF'
    )
LEFT JOIN ADSTORAGE a21 ON
    a21.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a21.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN ADSTORAGE a22 ON
    a22.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a22.FIELDNAME = 'PrevSalesOrderCode'
LEFT JOIN ADSTORAGE a23 ON
    a23.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a23.FIELDNAME = 'PrevProdOrder2Code'
LEFT JOIN ADSTORAGE a24 ON
    a24.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a24.FIELDNAME = 'PrevSalesOrder2Code'
LEFT JOIN ADSTORAGE a25 ON
    a25.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a25.FIELDNAME = 'PrevProdOrder3Code'
LEFT JOIN ADSTORAGE a26 ON
    a26.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a26.FIELDNAME = 'PrevSalesOrder3Code'
LEFT JOIN ADSTORAGE a27 ON
    a27.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a27.FIELDNAME = 'ProAllowDateto'
LEFT JOIN ADSTORAGE a28 ON
    a28.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a28.FIELDNAME = 'ProAllowDate2to'
LEFT JOIN ADSTORAGE a29 ON
    a29.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a29.FIELDNAME = 'ProAllowDate3to'
LEFT JOIN ADSTORAGE a30 ON
    a30.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a30.FIELDNAME = 'ProAllowDate4to'
LEFT JOIN ADSTORAGE a31 ON
    a31.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a31.FIELDNAME = 'ProAllowDate5to'
LEFT JOIN ADSTORAGE a32 ON
    a32.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a32.FIELDNAME = 'ProAllowDate6to'
LEFT JOIN ADSTORAGE a33 ON
    a33.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a33.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN PRODUCT PRODUCT ON
    PRODUCT.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND PRODUCT.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND PRODUCT.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND PRODUCT.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND PRODUCT.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND PRODUCT.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND PRODUCT.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND PRODUCT.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND PRODUCT.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND PRODUCT.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND PRODUCT.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ADSTORAGE a34 ON
    a34.UNIQUEID = PRODUCT.ABSUNIQUEID
    AND a34.FIELDNAME = 'NoteTas'
WHERE
    --    	SALESORDER.CODE = 'DOM2400318' AND 
    --    	SALESORDERLINE.ORDERLINE = '20' AND 
    SALESORDERLINE.LINESTATUS = 1
    AND
    SALESORDER.CODE IS NOT NULL
    --ORDER BY ORDERLINE ASC;


-- DB2ADMIN.ITXVIEWBONORDERYND source

CREATE VIEW ITXVIEWBONORDERYND AS 
SELECT
    PRODUCTIONDEMAND.CODE,
    --    p.CODE AS DEMAND_DYR,
    PRODUCTIONDEMAND.CODE AS DEMAND_DYR,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.RESERVATIONORDERCODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.USERPRIMARYQUANTITY,
    PRODUCTIONDEMAND.USERPRIMARYUOMCODE,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    USERGENERICGROUP.LONGDESCRIPTION,
    SALESORDER.CREATIONUSER,
    A.SUMMARIZEDDESCRIPTION,
    ad.VALUEINT AS QTY_RESERV,
    a.VALUEDATE AS tgl_delivery
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESORDER SALESORDER ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDER.CODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    PRODUCTIONDEMAND.SUBCODE08 = USERGENERICGROUP.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
            PRODUCTIONRESERVATION.SUBCODE01,
            PRODUCTIONRESERVATION.SUBCODE02,
            PRODUCTIONRESERVATION.SUBCODE03,
            PRODUCTIONRESERVATION.SUBCODE04,
            PRODUCTIONRESERVATION.SUBCODE05,
            PRODUCTIONRESERVATION.USERPRIMARYQUANTITY,
            PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
            FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
            PRODUCTIONRESERVATION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'GYR'
            OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'DYR'
    ) A ON
    PRODUCTIONDEMAND.CODE = A.ORDERCODE
LEFT JOIN PRODUCTIONDEMAND p ON
    p.ORIGDLVSALORDLINESALORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE
    AND p.ORIGDLVSALORDERLINEORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
    AND p.ITEMTYPEAFICODE = 'DYR'
LEFT JOIN ADSTORAGE ad ON
    ad.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND ad.FIELDNAME = 'QTYPermintaanRMP'
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a.FIELDNAME = 'DeliveryCelup'
    --WHERE 
    --	PRODUCTIONDEMAND.CODE = '00167828'
GROUP BY
    PRODUCTIONDEMAND.CODE,
    p.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.RESERVATIONORDERCODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.USERPRIMARYQUANTITY,
    PRODUCTIONDEMAND.USERPRIMARYUOMCODE,
    BUSINESSPARTNER.LEGALNAME1,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    USERGENERICGROUP.LONGDESCRIPTION,
    A.SUMMARIZEDDESCRIPTION,
    ad.VALUEINT,
    a.VALUEDATE,
    SALESORDER.CREATIONUSER;


-- DB2ADMIN.ITXVIEWBONRESEP source

CREATE VIEW ITXVIEWBONRESEP AS
SELECT
    A.PRODUCTIONORDERCODE,
    A.GROUPLINE,
    A.GROUPSTEPNUMBER,
    A.SUFFIXCODE,
    A.ITEMTYPEAFICODE,
    A.SUBCODE01,
    A.SUBCODE02,
    A.SUBCODE03,
    A.SUBCODE04,
    A.SUBCODE05,
    A.SUBCODE06,
    A.SUBCODE07,
    A.SUBCODE08,
    A.SUBCODE09,
    A.SUBCODE10,
    B.SHORTDESCRIPTION,
    C.COMMENTLINE,
    SUM(A.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    A.USERPRIMARYUOMCODE,
    A.ISSUEDATE
FROM
    PRODUCTIONRESERVATION A
LEFT JOIN PRODUCT B ON
    A.ITEMTYPEAFICODE = B.ITEMTYPECODE
    AND A.SUBCODE01 = B.SUBCODE01
    AND A.SUBCODE02 = B.SUBCODE02
    AND A.SUBCODE03 = B.SUBCODE03
    AND A.SUBCODE04 = B.SUBCODE04
    AND A.SUBCODE05 = B.SUBCODE05
    AND A.SUBCODE06 = B.SUBCODE06
    AND A.SUBCODE07 = B.SUBCODE07
    AND A.SUBCODE08 = B.SUBCODE08
    AND A.SUBCODE09 = B.SUBCODE09
    AND A.SUBCODE10 = B.SUBCODE10
LEFT JOIN (
        SELECT
            RECIPECOMPONENT.RECIPESUFFIXCODE,
            RECIPECOMPONENT.COMMENTLINE,
            RECIPECOMPONENT.RECIPEITEMTYPECODE,
            RECIPECOMPONENT.RECIPESUBCODE01
        FROM
            RECIPECOMPONENT RECIPECOMPONENT
    ) C ON
    A.ITEMTYPEAFICODE = C.RECIPEITEMTYPECODE
    AND A.SUBCODE01 = C.RECIPESUBCODE01
    AND A.SUFFIXCODE = C.RECIPESUFFIXCODE
GROUP BY
    A.PRODUCTIONORDERCODE,
    A.GROUPLINE,
    A.GROUPSTEPNUMBER,
    A.SUFFIXCODE,
    A.ITEMTYPEAFICODE,
    A.SUBCODE01,
    A.SUBCODE02,
    A.SUBCODE03,
    A.SUBCODE04,
    A.SUBCODE05,
    A.SUBCODE06,
    A.SUBCODE07,
    A.SUBCODE08,
    A.SUBCODE09,
    A.SUBCODE10,
    B.SHORTDESCRIPTION,
    C.COMMENTLINE,
    A.USERPRIMARYUOMCODE,
    A.ISSUEDATE;


-- DB2ADMIN.ITXVIEWBONRESEP_DETAIL source

CREATE VIEW ITXVIEWBONRESEP_DETAIL AS
SELECT
    RECIPECOMPONENT.RECIPENUMBERID,
    RECIPECOMPONENT.RECIPESUBCODE01,
    RECIPECOMPONENT.ITEMTYPEAFICODE,
    RECIPECOMPONENT.SUBCODE01,
    RECIPECOMPONENT.SUBCODE02,
    RECIPECOMPONENT.SUBCODE03,
    RECIPECOMPONENT.CONSUMPTION,
    RECIPECOMPONENT.ASSEMBLYUOMCODE,
    RECIPECOMPONENT.COMPONENTUOMCODE
FROM
    RECIPECOMPONENT RECIPECOMPONENT;


-- DB2ADMIN.ITXVIEWBONRESEP_TEST source

CREATE VIEW ITXVIEWBONRESEP_TEST AS
SELECT
    A.PRODUCTIONORDERCODE,
    A.GROUPLINE,
    A.GROUPSTEPNUMBER,
    B.GROUPNUMBER,
    A.SUFFIXCODE,
    B.ITEMTYPEAFICODE,
    B.SUBCODE01,
    B.SUBCODE02,
    B.SUBCODE03,
    B.SUBCODE04,
    B.SUBCODE05,
    B.SUBCODE06,
    B.SUBCODE07,
    B.SUBCODE08,
    B.SUBCODE09,
    B.SUBCODE10,
    C.SHORTDESCRIPTION,
    B.COMMENTLINE,
    SUM(A.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    A.USERPRIMARYUOMCODE,
    A.ISSUEDATE
FROM
    PRODUCTIONRESERVATION A
RIGHT JOIN (
        SELECT
            RECIPECOMPONENT.RECIPESUFFIXCODE,
            RECIPECOMPONENT.COMMENTLINE,
            RECIPECOMPONENT.RECIPEITEMTYPECODE,
            RECIPECOMPONENT.RECIPESUBCODE01,
            RECIPECOMPONENT.GROUPNUMBER,
            RECIPECOMPONENT.ITEMTYPEAFICODE,
            RECIPECOMPONENT.SUBCODE01,
            RECIPECOMPONENT.SUBCODE02,
            RECIPECOMPONENT.SUBCODE03,
            RECIPECOMPONENT.SUBCODE04,
            RECIPECOMPONENT.SUBCODE05,
            RECIPECOMPONENT.SUBCODE06,
            RECIPECOMPONENT.SUBCODE07,
            RECIPECOMPONENT.SUBCODE08,
            RECIPECOMPONENT.SUBCODE09,
            RECIPECOMPONENT.SUBCODE10
        FROM
            RECIPECOMPONENT RECIPECOMPONENT
    ) B ON
    A.ITEMTYPEAFICODE = B.RECIPEITEMTYPECODE
    AND A.SUBCODE01 = B.RECIPESUBCODE01
    AND A.SUFFIXCODE = B.RECIPESUFFIXCODE
LEFT JOIN PRODUCT C ON
    B.ITEMTYPEAFICODE = C.ITEMTYPECODE
    AND B.SUBCODE01 = C.SUBCODE01
    AND B.SUBCODE02 = C.SUBCODE02
    AND B.SUBCODE03 = C.SUBCODE03
    AND B.SUBCODE04 = C.SUBCODE04
    AND B.SUBCODE05 = C.SUBCODE05
    AND B.SUBCODE06 = C.SUBCODE06
    AND B.SUBCODE07 = C.SUBCODE07
    AND B.SUBCODE08 = C.SUBCODE08
    AND B.SUBCODE09 = C.SUBCODE09
    AND B.SUBCODE10 = C.SUBCODE10
GROUP BY
    A.PRODUCTIONORDERCODE,
    A.GROUPLINE,
    A.GROUPSTEPNUMBER,
    B.GROUPNUMBER,
    A.SUFFIXCODE,
    B.ITEMTYPEAFICODE,
    B.SUBCODE01,
    B.SUBCODE02,
    B.SUBCODE03,
    B.SUBCODE04,
    B.SUBCODE05,
    B.SUBCODE06,
    B.SUBCODE07,
    B.SUBCODE08,
    B.SUBCODE09,
    B.SUBCODE10,
    C.SHORTDESCRIPTION,
    B.COMMENTLINE,
    A.USERPRIMARYUOMCODE,
    A.ISSUEDATE;


-- DB2ADMIN.ITXVIEWBUKMUTGKGKNT source

CREATE VIEW ITXVIEWBUKMUTGKGKNT AS
SELECT
    INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE,
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.RECEIVINGDATE,
    INTERNALDOCUMENTLINE.WAREHOUSECODE,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    INTERNALDOCUMENTLINE.PROJECTCODE,
    STOCKTRANSACTION.ORDERCOUNTERCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE
FROM
    INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE = STOCKTRANSACTION.ORDERCOUNTERCODE
    AND INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND INTERNALDOCUMENTLINE.WAREHOUSECODE = STOCKTRANSACTION.LOGICALWAREHOUSECODE
    AND INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE;


-- DB2ADMIN.ITXVIEWBUKMUTGKGKNTFLAT source

CREATE VIEW ITXVIEWBUKMUTGKGKNTFLAT AS
SELECT
    INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE,
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.RECEIVINGDATE,
    INTERNALDOCUMENTLINE.WAREHOUSECODE,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    INTERNALDOCUMENTLINE.PROJECTCODE,
    STOCKTRANSACTION.ORDERCOUNTERCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYQUANTITY,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE
FROM
    INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE = STOCKTRANSACTION.ORDERCOUNTERCODE
    AND INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND INTERNALDOCUMENTLINE.WAREHOUSECODE = STOCKTRANSACTION.LOGICALWAREHOUSECODE
    AND INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE;


-- DB2ADMIN.ITXVIEWBUKMUTGKGKNT_NAMA_PETUGAS source

CREATE VIEW ITXVIEWBUKMUTGKGKNT_NAMA_PETUGAS AS
SELECT
    DISTINCT 
	i.INTDOCUMENTPROVISIONALCODE,
    i.ORDERLINE,
    --LISTAGG (a.VALUESTRING , '/ ')
    a.VALUESTRING
FROM
    ADSTORAGE a
LEFT JOIN INTERNALDOCUMENTLINE i ON
    i.ABSUNIQUEID = a.UNIQUEID
WHERE
    NAMENAME = 'NamaPetugas'
    AND FIELDNAME = 'NamaPetugasCode'
    --AND i.INTDOCUMENTPROVISIONALCODE ='I2M5023002532'
GROUP BY
    i.INTDOCUMENTPROVISIONALCODE,
    i.ORDERLINE,
    a.VALUESTRING;


-- DB2ADMIN.ITXVIEWCATLAPHARSPRKNT source

CREATE VIEW ITXVIEWCATLAPHARSPRKNT AS
SELECT
    ADSTORAGE.UNIQUEID,
    LISTAGG(
        ADSTORAGE.VALUESTRING,
        ','
    ) AS CATATAN
FROM
    ADSTORAGE ADSTORAGE
GROUP BY
    ADSTORAGE.UNIQUEID;


-- DB2ADMIN.ITXVIEWCHKSTOCKQC2NOSISA source

CREATE VIEW ITXVIEWCHKSTOCKQC2NOSISA AS
SELECT
    BALANCE.LOTCODE,
    A.PRODUCTIONDEMANDCODE,
    D.LEGALNAME1 AS LANGGANAN,
    F.LONGDESCRIPTION AS BUYER,
    CASE
        WHEN SALESORDER.EXTERNALREFERENCE IS NULL THEN SALESORDERLINE.EXTERNALREFERENCE
        ELSE SALESORDER.EXTERNALREFERENCE
    END AS PO_NUMBER,
    E.LONGDESCRIPTION AS WARNA,
    SUM(BALANCE.BASEPRIMARYQUANTITYUNIT) AS QTY_KG,
    SUM(BALANCE.BASESECONDARYQUANTITYUNIT) AS QTY_YARD,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE
FROM
    BALANCE BALANCE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    BALANCE.LOGICALWAREHOUSECODE = STOCKTRANSACTION.LOGICALWAREHOUSECODE
    AND BALANCE.LOTCODE = STOCKTRANSACTION.LOTCODE
    AND BALANCE.ELEMENTSCODE = STOCKTRANSACTION.ITEMELEMENTCODE
    AND BALANCE.WAREHOUSELOCATIONCODE = STOCKTRANSACTION.WAREHOUSELOCATIONCODE
LEFT JOIN SALESORDER SALESORDER ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDERLINE.SALESORDERCODE
    AND BALANCE.ITEMTYPECODE = SALESORDERLINE.ITEMTYPEAFICODE
    AND BALANCE.DECOSUBCODE01 = SALESORDERLINE.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = SALESORDERLINE.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = SALESORDERLINE.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = SALESORDERLINE.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = SALESORDERLINE.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = SALESORDERLINE.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = SALESORDERLINE.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = SALESORDERLINE.SUBCODE08
    AND BALANCE.DECOSUBCODE09 = SALESORDERLINE.SUBCODE09
    AND BALANCE.DECOSUBCODE10 = SALESORDERLINE.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) A ON
    BALANCE.LOTCODE = A.PRODUCTIONORDERCODE
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) D ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = D.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION
        FROM
            USERGENERICGROUP USERGENERICGROUP
    ) E ON
    BALANCE.DECOSUBCODE05 = E.CODE
LEFT JOIN (
        SELECT
            ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE,
            ORDERPARTNERBRAND.CODE,
            ORDERPARTNERBRAND.LONGDESCRIPTION
        FROM
            ORDERPARTNERBRAND ORDERPARTNERBRAND
    ) F ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = F.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDER.ORDERPARTNERBRANDCODE = F.CODE
WHERE
    BALANCE.LOGICALWAREHOUSECODE = 'M031'
    AND BALANCE.ITEMTYPECODE = 'KFF'
    AND CASE
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SP' THEN '0'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SG' THEN '0'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SM' THEN '0'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'ST' THEN '0'
        ELSE '1'
    END <> '0'
GROUP BY
    BALANCE.LOTCODE,
    A.PRODUCTIONDEMANDCODE,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    D.LEGALNAME1,
    E.LONGDESCRIPTION,
    F.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWCHKSTOCKQC2SISA source

CREATE VIEW ITXVIEWCHKSTOCKQC2SISA AS
SELECT
    BALANCE.LOTCODE,
    A.PRODUCTIONDEMANDCODE,
    D.LEGALNAME1 AS LANGGANAN,
    F.LONGDESCRIPTION AS BUYER,
    CASE
        WHEN SALESORDER.EXTERNALREFERENCE IS NULL THEN SALESORDERLINE.EXTERNALREFERENCE
        ELSE SALESORDER.EXTERNALREFERENCE
    END AS PO_NUMBER,
    E.LONGDESCRIPTION AS WARNA,
    SUM(BALANCE.BASEPRIMARYQUANTITYUNIT) AS QTY_KG,
    SUM(BALANCE.BASESECONDARYQUANTITYUNIT) AS QTY_YARD,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE
FROM
    BALANCE BALANCE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    BALANCE.LOGICALWAREHOUSECODE = STOCKTRANSACTION.LOGICALWAREHOUSECODE
    AND BALANCE.LOTCODE = STOCKTRANSACTION.LOTCODE
    AND BALANCE.ELEMENTSCODE = STOCKTRANSACTION.ITEMELEMENTCODE
    AND BALANCE.WAREHOUSELOCATIONCODE = STOCKTRANSACTION.WAREHOUSELOCATIONCODE
LEFT JOIN SALESORDER SALESORDER ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDERLINE.SALESORDERCODE
    AND BALANCE.ITEMTYPECODE = SALESORDERLINE.ITEMTYPEAFICODE
    AND BALANCE.DECOSUBCODE01 = SALESORDERLINE.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = SALESORDERLINE.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = SALESORDERLINE.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = SALESORDERLINE.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = SALESORDERLINE.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = SALESORDERLINE.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = SALESORDERLINE.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = SALESORDERLINE.SUBCODE08
    AND BALANCE.DECOSUBCODE09 = SALESORDERLINE.SUBCODE09
    AND BALANCE.DECOSUBCODE10 = SALESORDERLINE.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) A ON
    BALANCE.LOTCODE = A.PRODUCTIONORDERCODE
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) D ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = D.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION
        FROM
            USERGENERICGROUP USERGENERICGROUP
    ) E ON
    BALANCE.DECOSUBCODE05 = E.CODE
LEFT JOIN (
        SELECT
            ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE,
            ORDERPARTNERBRAND.CODE,
            ORDERPARTNERBRAND.LONGDESCRIPTION
        FROM
            ORDERPARTNERBRAND ORDERPARTNERBRAND
    ) F ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = F.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDER.ORDERPARTNERBRANDCODE = F.CODE
WHERE
    BALANCE.LOGICALWAREHOUSECODE = 'M031'
    AND BALANCE.ITEMTYPECODE = 'KFF'
    AND CASE
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SP' THEN '1'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SG' THEN '1'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'SM' THEN '1'
        WHEN STOCKTRANSACTION.QUALITYREASONCODE = 'ST' THEN '1'
        ELSE '0'
    END <> '0'
GROUP BY
    BALANCE.LOTCODE,
    A.PRODUCTIONDEMANDCODE,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    D.LEGALNAME1,
    E.LONGDESCRIPTION,
    F.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWCODEEVENTCODE source

CREATE VIEW ITXVIEWCODEEVENTCODE AS
SELECT
    LISTAGG(
        TRIM(e.CODEEVENTCODE),
        ', '
    ) AS CODEEVENTCODE,
    e.ELEMENTSINSPECTIONELEMENTCODE
FROM
    ELEMENTSINSPECTIONEVENT e
GROUP BY
    ELEMENTSINSPECTIONELEMENTCODE;


-- DB2ADMIN.ITXVIEWCOLOR source

CREATE VIEW ITXVIEWCOLOR AS 
SELECT
    ITEMTYPECODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    SUBCODE06,
    SUBCODE07,
    SUBCODE08,
    SUBCODE09,
    SUBCODE10,
    CASE
        WHEN WARNA = 'NULL' THEN WARNA_FKF
        ELSE WARNA
    END AS WARNA,
    WARNA_DASAR
FROM
    (
        SELECT
            PRODUCT.ITEMTYPECODE AS ITEMTYPECODE,
            PRODUCT.SUBCODE01 AS SUBCODE01,
            PRODUCT.SUBCODE02 AS SUBCODE02,
            PRODUCT.SUBCODE03 AS SUBCODE03,
            PRODUCT.SUBCODE04 AS SUBCODE04,
            PRODUCT.SUBCODE05 AS SUBCODE05,
            PRODUCT.SUBCODE06 AS SUBCODE06,
            PRODUCT.SUBCODE07 AS SUBCODE07,
            PRODUCT.SUBCODE08 AS SUBCODE08,
            PRODUCT.SUBCODE09 AS SUBCODE09,
            PRODUCT.SUBCODE10 AS SUBCODE10,
            CASE
                WHEN PRODUCT.ITEMTYPECODE = 'KFF'
                AND PRODUCT.SUBCODE07 = '-' THEN A.LONGDESCRIPTION
                WHEN PRODUCT.ITEMTYPECODE = 'KFF'
                AND PRODUCT.SUBCODE07 <> '-'
                OR PRODUCT.SUBCODE07 <> '' THEN B.COLOR_PRT
                ELSE 'NULL'
            END AS WARNA,
            CASE
                WHEN PRODUCT.ITEMTYPECODE = 'FKF'
                AND LOCATE('-', PRODUCT.LONGDESCRIPTION) = 0 THEN PRODUCT.LONGDESCRIPTION
                WHEN PRODUCT.ITEMTYPECODE = 'FKF'
                AND LOCATE('-', PRODUCT.LONGDESCRIPTION) > 0 THEN SUBSTR(PRODUCT.LONGDESCRIPTION , 1, LOCATE('-', PRODUCT.LONGDESCRIPTION)-1)
                ELSE 'NULL'
            END AS WARNA_FKF,
            WARNA_DASAR
        FROM
            PRODUCT PRODUCT
        LEFT JOIN(
                SELECT
                    CAST(
                        SUBSTR(RECIPE.SUBCODE01, 1, LOCATE('/', RECIPE.SUBCODE01)-1) AS CHARACTER(10)
                    ) AS ARTIKEL,
                    CAST(
                        SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1, 7) AS CHARACTER(10)
                    ) AS NO_WARNA,
                    SUBSTR(SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1), LOCATE('/', SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1))+ 1) AS CELUP,
                    RECIPE.LONGDESCRIPTION,
                    RECIPE.SHORTDESCRIPTION,
                    RECIPE.SEARCHDESCRIPTION,
                    RECIPE.NUMBERID,
                    PRODUCT.SUBCODE03,
                    PRODUCT.SUBCODE05,
                    PRODUCT.LONGDESCRIPTION AS PRODUCT_LONG
                FROM
                    RECIPE RECIPE
                LEFT JOIN PRODUCT PRODUCT ON
                    SUBSTR(RECIPE.SUBCODE01, 1, LOCATE('/', RECIPE.SUBCODE01)-1) = PRODUCT.SUBCODE03
                    AND SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1, 7) = PRODUCT.SUBCODE05
                WHERE
                    RECIPE.ITEMTYPECODE = 'RFD'
                    AND LOCATE('/', RECIPE.SUBCODE01) > 0
                    AND RECIPE.SUFFIXCODE = '001'
                    --            AND NOT RECIPE.SEARCHDESCRIPTION LIKE '%DELETE%' AND NOT RECIPE.SEARCHDESCRIPTION LIKE '%delete%'
            ) A ON
            PRODUCT.SUBCODE03 = A.SUBCODE03
            AND PRODUCT.SUBCODE05 = A.SUBCODE05
        LEFT JOIN(
                SELECT
                    DESIGN.SUBCODE01,
                    DESIGNCOMPONENT.VARIANTCODE,
                    DESIGNCOMPONENT.LONGDESCRIPTION AS COLOR_PRT,
                    DESIGNCOMPONENT.SHORTDESCRIPTION AS WARNA_DASAR
                FROM
                    DESIGN DESIGN
                LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
                    DESIGN.NUMBERID = DESIGNCOMPONENT.DESIGNNUMBERID
                    AND DESIGN.SUBCODE01 = DESIGNCOMPONENT.DESIGNSUBCODE01
            ) B ON
            PRODUCT.SUBCODE07 = B.SUBCODE01
            AND PRODUCT.SUBCODE08 = B.VARIANTCODE
        WHERE
            (
                PRODUCT.ITEMTYPECODE = 'KFF'
                    OR PRODUCT.ITEMTYPECODE = 'FKF'
            )
        GROUP BY
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            PRODUCT.LONGDESCRIPTION,
            A.LONGDESCRIPTION,
            B.COLOR_PRT,
            WARNA_DASAR,
            PRODUCT.SHORTDESCRIPTION
    );


-- DB2ADMIN.ITXVIEWCONSUMPTIONRECIPE source

CREATE VIEW ITXVIEWCONSUMPTIONRECIPE AS
SELECT
    ITXVIEWRECIPEHEADER.CODE,
    ITXVIEWRECIPEHEADER.SUBCODE01 AS RECIPE_HEADER,
    ITXVIEWRECIPEHEADER.SUFFIXCODE,
    ITXVIEWRECIPEHEADER.HEADERLINELINK,
    RECIPECOMPONENT.ITEMTYPEAFICODE,
    RECIPECOMPONENT.SUBCODE01,
    RECIPECOMPONENT.SUBCODE02,
    RECIPECOMPONENT.SUBCODE03,
    RECIPECOMPONENT.CONSUMPTION,
    RECIPECOMPONENT.COMPONENTUOMCODE,
    CASE
        WHEN RECIPECOMPONENT.CONSUMPTIONTYPE = '1' THEN 'Quantity'
        WHEN RECIPECOMPONENT.CONSUMPTIONTYPE = '2' THEN 'Percentage'
        ELSE ''
    END AS CONSUMPTIONTYPE
FROM
    ITXVIEWRECIPEHEADER ITXVIEWRECIPEHEADER
LEFT JOIN RECIPECOMPONENT RECIPECOMPONENT ON
    ITXVIEWRECIPEHEADER.SUBCODE01 = RECIPECOMPONENT.RECIPESUBCODE01
    AND ITXVIEWRECIPEHEADER.SUFFIXCODE = RECIPECOMPONENT.RECIPESUFFIXCODE;


-- DB2ADMIN.ITXVIEWCUTELEMENTASLI source

CREATE VIEW ITXVIEWCUTELEMENTASLI AS 
SELECT
        STOCKTRANSACTION.ITEMELEMENTCODE,
        X.ITEMELEMENTCODE AS ELEMENT_ASLI,
        STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
FROM
        STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN STOCKTRANSACTION X 
	ON
        STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER = X.TRANSACTIONNUMBER
WHERE
        STOCKTRANSACTION.TEMPLATECODE = '342'
GROUP BY
        STOCKTRANSACTION.ITEMELEMENTCODE,
        X.ITEMELEMENTCODE,
        STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEWCUTITEMELEMENTKFF source

CREATE VIEW ITXVIEWCUTITEMELEMENTKFF AS
SELECT
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.DECOSUBCODE07,
    STOCKTRANSACTION.DECOSUBCODE08,
    STOCKTRANSACTION.DECOSUBCODE09,
    STOCKTRANSACTION.DECOSUBCODE10,
    STOCKTRANSACTION.BASEPRIMARYUOMCODE,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.BASESECONDARYUOMCODE,
    STOCKTRANSACTION.BASESECONDARYQUANTITY,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.QUALITYREASONCODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDER.INTERNALREFERENCE,
    STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
FROM
    SALESORDER
RIGHT OUTER JOIN STOCKTRANSACTION ON
    SALESORDER.CODE = STOCKTRANSACTION.PROJECTCODE
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '342'
    AND STOCKTRANSACTION.ITEMTYPECODE = 'KFF';


-- DB2ADMIN.ITXVIEWCUTITEMELEMENTKGF source

CREATE VIEW ITXVIEWCUTITEMELEMENTKGF AS
SELECT
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.PROJECTCODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    DB2ADMIN.STOCKTRANSACTION STOCKTRANSACTION
RIGHT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '342'
    AND STOCKTRANSACTION.ITEMTYPECODE = 'KGF';


-- DB2ADMIN.ITXVIEWDELAYGREIGERMP source

CREATE VIEW ITXVIEWDELAYGREIGERMP AS 
SELECT
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    SUM(STOCKTRANSACTION.USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
    STOCKTRANSACTION.TRANSACTIONDATE,
    A.VALUEDATE AS TGL_RMP_TO,
    E.VALUEDATE AS TGL_RMP_FROM,
    F.VALUESTRING AS MC,
    B.SHORTDESCRIPTION AS UK_MC,
    C.PRODUCTIONORDERCODE,
    D.LONGDESCRIPTION AS JENIS_KAIN
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUEDATE
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'RMPGreigeReqDateTo'
    ) A ON
    PRODUCTIONDEMAND.ABSUNIQUEID = A.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUEDATE
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'RMPReqDate'
    ) E ON
    PRODUCTIONDEMAND.ABSUNIQUEID = E.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'MachineNo'
    ) F ON
    PRODUCTIONDEMAND.ABSUNIQUEID = F.UNIQUEID
LEFT JOIN (
        SELECT
            USERGENERICGROUP.SHORTDESCRIPTION,
            USERGENERICGROUP.CODE
        FROM
            USERGENERICGROUP USERGENERICGROUP
    ) B ON
    F.VALUESTRING = B.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) C ON
    PRODUCTIONDEMAND.CODE = C.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.LONGDESCRIPTION
        FROM
            PRODUCT PRODUCT
    ) D ON
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = D.ITEMTYPECODE
    AND 
PRODUCTIONDEMAND.SUBCODE01 = D.SUBCODE01
    AND 
PRODUCTIONDEMAND.SUBCODE02 = D.SUBCODE02
    AND 
PRODUCTIONDEMAND.SUBCODE03 = D.SUBCODE03
    AND 
PRODUCTIONDEMAND.SUBCODE04 = D.SUBCODE04
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION 
ON
    STOCKTRANSACTION.PRODUCTIONORDERCODE = C.PRODUCTIONORDERCODE
    AND 
STOCKTRANSACTION.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND 
STOCKTRANSACTION.LOTCODE = PRODUCTIONDEMAND.CODE
WHERE
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KGF'
    AND STOCKTRANSACTION.TRANSACTIONDATE > A.VALUEDATE
GROUP BY
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    STOCKTRANSACTION.TRANSACTIONDATE,
    A.VALUEDATE,
    E.VALUEDATE,
    F.VALUESTRING,
    B.SHORTDESCRIPTION,
    C.PRODUCTIONORDERCODE,
    D.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWDELIVGREIGE2 source

CREATE VIEW ITXVIEWDELIVGREIGE2 AS 
SELECT
    SALESORDER.CODE,
    SALESORDER.REQUIREDDUEDATE
FROM
    SALESORDER SALESORDER;


-- DB2ADMIN.ITXVIEWDESCPRDORDER source

CREATE VIEW ITXVIEWDESCPRDORDER AS
SELECT
    h.ITEMTYPEAFICODE,
    p.SUBCODE01,
    p.SUBCODE02,
    p.SUBCODE03,
    p.SUBCODE04,
    p.SUBCODE05,
    p.SUBCODE06,
    p.SUBCODE07,
    p.SUBCODE08,
    p.SUBCODE09,
    p.SUBCODE10,
    CONCAT(TRIM(p.SUBCODE02), TRIM(p.SUBCODE03)) AS ITEMNO,
    p.ORIGDLVSALORDLINESALORDERCODE AS PRO_ORDER,
    ps.PRODUCTIONORDERCODE,
    E.LEGALNAME1 AS LANGGANAN,
    TRIM(f.LONGDESCRIPTION) AS WARNA,
    TRIM(f.CODE) AS NO_WARNA
FROM
    PRODUCTIONDEMAND p
LEFT OUTER JOIN 
				(
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) ps
			ON
    p.CODE = ps.PRODUCTIONDEMANDCODE
LEFT OUTER JOIN
				(
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) E
			ON
    p.CUSTOMERCODE = E.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN USERGENERICGROUP f
				ON
    p.SUBCODE05 = f.CODE
LEFT OUTER JOIN PRODUCTIONDEMAND h
			ON
    p.ORIGDLVSALORDLINESALORDERCODE = h.ORIGDLVSALORDLINESALORDERCODE
    AND 
			p.SUBCODE01 = h.SUBCODE01
    AND 
			p.SUBCODE02 = h.SUBCODE02
    AND
			p.SUBCODE03 = h.SUBCODE03
    AND
			p.SUBCODE04 = h.SUBCODE04
    AND 
			(
        h.ITEMTYPEAFICODE = 'KFF'
            OR h.ITEMTYPEAFICODE = 'FKF'
    )
GROUP BY
    h.ITEMTYPEAFICODE,
    p.SUBCODE01,
    p.SUBCODE02,
    p.SUBCODE03,
    p.SUBCODE04,
    p.SUBCODE05,
    p.SUBCODE06,
    p.SUBCODE07,
    p.SUBCODE08,
    p.SUBCODE09,
    p.SUBCODE10,
    p.ORIGDLVSALORDLINESALORDERCODE,
    ps.PRODUCTIONORDERCODE,
    E.LEGALNAME1,
    f.LONGDESCRIPTION,
    f.CODE;


-- DB2ADMIN.ITXVIEWDETAILBAGIKAIN source

CREATE VIEW ITXVIEWDETAILBAGIKAIN AS 
SELECT
    PRODUCTIONDEMAND.CODE,
    A.PRODUCTIONORDERCODE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    CASE
        WHEN STOCKTRANSACTION.ITEMELEMENTCODE LIKE '800000%' THEN SUBSTR(B.ELEMENT_ASLI, 1, 8)
        ELSE SUBSTR(STOCKTRANSACTION.ITEMELEMENTCODE, 1, 8)
    END AS DEMAND_KGF,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.USERSECONDARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    C.VALUESTRING AS MESIN_KNT,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            (
                PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
                    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
            )
    ) A ON
    PRODUCTIONDEMAND.CODE = A.ORDERCODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION
ON
    A.PRODUCTIONORDERCODE = STOCKTRANSACTION.ORDERCODE
LEFT JOIN (
        SELECT
            STOCKTRANSACTION.ITEMELEMENTCODE,
            X.ITEMELEMENTCODE AS ELEMENT_ASLI,
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        LEFT JOIN STOCKTRANSACTION X 
	ON
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER = X.TRANSACTIONNUMBER
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '342'
        GROUP BY
            STOCKTRANSACTION.ITEMELEMENTCODE,
            X.ITEMELEMENTCODE,
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
    ) B ON
    STOCKTRANSACTION.ITEMELEMENTCODE = B.ITEMELEMENTCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ABSUNIQUEID,
            ADSTORAGE.VALUESTRING
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCTIONDEMAND.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'MachineNo'
    ) C ON
    C.CODE = SUBSTR(STOCKTRANSACTION.ITEMELEMENTCODE, 1, 8)
    OR C.CODE = SUBSTR(B.ELEMENT_ASLI, 1, 8)
WHERE
    STOCKTRANSACTION.ONHANDUPDATE > 1
    AND (
        STOCKTRANSACTION.ITEMTYPECODE = 'KGF'
            OR STOCKTRANSACTION.ITEMTYPECODE = 'FKG'
    );


-- DB2ADMIN.ITXVIEWDETAILBAGIKAINNOCUT source

CREATE VIEW ITXVIEWDETAILBAGIKAINNOCUT AS 
SELECT
    PRODUCTIONDEMAND.CODE,
    A.PRODUCTIONORDERCODE,
    SUBSTR(STOCKTRANSACTION.ITEMELEMENTCODE, 1, 8) AS DEMAND_KGF,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.USERSECONDARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    C.VALUESTRING AS MESIN_KNT,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            (
                PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
                    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
            )
    ) A ON
    PRODUCTIONDEMAND.CODE = A.ORDERCODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION
ON
    A.PRODUCTIONORDERCODE = STOCKTRANSACTION.ORDERCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ABSUNIQUEID,
            ADSTORAGE.VALUESTRING
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCTIONDEMAND.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'MachineNo'
    ) C ON
    C.CODE = SUBSTR(STOCKTRANSACTION.ITEMELEMENTCODE, 1, 8)
WHERE
    STOCKTRANSACTION.ONHANDUPDATE > 1
    AND (
        STOCKTRANSACTION.ITEMTYPECODE = 'KGF'
            OR STOCKTRANSACTION.ITEMTYPECODE = 'FKG'
    );


-- DB2ADMIN.ITXVIEWDETAILBAGIKAIN_SUM source

CREATE VIEW ITXVIEWDETAILBAGIKAIN_SUM AS 
SELECT
    DISTINCT 
    PRODUCTIONDEMAND.CODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            (
                PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
                    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
            )
    ) A ON
    PRODUCTIONDEMAND.CODE = A.ORDERCODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION
ON
    A.PRODUCTIONORDERCODE = STOCKTRANSACTION.ORDERCODE
LEFT JOIN (
        SELECT
            STOCKTRANSACTION.ITEMELEMENTCODE,
            X.ITEMELEMENTCODE AS ELEMENT_ASLI,
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        LEFT JOIN STOCKTRANSACTION X 
	ON
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER = X.TRANSACTIONNUMBER
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '342'
        GROUP BY
            STOCKTRANSACTION.ITEMELEMENTCODE,
            X.ITEMELEMENTCODE,
            STOCKTRANSACTION.CUTORGTRTRANSACTIONNUMBER
    ) B ON
    STOCKTRANSACTION.ITEMELEMENTCODE = B.ITEMELEMENTCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ABSUNIQUEID,
            ADSTORAGE.VALUESTRING
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCTIONDEMAND.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'MachineNo'
    ) C ON
    C.CODE = SUBSTR(STOCKTRANSACTION.ITEMELEMENTCODE, 1, 8)
    OR C.CODE = SUBSTR(B.ELEMENT_ASLI, 1, 8)
WHERE
    STOCKTRANSACTION.ONHANDUPDATE > 1
    AND (
        STOCKTRANSACTION.ITEMTYPECODE = 'KGF'
            OR STOCKTRANSACTION.ITEMTYPECODE = 'FKG'
    );


-- DB2ADMIN.ITXVIEWDETAILKGELINS source

CREATE VIEW ITXVIEWDETAILKGELINS AS 
SELECT
    ELEMENTSINSPECTION.ELEMENTCODE,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.QUALITYREASONCODE,
    QUALITYREASON.LONGDESCRIPTION,
    A.VALUEDECIMAL
FROM
    ELEMENTSINSPECTION ELEMENTSINSPECTION
LEFT JOIN QUALITYREASON QUALITYREASON ON
    ELEMENTSINSPECTION.QUALITYREASONCODE = QUALITYREASON.CODE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUEDECIMAL
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'CalculatedLength'
    ) A ON
    ELEMENTSINSPECTION.ABSUNIQUEID = A.UNIQUEID;


-- DB2ADMIN.ITXVIEWDETAILMOHONBENANGKNT source

CREATE VIEW ITXVIEWDETAILMOHONBENANGKNT AS
SELECT
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS KG,
    SUM(STOCKTRANSACTION.USERSECONDARYQUANTITY) AS CONES,
    STOCKTRANSACTION.CREATIONUSER
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '203'
    AND STOCKTRANSACTION.TOKENCODE IS NULL
GROUP BY
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    STOCKTRANSACTION.CREATIONUSER;


-- DB2ADMIN.ITXVIEWDETAILMOHONBENANGKNTLUAR source

CREATE VIEW ITXVIEWDETAILMOHONBENANGKNTLUAR AS
SELECT
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS KG,
    SUM(STOCKTRANSACTION.USERSECONDARYQUANTITY) AS CONES,
    STOCKTRANSACTION.CREATIONUSER
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '201'
    AND STOCKTRANSACTION.TOKENCODE IS NULL
GROUP BY
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE,
    STOCKTRANSACTION.USERSECONDARYUOMCODE,
    STOCKTRANSACTION.CREATIONUSER;


-- DB2ADMIN.ITXVIEWDETAILTQADIDAS source

CREATE VIEW ITXVIEWDETAILTQADIDAS AS
SELECT
    A.CODE AS DEMANDNO,
    TRIM(B.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(E.LEGALNAME1) AS LEGALNAME1,
    TRIM(C.ORDERPARTNERBRANDCODE) AS ORDERPARTNERBRANDCODE,
    TRIM(C.SALESORDERCODE) AS SALESORDERCODE,
    TRIM(C.ITEMDESCRIPTION) AS ITEMDESCRIPTION,
    TRIM(A.SUBCODE05) AS NO_WARNA,
    TRIM(F.LONGDESCRIPTION) AS WARNA,
    TRIM(A.SUBCODE02) AS SUBCODE02,
    TRIM(A.SUBCODE03) AS SUBCODE03,
    TRIM(C.LONGDESCRIPTION) AS NO_ITEM,
    TRIM(C.NO_PO1) AS NO_PO1,
    TRIM(C.NO_PO2) AS NO_PO2,
    TRIM(C.INTERNALREFERENCE) AS INTERNALREFERENCE,
    TRIM(C.STATISTICALGROUPCODE) AS SEASON,
    A.BASEPRIMARYQUANTITY AS QTY_NETTO,
    TRIM(A.BASEPRIMARYUOMCODE) AS BASEPRIMARYUOMCODE,
    A.BASESECONDARYQUANTITY AS QTY_NETTO_YARD,
    TRIM(A.BASESECONDARYUOMCODE) AS BASESECONDARYUOMCODE,
    C.QTY_ORDER,
    TRIM(C.QTY_ORDER_UOM) AS QTY_ORDER_UOM,
    C.QTY_PANJANG_ORDER,
    TRIM(C.QTY_PANJANG_ORDER_UOM) AS QTY_PANJANG_ORDER_UOM,
    G.USEDBASEPRIMARYQUANTITY AS QTY_BAGI_KAIN,
    C.DELIVERYDATE,
    D.NAMENAME,
    D.VALUEDECIMAL
FROM
    PRODUCTIONDEMAND A
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) B ON
    A.CODE = B.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE AS QTY_ORDER_UOM,
            SALESORDER.EXTERNALREFERENCE AS NO_PO1,
            SALESORDERLINE.EXTERNALREFERENCE AS NO_PO2,
            SALESORDERLINE.INTERNALREFERENCE,
            SUM(SALESORDERLINE.BASEPRIMARYQUANTITY) AS QTY_ORDER,
            SUM(SALESORDERLINE.BASESECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
            SALESORDERLINE.BASESECONDARYUOMCODE AS QTY_PANJANG_ORDER_UOM,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION
        FROM
            SALESORDER SALESORDER
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
        LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
            SALESORDERLINE.SALESORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
            AND SALESORDERLINE.ORDERLINE = SALESORDERDELIVERY.SALESORDERLINEORDERLINE
        LEFT JOIN ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERITEMORDERPARTNERLINK.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDERLINE.ITEMTYPEAFICODE = ORDERITEMORDERPARTNERLINK.ITEMTYPEAFICODE
            AND SALESORDERLINE.SUBCODE01 = ORDERITEMORDERPARTNERLINK.SUBCODE01
            AND SALESORDERLINE.SUBCODE02 = ORDERITEMORDERPARTNERLINK.SUBCODE02
            AND SALESORDERLINE.SUBCODE03 = ORDERITEMORDERPARTNERLINK.SUBCODE03
            AND SALESORDERLINE.SUBCODE04 = ORDERITEMORDERPARTNERLINK.SUBCODE04
            AND SALESORDERLINE.SUBCODE05 = ORDERITEMORDERPARTNERLINK.SUBCODE05
            AND SALESORDERLINE.SUBCODE06 = ORDERITEMORDERPARTNERLINK.SUBCODE06
            AND SALESORDERLINE.SUBCODE07 = ORDERITEMORDERPARTNERLINK.SUBCODE07
            AND SALESORDERLINE.SUBCODE08 = ORDERITEMORDERPARTNERLINK.SUBCODE08
            AND SALESORDERLINE.SUBCODE09 = ORDERITEMORDERPARTNERLINK.SUBCODE09
            AND SALESORDERLINE.SUBCODE10 = ORDERITEMORDERPARTNERLINK.SUBCODE10
        GROUP BY
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE,
            SALESORDERLINE.BASESECONDARYUOMCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDERLINE.EXTERNALREFERENCE,
            SALESORDERLINE.INTERNALREFERENCE,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION
    ) C ON
    A.PROJECTCODE = C.SALESORDERCODE
    AND A.SUBCODE03 = C.SUBCODE03
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            LISTAGG(
                TRIM(ADSTORAGE.NAMENAME),
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS NAMENAME,
            LISTAGG(
                ADSTORAGE.VALUEDECIMAL,
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10
    ) D ON
    A.SUBCODE01 = D.SUBCODE01
    AND A.SUBCODE02 = D.SUBCODE02
    AND A.SUBCODE03 = D.SUBCODE03
    AND A.SUBCODE04 = D.SUBCODE04
    AND A.SUBCODE05 = D.SUBCODE05
    AND A.SUBCODE06 = D.SUBCODE06
    AND A.SUBCODE07 = D.SUBCODE07
    AND A.SUBCODE08 = D.SUBCODE08
    AND A.SUBCODE09 = D.SUBCODE09
    AND A.SUBCODE10 = D.SUBCODE10
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) E ON
    A.CUSTOMERCODE = E.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION
        FROM
            USERGENERICGROUP USERGENERICGROUP
    ) F ON
    A.SUBCODE05 = F.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
            SUM(PRODUCTIONRESERVATION.USEDBASEPRIMARYQUANTITY) AS USEDBASEPRIMARYQUANTITY
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE
    ) G ON
    A.CODE = G.ORDERCODE;


-- DB2ADMIN.ITXVIEWELEMENTORIGINCUTTING source

CREATE VIEW ITXVIEWELEMENTORIGINCUTTING AS
SELECT
    A.ITEMELEMENTCODE AS ELEMENT_CUTTING,
    B.ITEMELEMENTCODE AS ELEMENT_ASLI,
    B.TRANSACTIONNUMBER
FROM
    STOCKTRANSACTION A
LEFT JOIN STOCKTRANSACTION B ON
    A.CUTORGTRTRANSACTIONNUMBER = B.TRANSACTIONNUMBER
WHERE
    A.TEMPLATECODE = '342'
    AND B.TEMPLATECODE = '341';


-- DB2ADMIN.ITXVIEWGRAMASI source

CREATE VIEW ITXVIEWGRAMASI AS
SELECT
    s.SALESORDERCODE,
    s.ORDERLINE,
    REGEXP_SUBSTR(s.SUBCODE04, '([^-]*)-?', 1, 2, '', 1) AS GRAMASI_FKF,
    a.VALUEDECIMAL AS GRAMASI_KFF
    --	CASE
    --		WHEN a.VALUEDECIMAL IS NULL THEN REGEXP_SUBSTR(s.SUBCODE04, '([^-]*)-?', 1, 2, '', 1)
    --		ELSE a.VALUEDECIMAL
    --	END AS GRAMASI
FROM
    SALESORDERLINE s
LEFT JOIN PRODUCT p ON
    p.SUBCODE01 = s.SUBCODE01
    AND p.SUBCODE02 = s.SUBCODE02
    AND p.SUBCODE03 = s.SUBCODE03
    AND p.SUBCODE04 = s.SUBCODE04
    AND p.SUBCODE05 = s.SUBCODE05
    AND p.SUBCODE06 = s.SUBCODE06
    AND p.SUBCODE07 = s.SUBCODE07
    AND p.SUBCODE08 = s.SUBCODE08
    AND p.SUBCODE09 = s.SUBCODE09
    AND p.SUBCODE10 = s.SUBCODE10
    AND p.ITEMTYPECODE = s.ITEMTYPEAFICODE
    AND p.ITEMTYPECODE = 'KFF'
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.NAMENAME = 'GSM'
    --WHERE s.SALESORDERCODE = 'OPN2200395' AND s.ORDERLINE = 20;


-- DB2ADMIN.ITXVIEWGRAMASI_BUKMUTKNT source

CREATE VIEW ITXVIEWGRAMASI_BUKMUTKNT AS 
SELECT
    QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE,
    QUALITYDOCLINE.CHARACTERISTICCODE,
    QUALITYDOCLINE.VALUEQUANTITY
FROM
    QUALITYDOCLINE QUALITYDOCLINE
WHERE
    QUALITYDOCLINE.CHARACTERISTICCODE = 'GSM';


-- DB2ADMIN.ITXVIEWGSMLEBKNTINS source

CREATE VIEW ITXVIEWGSMLEBKNTINS AS
SELECT
    e.DEMANDCODE,
    e.ELEMENTCODE,
    e.WIDTHGROSS,
    a.VALUEDECIMAL
FROM
    ELEMENTSINSPECTION e
LEFT OUTER JOIN ADSTORAGE a ON
    a.UNIQUEID = e.ABSUNIQUEID
    AND a.NAMENAME = 'GSM';


-- DB2ADMIN.ITXVIEWHASILINSPEKKNTHEADER source

CREATE VIEW ITXVIEWHASILINSPEKKNTHEADER AS 
SELECT
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    LISTAGG(
        DISTINCT(
            TRIM(INTERNALDOCUMENTLINE.INTERNALREFERENCE)
        ),
        ','
    ) AS INTERNALREFERENCE
FROM
    STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE 
ON
    STOCKTRANSACTION.ORDERCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
    AND 
STOCKTRANSACTION.ORDERLINE = INTERNALDOCUMENTLINE.ORDERLINE
WHERE
    STOCKTRANSACTION.ORDERCOUNTERCODE = 'I02M50'
GROUP BY
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04;


-- DB2ADMIN.ITXVIEWHEADERBAGIKAINGKGELCUT source

CREATE VIEW ITXVIEWHEADERBAGIKAINGKGELCUT AS
SELECT
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.PROJECTCODE
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.TEMPLATECODE = 'OPN'
    OR STOCKTRANSACTION.TEMPLATECODE = '120';


-- DB2ADMIN.ITXVIEWHEADERKNTORDER source

CREATE VIEW ITXVIEWHEADERKNTORDER AS
SELECT
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.FINALEFFECTIVEDATE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONORDER.PROGRESSSTATUS
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT OUTER JOIN DB2ADMIN.COMPANY COMPANY ON
    PRODUCTIONDEMAND.COMPANYCODE = COMPANY.CODE
LEFT OUTER JOIN DB2ADMIN.PRODUCTIONCUSTOMIZEDOPTIONS PRODUCTIONCUSTOMIZEDOPTIONS ON
    PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONCUSTOMIZEDOPTIONS.COMPANYCODE
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONDEMAND.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND PRODUCTIONDEMAND.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT OUTER JOIN DB2ADMIN.SCHEDULESOFSTEPSPLITS SCHEDULESOFSTEPSPLITS ON
    PRODUCTIONDEMAND.CODE = SCHEDULESOFSTEPSPLITS.CODE
LEFT JOIN DB2ADMIN.PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    AND PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCOMPANYCODE
LEFT JOIN DB2ADMIN.PRODUCTIONORDER PRODUCTIONORDER ON
    PRODUCTIONORDER.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE
GROUP BY
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.FINALEFFECTIVEDATE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONORDER.PROGRESSSTATUS;


-- DB2ADMIN.ITXVIEWHUE source

CREATE VIEW ITXVIEWHUE AS
SELECT
    *
FROM
    (
        SELECT
            QUALITYDOCLINE.VALUEQUANTITY AS GROUPING0,
            HUE.VALUEQUANTITY AS HUE0,
            QUALITYDOCLINE.VALUEGROUPCODE AS GROUPING1,
            HUE.VALUEGROUPCODE AS HUE1,
            QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE
        FROM
            QUALITYDOCLINE
        LEFT OUTER JOIN 
(
                SELECT
                    QUALITYDOCPRODUCTIONORDERCODE,
                    VALUEGROUPCODE,
                    VALUEQUANTITY
                FROM
                    QUALITYDOCLINE
                WHERE
                    QUALITYDOCLINE.QUALITYDOCUMENTHEADERNUMBERID = '1005'
                    AND
    QUALITYDOCLINE.CHARACTERISTICCODE = 'HUE'
                    AND 
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KFF'
            ) HUE ON
            HUE.QUALITYDOCPRODUCTIONORDERCODE = QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE
        WHERE
            QUALITYDOCLINE.QUALITYDOCUMENTHEADERNUMBERID = '1005'
            AND
	QUALITYDOCLINE.CHARACTERISTICCODE = 'GROUPING'
            AND
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KFF'
    ) A
WHERE
    (
        NOT A.GROUPING1 IS NULL
            AND NOT HUE1 IS NULL
    )
    OR (
        NOT A.GROUPING0 = '0'
            AND NOT HUE0 = '0'
    );


-- DB2ADMIN.ITXVIEWIDENTITASBYPRODORDER source

CREATE VIEW ITXVIEWIDENTITASBYPRODORDER AS 
SELECT
    PRODUCTIONORDER.CODE,
    PRODUCTIONRESERVATION.PROJECTCODE,
    PRODUCTIONRESERVATION.ORDERCODE,
    CASE
        WHEN C.NO_PO IS NULL THEN F.EXTERNALREFERENCE
        ELSE C.NO_PO
    END AS PO_NUMBER,
    C.BUYER,
    D.LEGALNAME1,
    C.DELIVERYDATE,
    E.LONGDESCRIPTION,
    CASE
        WHEN LOCATE('-', E.SHORTDESCRIPTION) = 0 THEN ''
        WHEN LOCATE('-', E.SHORTDESCRIPTION) > 0 THEN SUBSTR(E.SHORTDESCRIPTION , 1, LOCATE('-', E.SHORTDESCRIPTION)-1)
        ELSE ''
    END AS WARNA,
    SUM(PRODUCTIONRESERVATION.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE AS USERPRIMARYUOMCODE,
    SUM(PRODUCTIONRESERVATION.USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
    PRODUCTIONRESERVATION.USERSECONDARYUOMCODE AS USERSECONDARYUOMCODE
FROM
    PRODUCTIONORDER PRODUCTIONORDER
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION
ON
    PRODUCTIONORDER.CODE = PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
LEFT JOIN 
	(
        SELECT
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
            SALESORDER.CODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDER.EXTERNALREFERENCE AS NO_PO,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
        FROM
            SALESORDER SALESORDER
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
        LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
            SALESORDERLINE.SALESORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
        GROUP BY
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
            SALESORDER.CODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION
    ) C
ON
    PRODUCTIONRESERVATION.PROJECTCODE = C.CODE
LEFT JOIN
	(
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) D
ON
    C.ORDPRNCUSTOMERSUPPLIERCODE = D.CUSTOMERSUPPLIERCODE
LEFT JOIN 
	(
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.LONGDESCRIPTION,
            PRODUCT.SHORTDESCRIPTION
        FROM
            PRODUCT PRODUCT
        GROUP BY
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.LONGDESCRIPTION,
            PRODUCT.SHORTDESCRIPTION
    ) E
ON
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE = E.ITEMTYPECODE
    AND 
PRODUCTIONRESERVATION.SUBCODE01 = E.SUBCODE01
    AND 
PRODUCTIONRESERVATION.SUBCODE02 = E.SUBCODE02
    AND
PRODUCTIONRESERVATION.SUBCODE03 = E.SUBCODE03
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            SALESORDERLINE.EXTERNALREFERENCE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = PRODUCTIONDEMAND.CODE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDERLINE.SALESORDERCODE
            AND 
	PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
    ) F ON
    PRODUCTIONORDER.CODE = F.PRODUCTIONORDERCODE
GROUP BY
    PRODUCTIONORDER.CODE,
    PRODUCTIONRESERVATION.PROJECTCODE,
    PRODUCTIONRESERVATION.ORDERCODE,
    C.NO_PO,
    F.EXTERNALREFERENCE,
    C.BUYER,
    D.LEGALNAME1,
    C.DELIVERYDATE,
    E.LONGDESCRIPTION,
    E.SHORTDESCRIPTION,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    PRODUCTIONRESERVATION.USERSECONDARYUOMCODE;


-- DB2ADMIN.ITXVIEWINPUTDATAADMQC source

CREATE VIEW ITXVIEWINPUTDATAADMQC AS
SELECT
    A.CODE AS DEMANDNO,
    TRIM(B.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(F.LEGALNAME1) AS LEGALNAME1,
    TRIM(C.BUYER) AS BUYER,
    CASE
        WHEN C.PO_HEADER IS NULL THEN C.PO_LINE
        ELSE C.PO_HEADER
    END AS PO_NUMBER,
    CASE
        WHEN C.STYLE_HEADER IS NULL THEN C.STYLE_LINE
        ELSE C.STYLE_HEADER
    END AS DATA_STYLE,
    TRIM(C.SALESORDERCODE) AS SALESORDERCODE,
    TRIM(C.NO_ITEM) AS NO_ITEM,
    TRIM(A.SUBCODE02) AS SUBCODE02,
    TRIM(A.SUBCODE03) AS SUBCODE03,
    TRIM(C.ITEMDESCRIPTION) AS ITEMDESCRIPTION,
    P.LONGDESCRIPTION AS JENIS_KAIN,
    D.VALUEDECIMAL AS GRAMASI,
    E.VALUEDECIMAL AS LEBAR,
    C.DELIVERYDATE,
    TRIM(A.SUBCODE05) AS NO_WARNA,
    G.WARNA,
    H.USERPRIMARYQUANTITY AS QTY_BRUTO,
    C.QTY_ORDER,
    C.QTY_PANJANG_ORDER,
    C.CREATIONUSER,
    TRIM(C.QTY_PANJANG_ORDER_UOM) AS QTY_PANJANG_ORDER_UOM,
    I.TGL_PACKING,
    I.TOTAL_ROLL AS TOTAL_ROLL_PACKING,
    I.TOTAL_KG_NETTO AS TOTAL_KG_NETTO_PACKING,
    I.TOTAL_KG_BRUTO AS TOTAL_KG_BRUTO_PACKING,
    I.TOTAL_YARD AS TOTAL_YARD_PACKING,
    I.LENGTHUOMCODE,
    J.TGL_INSPEK,
    K.TOTAL_KG AS TOTAL_KG_SISA,
    K.TOTAL_YARD AS TOTAL_YARD_SISA,
    A.EXTERNALREFERENCE,
    A.INTERNALREFERENCE,
    L.TGL_CCK_WARNA,
    L.JAM_CCK_WARNA,
    M.TGL_FIN,
    M.JAM_FIN,
    N.TGL_PACK,
    N.JAM_PACK,
    O.TGL_INS,
    O.JAM_INS
FROM
    PRODUCTIONDEMAND A
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) B ON
    A.CODE = B.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.EXTERNALREFERENCE AS PO_HEADER,
            SALESORDER.INTERNALREFERENCE AS STYLE_HEADER,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.EXTERNALREFERENCE AS PO_LINE,
            SALESORDERLINE.INTERNALREFERENCE AS STYLE_LINE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SUM(SALESORDERLINE.BASEPRIMARYQUANTITY) AS QTY_ORDER,
            SUM(SALESORDERLINE.BASESECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
            SALESORDERLINE.BASESECONDARYUOMCODE AS QTY_PANJANG_ORDER_UOM,
            SALESORDERLINE.CREATIONUSER,
            SALESORDERDELIVERY.DELIVERYDATE,
            ITXVIEWORDERITEMLINKACTIVE.LONGDESCRIPTION AS NO_ITEM,
            ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
        FROM
            SALESORDER SALESORDER
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
        LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
            SALESORDERLINE.SALESORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
            AND SALESORDERLINE.ORDERLINE = SALESORDERDELIVERY.SALESORDERLINEORDERLINE
        LEFT JOIN ITXVIEWORDERITEMLINKACTIVE ITXVIEWORDERITEMLINKACTIVE ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ITXVIEWORDERITEMLINKACTIVE.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDERLINE.ITEMTYPEAFICODE = ITXVIEWORDERITEMLINKACTIVE.ITEMTYPEAFICODE
            AND SALESORDERLINE.SUBCODE01 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE01
            AND SALESORDERLINE.SUBCODE02 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE02
            AND SALESORDERLINE.SUBCODE03 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE03
            AND SALESORDERLINE.SUBCODE04 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE04
            AND SALESORDERLINE.SUBCODE05 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE05
            AND SALESORDERLINE.SUBCODE06 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE06
            AND SALESORDERLINE.SUBCODE07 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE07
            AND SALESORDERLINE.SUBCODE08 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE08
            AND SALESORDERLINE.SUBCODE09 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE09
            AND SALESORDERLINE.SUBCODE10 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE10
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
            AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
        GROUP BY
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDER.INTERNALREFERENCE,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.EXTERNALREFERENCE,
            SALESORDERLINE.INTERNALREFERENCE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASESECONDARYUOMCODE,
            SALESORDERLINE.CREATIONUSER,
            SALESORDERDELIVERY.DELIVERYDATE,
            ITXVIEWORDERITEMLINKACTIVE.LONGDESCRIPTION,
            ORDERPARTNERBRAND.LONGDESCRIPTION
    ) C ON
    A.ORIGDLVSALORDLINESALORDERCODE = C.SALESORDERCODE
    AND A.SUBCODE03 = C.SUBCODE03
    AND A.ORIGDLVSALORDERLINEORDERLINE = C.ORDERLINE
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'GSM'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) D ON
    A.SUBCODE01 = D.SUBCODE01
    AND A.SUBCODE02 = D.SUBCODE02
    AND A.SUBCODE03 = D.SUBCODE03
    AND A.SUBCODE04 = D.SUBCODE04
    AND A.SUBCODE05 = D.SUBCODE05
    AND A.SUBCODE06 = D.SUBCODE06
    AND A.SUBCODE07 = D.SUBCODE07
    AND A.SUBCODE08 = D.SUBCODE08
    AND A.SUBCODE09 = D.SUBCODE09
    AND A.SUBCODE10 = D.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'Width'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) E ON
    A.SUBCODE01 = E.SUBCODE01
    AND A.SUBCODE02 = E.SUBCODE02
    AND A.SUBCODE03 = E.SUBCODE03
    AND A.SUBCODE04 = E.SUBCODE04
    AND A.SUBCODE05 = E.SUBCODE05
    AND A.SUBCODE06 = E.SUBCODE06
    AND A.SUBCODE07 = E.SUBCODE07
    AND A.SUBCODE08 = E.SUBCODE08
    AND A.SUBCODE09 = E.SUBCODE09
    AND A.SUBCODE10 = E.SUBCODE10
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) F ON
    A.CUSTOMERCODE = F.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            ITXVIEWCOLOR.ITEMTYPECODE,
            ITXVIEWCOLOR.SUBCODE01,
            ITXVIEWCOLOR.SUBCODE02,
            ITXVIEWCOLOR.SUBCODE03,
            ITXVIEWCOLOR.SUBCODE04,
            ITXVIEWCOLOR.SUBCODE05,
            ITXVIEWCOLOR.SUBCODE06,
            ITXVIEWCOLOR.SUBCODE07,
            ITXVIEWCOLOR.SUBCODE08,
            ITXVIEWCOLOR.SUBCODE09,
            ITXVIEWCOLOR.SUBCODE10,
            ITXVIEWCOLOR.WARNA
        FROM
            ITXVIEWCOLOR ITXVIEWCOLOR
    ) G ON
    A.ITEMTYPEAFICODE = G.ITEMTYPECODE
    AND A.SUBCODE01 = G.SUBCODE01
    AND A.SUBCODE02 = G.SUBCODE02
    AND A.SUBCODE03 = G.SUBCODE03
    AND A.SUBCODE04 = G.SUBCODE04
    AND A.SUBCODE05 = G.SUBCODE05
    AND A.SUBCODE06 = G.SUBCODE06
    AND A.SUBCODE07 = G.SUBCODE07
    AND A.SUBCODE08 = G.SUBCODE08
    AND A.SUBCODE09 = G.SUBCODE09
    AND A.SUBCODE10 = G.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
            SUM(PRODUCTIONRESERVATION.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE
    ) H ON
    A.CODE = H.ORDERCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10) AS TGL_PACKING,
            COUNT(ELEMENTSINSPECTION.ELEMENTCODE) AS TOTAL_ROLL,
            SUM(ELEMENTSINSPECTION.WEIGHTGROSS) AS TOTAL_KG_BRUTO,
            SUM(ELEMENTSINSPECTION.WEIGHTNET) AS TOTAL_KG_NETTO,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD,
            ELEMENTSINSPECTION.LENGTHUOMCODE
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE,
            LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10),
            ELEMENTSINSPECTION.LENGTHUOMCODE
    ) I ON
    A.CODE = I.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10) AS TGL_INSPEK
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 11
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE,
            LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10)
    ) J ON
    A.CODE = J.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            SUM(ELEMENTSINSPECTION.WEIGHTGROSS) AS TOTAL_KG,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
                AND CASE
                    WHEN ELEMENTSINSPECTION.QUALITYREASONCODE = 'SP' THEN '1'
                    WHEN ELEMENTSINSPECTION.QUALITYREASONCODE = 'SG' THEN '1'
                    WHEN ELEMENTSINSPECTION.QUALITYREASONCODE = 'SM' THEN '1'
                    WHEN ELEMENTSINSPECTION.QUALITYREASONCODE = 'ST' THEN '1'
                    ELSE '0'
                END <> '0'
            GROUP BY
                ELEMENTSINSPECTION.DEMANDCODE
    ) K ON
    A.CODE = K.DEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE AS TGL_CCK_WARNA,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME AS JAM_CCK_WARNA
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.PLANNEDOPERATIONCODE = 'CCK2'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME
    ) L ON
    A.CODE = L.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE AS TGL_FIN,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME AS JAM_FIN
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.PLANNEDOPERATIONCODE = 'FNJ1'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME
    ) M ON
    A.CODE = M.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE AS TGL_PACK,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME AS JAM_PACK
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.PLANNEDOPERATIONCODE = 'CNP1'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME
    ) N ON
    A.CODE = N.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE AS TGL_INS,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME AS JAM_INS
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.PLANNEDOPERATIONCODE = 'INS3'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUE,
            PRODUCTIONDEMANDSTEP.MINBEGINQUEUETIME
    ) O ON
    A.CODE = O.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            PRODUCT.LONGDESCRIPTION
        FROM
            PRODUCT PRODUCT
    ) P ON
    A.ITEMTYPEAFICODE = P.ITEMTYPECODE
    AND A.SUBCODE01 = P.SUBCODE01
    AND A.SUBCODE02 = P.SUBCODE02
    AND A.SUBCODE03 = P.SUBCODE03
    AND A.SUBCODE04 = P.SUBCODE04
    AND A.SUBCODE05 = P.SUBCODE05
    AND A.SUBCODE06 = P.SUBCODE06
    AND A.SUBCODE07 = P.SUBCODE07
    AND A.SUBCODE08 = P.SUBCODE08
    AND A.SUBCODE09 = P.SUBCODE09
    AND A.SUBCODE10 = P.SUBCODE10;


-- DB2ADMIN.ITXVIEWINSPECTBYSALESDOC source

CREATE VIEW ITXVIEWINSPECTBYSALESDOC AS
SELECT
    A.PROVISIONALCODE,
    B.CODE,
    C.ITEMELEMENTCODE,
    C.LOTCODE
FROM
    SALESDOCUMENT A
LEFT JOIN ALLOCATION B ON
    A.PROVISIONALCODE = B.ORDERCODE
LEFT JOIN ALLOCATION C ON
    B.CODE = C.CODE
WHERE
    C.DETAILTYPE = '0';


-- DB2ADMIN.ITXVIEWINSPECTION source

CREATE VIEW ITXVIEWINSPECTION AS
SELECT
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSPECTIONELEMENTCODE,
    ELEMENTSINSPECTION.LENGTHGROSS,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.WIDTHNET,
    ELEMENTSINSPECTION.QUALITYCODE,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.CODEEVENTCODE),
        ','
    ) AS DEFECT,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.STARTPOSITION),
        ','
    ) AS POSITIONL,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.WIDTHPOSITION),
        ','
    ) AS POSITIONW,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.POINTS),
        ','
    ) AS POINT,
    SUM(ELEMENTSINSPECTIONEVENT.CREDITS) AS CREDIT
FROM
    ELEMENTSINSPECTIONEVENT
LEFT JOIN ELEMENTSINSPECTION ON
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSPECTIONELEMENTCODE = ELEMENTSINSPECTION.ELEMENTCODE
LEFT JOIN ELEMENTS ON
    ELEMENTSINSPECTION.ELEMENTCODE = ELEMENTS.CODE
GROUP BY
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSPECTIONELEMENTCODE,
    ELEMENTSINSPECTION.LENGTHGROSS,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.WIDTHNET,
    ELEMENTSINSPECTION.QUALITYCODE;


-- DB2ADMIN.ITXVIEWINSPECTPACKING source

CREATE VIEW ITXVIEWINSPECTPACKING AS
SELECT
    ELEMENTSINSPECTION.ABSUNIQUEID,
    SUBSTR(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 1, 10) AS INSPECTIONSTARTDATETIME,
    i.LONGDESCRIPTION AS OPERATOR,
    ADSTORAGE.VALUESTRING AS NOMESIN,
    ELEMENTSINSPECTION.QUALITYREASONCODE,
    ADSTORAGE2.VALUEDECIMAL AS GRM,
    TRIM(PRODUCTIONDEMAND.SUBCODE02) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE03) AS NO_HANGER,
    TRIM(PRODUCTIONDEMAND.SUBCODE04) AS LD,
    ELEMENTSINSPECTION.ELEMENTCODE AS ELEMENTSINSPECTIONELEMENTCODE,
    ELEMENTSINSPECTION.LENGTHUOMCODE,
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSINSPECTIONINDEX,
    A.VALUEDECIMAL,
    ELEMENTSINSPECTION.LENGTHGROSS,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.WIDTHNET,
    ELEMENTSINSPECTION.QUALITYCODE,
    CASE
        WHEN ELEMENTSINSPECTION.QUALITYCODE = 1 THEN 'A'
        WHEN ELEMENTSINSPECTION.QUALITYCODE = 2 THEN 'B'
        WHEN ELEMENTSINSPECTION.QUALITYCODE = 3 THEN 'C'
        ELSE '-'
    END AS GRADE_QUALITYCODE,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.CODEEVENTCODE),
        ','
    ) WITHIN GROUP(
    ORDER BY
        ELEMENTSINSPECTIONEVENT."SEQUENCE" ASC
    ) AS DEFECT,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.STARTPOSITION),
        ','
    ) WITHIN GROUP(
    ORDER BY
        ELEMENTSINSPECTIONEVENT."SEQUENCE" ASC
    ) AS POSITIONL,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.WIDTHPOSITION),
        ','
    ) WITHIN GROUP(
    ORDER BY
        ELEMENTSINSPECTIONEVENT."SEQUENCE" ASC
    ) AS POSITIONW,
    LISTAGG(
        CONCAT(CONCAT(ELEMENTSINSPECTIONEVENT."SEQUENCE", ':'), ELEMENTSINSPECTIONEVENT.POINTS),
        ','
    ) WITHIN GROUP(
    ORDER BY
        ELEMENTSINSPECTIONEVENT."SEQUENCE" ASC
    ) AS POINT,
    SUM(ELEMENTSINSPECTIONEVENT.CREDITS) AS CREDIT
FROM
    ELEMENTSINSPECTIONEVENT ELEMENTSINSPECTIONEVENT
RIGHT JOIN ELEMENTSINSPECTION ON
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSPECTIONELEMENTCODE = ELEMENTSINSPECTION.ELEMENTCODE
LEFT JOIN ELEMENTS ON
    ELEMENTSINSPECTION.ELEMENTCODE = ELEMENTS.CODE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUEDECIMAL
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'CalculatedLength'
    ) A ON
    ELEMENTSINSPECTION.ABSUNIQUEID = A.UNIQUEID
LEFT JOIN INITIALS i ON
    i.CODE = ELEMENTSINSPECTION.OPERATORCODE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONDEMAND.CODE = SUBSTR(ELEMENTSINSPECTION.ELEMENTCODE, 1, 8)
LEFT JOIN ADSTORAGE ADSTORAGE ON
    ADSTORAGE.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND ADSTORAGE.FIELDNAME = 'MachineNoCode'
LEFT JOIN ADSTORAGE ADSTORAGE2 ON
    ADSTORAGE2.UNIQUEID = ELEMENTSINSPECTION.ABSUNIQUEID
    AND ADSTORAGE2.FIELDNAME = 'GSM'
    --WHERE 
    --	ELEMENTSINSPECTION.ELEMENTCODE = '0019480201401'
    --	AND 
    --	ELEMENTSINSPECTION.LENGTHUOMCODE = 'yd'
GROUP BY
    ELEMENTSINSPECTION.ABSUNIQUEID,
    ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME,
    i.LONGDESCRIPTION,
    ADSTORAGE.VALUESTRING,
    ADSTORAGE2.VALUEDECIMAL,
    ELEMENTSINSPECTION.QUALITYREASONCODE,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    --    ELEMENTSINSPECTIONEVENT.ELEMENTSINSPECTIONELEMENTCODE,
    ELEMENTSINSPECTION.ELEMENTCODE,
    ELEMENTSINSPECTION.LENGTHUOMCODE,
    ELEMENTSINSPECTIONEVENT.ELEMENTSINSINSPECTIONINDEX,
    A.VALUEDECIMAL,
    ELEMENTSINSPECTION.LENGTHGROSS,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.WIDTHNET,
    ELEMENTSINSPECTION.QUALITYCODE;


-- DB2ADMIN.ITXVIEWINSPECTPOINT source

CREATE VIEW ITXVIEWINSPECTPOINT AS
SELECT
    SUM(POINTS) AS POINTS,
    ELEMENTSINSPECTIONELEMENTCODE
FROM
    ELEMENTSINSPECTIONEVENT
GROUP BY
    ELEMENTSINSPECTIONELEMENTCODE;


-- DB2ADMIN.ITXVIEWINVSUB_BY_NOINV source

CREATE VIEW ITXVIEWINVSUB_BY_NOINV AS
SELECT
    PLANTINVOICE.CODE AS NO_INVOICE,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS RATE,
    PLANTINVOICE.ORDERCURRENCYCODE,
    PLANTINVOICE.BASICVALUE,
    PLANTINVOICE.AGENT1AMOUNT,
    PLANTINVOICE.INVOICETYPECODE,
    PLANTINVOICELINE.TAXTEMPLATECODE,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ORDERLINE,
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    SALESDOCUMENTLINE.USERPRIMARYQUANTITY AS PRIMARYQUANTITY,
    SALESDOCUMENTLINE.USERSECONDARYQUANTITY AS SECONDARYQUANTITY,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    GLMASTER.CODE AS GL_CODE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICE.CODE = PLANTINVOICELINE.PLANTINVOICECODE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERIE.CUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN(
        SELECT
            *
        FROM
            SALESDOCUMENTLINE SALESDOCUMENTLINE
        WHERE
            SALESDOCUMENTLINE.ORDERLINE = '10'
    ) SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEWINV_BY_NOINVOICE source

CREATE VIEW ITXVIEWINV_BY_NOINVOICE AS
SELECT
    PLANTINVOICE.CODE AS NO_INVOICE,
    PLANTINVOICE.INVOICEDATE AS TGL_INVOICE,
    PLANTINVOICE.CONTRACTNOCODE AS BON_ORDER,
    PLANTINVOICE.BLNUMBER,
    PLANTINVOICE.CUSTOMERBOTTLESEALNO AS COMMERCIAL_INV,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS RATE,
    SALESORDER.DESCRIPTION AS SALES_DESC,
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENTLINE.PRICE,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS NM_BRAND,
    PAYMENTMETHOD.CODE AS TERMS_CODE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERMS_DESC1,
    PAYMENTMETHODIE.NOOFDAYS AS TERMS_DESC2,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER,
    SALESDOCUMENTLINE.EXTERNALREFERENCE
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PAYMENTMETHODIE.CODE = PLANTINVOICE.TERMSOFPAYMENTCODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERIE.CUSTOMERSUPPLIERCODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    ORDERPARTNERIE.CUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            INDTAXTOTAL INDTAXTOTAL
        WHERE
            INDTAXTOTAL.ITAXCODE = 'VT1'
    )INDTAXTOTAL ON
    INDTAXTOTAL.ABSUNIQUEID = PLANTINVOICE.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEWINV_BY_SURATJALAN source

CREATE VIEW ITXVIEWINV_BY_SURATJALAN AS
SELECT
    PLANTINVOICE.CODE AS NO_INVOICE,
    PLANTINVOICE.INVOICEDATE AS INVOICE_DATE,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS RATE,
    PLANTINVOICE.AGENT1AMOUNT,
    PLANTINVOICE.INVOICETYPECODE,
    PLANTINVOICE.ABSUNIQUEID,
    PLANTINVOICE.CONTRACTNOCODE,
    SALESORDER.DESCRIPTION AS SALES_DESC,
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    PAYMENTMETHOD.CODE AS TERMS_CODE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERMS_DESC1,
    PAYMENTMETHODIE.NOOFDAYS AS TERMS_DESC2,
    ORDERPARTNER.CUSTOMERSUPPLIERCODE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.CODE AS CODE_ALLOCATION,
    ALLOCATION.USERPRIMARYQUANTITY,
    ALLOCATION.USERSECONDARYQUANTITY,
    ALLOCATION.ALLOCATIONDATE
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PAYMENTMETHODIE.CODE = PLANTINVOICE.TERMSOFPAYMENTCODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    ORDERPARTNERIE.CUSTOMERSUPPLIERCODE = SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND ALLOCATION.PROJECTCODE = SALESDOCUMENTLINE.PROJECTCODE
    AND ALLOCATION.ORDERCODE = SALESDOCUMENTLINE.PREVIOUSCODE;


-- DB2ADMIN.ITXVIEWINV_DIRECTDOCUMENT source

CREATE VIEW ITXVIEWINV_DIRECTDOCUMENT AS
SELECT
    DIRECTINVOICE.CODE AS DIRECTINV_CODE,
    DIRECTINVOICE.INVOICENO,
    DIRECTINVOICE.INVOICEDATE,
    ORDERPARTNER.CUSTOMERSUPPLIERCODE,
    SALESORDERLINE.PROJECTCODE AS NO_ORDER,
    SALESORDERLINE.EXTERNALREFERENCE,
    DIRECTINVOICEDETAIL.QUANTITY,
    DIRECTINVOICEDETAIL.UOMCODE,
    DIRECTINVOICEDETAIL.PRICE,
    DIRECTINVOICEDETAIL.TAXTEMPLATECODE,
    DIRECTINVOICEDETAIL.BASICVALUE,
    DIRECTINVOICEDETAIL.NETVALUE,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS NM_BRAND,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1,
    BUSINESSPARTNER.ADDRESSLINE2,
    BUSINESSPARTNER.ADDRESSLINE3,
    BUSINESSPARTNER.ADDRESSLINE4,
    BUSINESSPARTNER.TOWN,
    BUSINESSPARTNER.DISTRICT,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER AS NPWP,
    DIRECTINVOICE.ABSUNIQUEID
FROM
    DIRECTINVOICE DIRECTINVOICE
LEFT JOIN DIRECTINVOICEDETAIL DIRECTINVOICEDETAIL ON
    DIRECTINVOICE.CODE = DIRECTINVOICEDETAIL.DIRECTINVOICECODE
LEFT JOIN SALESORDER SALESORDER ON
    DIRECTINVOICE.PROJECTCODE = SALESORDER.CODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDER.CODE = SALESORDERLINE.PROJECTCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    DIRECTINVOICE.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID;


-- DB2ADMIN.ITXVIEWINV_OUTSTANDING source

CREATE VIEW ITXVIEWINV_OUTSTANDING AS
SELECT
    PLANTINVOICE.CODE AS NO_INVOICE,
    PLANTINVOICE.INVOICEDATE AS TGL_INVOICE,
    PLANTINVOICE.CONTRACTNOCODE AS BON_ORDER,
    PLANTINVOICE.BLNUMBER,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS RATE,
    PLANTINVOICE.BASICVALUE,
    PLANTINVOICE.ABSUNIQUEID,
    PLANTINVOICE.CONTRACTNOCODE,
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENTLINE.PRICE,
    PAYMENTMETHOD.CODE AS TERMS_CODE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERMS_DESC1,
    PAYMENTMETHODIE.NOOFDAYS AS TERMS_DESC2,
    ORDERPARTNER.CUSTOMERSUPPLIERCODE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    INDTAXTOTAL.CALCULATEDVALUE AS VAT
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PAYMENTMETHODIE.CODE = PLANTINVOICE.TERMSOFPAYMENTCODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    ORDERPARTNERIE.CUSTOMERSUPPLIERCODE = SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            INDTAXTOTAL INDTAXTOTAL
        WHERE
            INDTAXTOTAL.ITAXCODE = 'VT1'
    )INDTAXTOTAL ON
    INDTAXTOTAL.ABSUNIQUEID = PLANTINVOICE.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEWINV_WEEK_RATE source

CREATE VIEW ITXVIEWINV_WEEK_RATE AS
SELECT
    INITIALDATE,
    WEEK(INITIALDATE) AS Minggu,
    WEEKLYEXCHANGERATE
FROM
    ITTWEEKLYEXCHANGERATE;


-- DB2ADMIN.ITXVIEWJENISBENANGBONORDERMAINPRO source

CREATE VIEW ITXVIEWJENISBENANGBONORDERMAINPRO AS 
SELECT
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT
FROM
    ITXVIEWPROJECTBONORDER i
LEFT JOIN ITXVIEWJENISBENANGRMP i1 ON
    i1.ORIGDLVSALORDLINESALORDERCODE = i.ORIGDLVSALORDLINESALORDERCODE
    AND i1.ORIGDLVSALORDERLINEORDERLINE = i.ORIGDLVSALORDERLINEORDERLINE
    AND i1.SUBCODE01 = i.SUBCODE01
    AND i1.SUBCODE02 = i.SUBCODE02
    AND i1.SUBCODE03 = i.SUBCODE03
GROUP BY
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT;


-- DB2ADMIN.ITXVIEWJENISBENANGBONORDERPROADDS1 source

CREATE VIEW ITXVIEWJENISBENANGBONORDERPROADDS1 AS 
SELECT
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT
FROM
    ITXVIEWPROJECTBONORDER i
LEFT JOIN ITXVIEWJENISBENANGRMP i1 ON
    i1.ORIGDLVSALORDLINESALORDERCODE = i.PRO1
GROUP BY
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT;


-- DB2ADMIN.ITXVIEWJENISBENANGBONORDERPROADDS2 source

CREATE VIEW ITXVIEWJENISBENANGBONORDERPROADDS2 AS 
SELECT
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO2,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT
FROM
    ITXVIEWPROJECTBONORDER i
LEFT JOIN ITXVIEWJENISBENANGRMP i1 ON
    i1.ORIGDLVSALORDLINESALORDERCODE = i.PRO2
GROUP BY
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.ORIGDLVSALORDERLINEORDERLINE,
    i.PRO2,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT;


-- DB2ADMIN.ITXVIEWJENISBENANGKNT source

CREATE VIEW ITXVIEWJENISBENANGKNT AS
SELECT
    PRODUCTIONRESERVATION.ORDERCODE,
    LISTAGG(
        PRODUCTIONRESERVATION.RESERVATIONLINE,
        ','
    ) AS RESERVATIONLINE,
    LISTAGG(
        CONCAT(CONCAT(PRODUCTIONRESERVATION.RESERVATIONLINE, ':'), TRIM(FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION)),
        ','
    ) AS SUMMARIZEDDESCRIPTION
FROM
    PRODUCTIONRESERVATION PRODUCTIONRESERVATION
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONRESERVATION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
GROUP BY
    PRODUCTIONRESERVATION.ORDERCODE;


-- DB2ADMIN.ITXVIEWJENISBENANGRMP source

CREATE VIEW ITXVIEWJENISBENANGRMP AS
SELECT
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.CODE,
    A.CODE AS DEMAND_KFF,
    A.ABSUNIQUEID,
    B.PROJECT_ADDS,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    LISTAGG(
        PRODUCTIONRESERVATION.FULLITEMIDENTIFIER,
        ','
    ) WITHIN GROUP (
    ORDER BY
        PRODUCTIONRESERVATION.FULLITEMIDENTIFIER ASC
    ) AS FULLITEMIDENTIFIER,
    LISTAGG(
        PRODUCTIONRESERVATION.RESERVATIONLINE,
        ','
    ) WITHIN GROUP (
    ORDER BY
        PRODUCTIONRESERVATION.RESERVATIONLINE ASC
    ) AS RESERVATIONLINE,
    LISTAGG(
        CONCAT(CONCAT(PRODUCTIONRESERVATION.RESERVATIONLINE, ':'), TRIM(CAST(FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION AS VARCHAR(10000)))),
        ','
    ) WITHIN GROUP (
    ORDER BY
        PRODUCTIONRESERVATION.RESERVATIONLINE ASC
    ) AS SUMMARIZEDDESCRIPTION,
    LISTAGG(
        CONCAT(CONCAT(PRODUCTIONRESERVATION.RESERVATIONLINE, ':'), TRIM(CAST(PRODUCTIONRESERVATIONCOMMENT.COMMENTTEXT AS VARCHAR(10000)))),
        ','
    ) WITHIN GROUP (
    ORDER BY
        PRODUCTIONRESERVATION.RESERVATIONLINE ASC
    ) AS COMMENTTEXT
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONRESERVATION.COMPANYCODE
    AND PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONRESERVATION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT JOIN PRODUCTIONRESERVATIONCOMMENT PRODUCTIONRESERVATIONCOMMENT ON
    PRODUCTIONRESERVATION.ORDERCODE = PRODUCTIONRESERVATIONCOMMENT.PRODUCTIONRESERVATIONORDERCODE
    AND PRODUCTIONRESERVATION.RESERVATIONLINE = PRODUCTIONRESERVATIONCOMMENT.PRORESERVATIONRESERVATIONLINE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ITEMTYPEAFICODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            PRODUCTIONDEMAND.ABSUNIQUEID
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
    ) A ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = A.ORIGDLVSALORDLINESALORDERCODE
    AND PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = A.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS PROJECT_ADDS
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllow'
    ) B ON
    A.ABSUNIQUEID = B.UNIQUEID
WHERE
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'GYR'
    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'DYR'
GROUP BY
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.CODE,
    A.CODE,
    A.ABSUNIQUEID,
    B.PROJECT_ADDS,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE;


-- DB2ADMIN.ITXVIEWJENISKAIN_HSCODE source

CREATE VIEW ITXVIEWJENISKAIN_HSCODE AS 
SELECT
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08,
    PRODUCT.SUBCODE09,
    PRODUCT.SUBCODE10,
    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
    ITXVIEWORDERPARTNERLINKACTIVE.ORDPRNCUSTOMERSUPPLIERCODE,
    ITXVIEWORDERPARTNERLINKACTIVE.EXTERNALREFERENCE,
    ITXVIEWORDERPARTNERLINKACTIVE.EXTERNALITEMCODE
FROM
    PRODUCT PRODUCT
LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE ITXVIEWORDERPARTNERLINKACTIVE
ON
    PRODUCT.ITEMTYPECODE = ITXVIEWORDERPARTNERLINKACTIVE.ITEMTYPEAFICODE
    AND 
PRODUCT.SUBCODE01 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE01
    AND 
PRODUCT.SUBCODE02 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE02
    AND 
PRODUCT.SUBCODE03 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE03
    AND 
PRODUCT.SUBCODE04 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE04
    AND 
PRODUCT.SUBCODE05 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE05
    AND 
PRODUCT.SUBCODE06 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE06
    AND 
PRODUCT.SUBCODE07 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE07
    AND 
PRODUCT.SUBCODE08 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE08
    AND 
PRODUCT.SUBCODE09 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE09
    AND 
PRODUCT.SUBCODE10 = ITXVIEWORDERPARTNERLINKACTIVE.SUBCODE10
WHERE
    PRODUCT.ITEMTYPECODE = 'KFF';


-- DB2ADMIN.ITXVIEWJMLROLLAPKIRIMKNT source

CREATE VIEW ITXVIEWJMLROLLAPKIRIMKNT AS
SELECT
    COUNT(*) AS JML_ROLL,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.ORDERCOUNTERCODE,
    STOCKTRANSACTION.ORDERCODE
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M502'
GROUP BY
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.ORDERCOUNTERCODE,
    STOCKTRANSACTION.ORDERCODE;


-- DB2ADMIN.ITXVIEWKAINAKJBONORDER source

CREATE VIEW ITXVIEWKAINAKJBONORDER AS    
SELECT
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    ADSTORAGE.VALUESTRING
FROM
    SALESORDERLINE SALESORDERLINE
LEFT JOIN ADSTORAGE ADSTORAGE ON
    SALESORDERLINE.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    TRIM(ADSTORAGE.NAMENAME) = 'KainAKJ';


-- DB2ADMIN.ITXVIEWKGBRUTOBONORDER source

CREATE VIEW ITXVIEWKGBRUTOBONORDER AS
SELECT
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE AS ITEMTYPE_DEMAND,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE AS ITEMTYPE_RESERVATION,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    PRODUCTIONRESERVATION.USERPRIMARYQUANTITY
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT OUTER JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
WHERE
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
    AND PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
    --    AND PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300726' 
    --    AND PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = '60';


-- DB2ADMIN.ITXVIEWKGBRUTOBONORDER2 source

CREATE VIEW ITXVIEWKGBRUTOBONORDER2 AS 
SELECT
    ORIGDLVSALORDLINESALORDERCODE,
    ORIGDLVSALORDERLINEORDERLINE,
    CODE,
    ITEMTYPE_DEMAND,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    ITEMTYPE_RESERV,
    USERPRIMARYUOMCODE,
    CASE
        WHEN ITEMTYPE_DEMAND = 'FKF' THEN 0
        ELSE USERPRIMARYQUANTITY
    END AS USERPRIMARYQUANTITY,
    KGperPCS,
    CASE
        WHEN KGperPCS IS NULL
        OR ITEMTYPE_DEMAND = 'KFF' THEN 0
        WHEN KGperPCS IS NOT NULL THEN round(qty_pcs_fkf * KGperPCS, 2)
    END AS USERSECONDARYQUANTITY,
    VALUESTRING,
    LINESTATUS,
    DevKNKDelivery
FROM
    (
        SELECT
            DISTINCT 
PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            PRODUCTIONDEMAND.CODE,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG' THEN 'FKF'
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF' THEN 'KFF'
            END AS ITEMTYPE_DEMAND,
            PRODUCTIONDEMAND.SUBCODE01,
            PRODUCTIONDEMAND.SUBCODE02,
            PRODUCTIONDEMAND.SUBCODE03,
            PRODUCTIONDEMAND.SUBCODE04,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF' THEN PRODUCTIONRESERVATION.ITEMTYPEAFICODE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG' THEN PRODUCTIONRESERVATION2.RELATEDCMPBILLOFMATITEMTYPECOD
            END AS ITEMTYPE_RESERV,
            PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF' THEN PRODUCTIONRESERVATION.USERPRIMARYQUANTITY
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG' THEN s.USERPRIMARYQUANTITY
                ELSE 0
            END AS USERPRIMARYQUANTITY ,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG' THEN s.USERSECONDARYQUANTITY
                ELSE 0
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1
                AND s.USERSECONDARYQUANTITY <= 25 THEN s.USERSECONDARYQUANTITY + 6
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 26
                AND s.USERSECONDARYQUANTITY <= 200 THEN s.USERSECONDARYQUANTITY + 7
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 201
                AND s.USERSECONDARYQUANTITY <= 400 THEN s.USERSECONDARYQUANTITY + 8
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 401
                AND s.USERSECONDARYQUANTITY <= 500 THEN s.USERSECONDARYQUANTITY + 10
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 501
                AND s.USERSECONDARYQUANTITY <= 600 THEN s.USERSECONDARYQUANTITY + 11
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 601
                AND s.USERSECONDARYQUANTITY <= 700 THEN s.USERSECONDARYQUANTITY + 13
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 701
                AND s.USERSECONDARYQUANTITY <= 800 THEN s.USERSECONDARYQUANTITY + 15
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 801
                AND s.USERSECONDARYQUANTITY <= 900 THEN s.USERSECONDARYQUANTITY + 17
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 901
                AND s.USERSECONDARYQUANTITY <= 1000 THEN s.USERSECONDARYQUANTITY + 19
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1001
                AND s.USERSECONDARYQUANTITY <= 1100 THEN s.USERSECONDARYQUANTITY + 21
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1101
                AND s.USERSECONDARYQUANTITY <= 1200 THEN s.USERSECONDARYQUANTITY + 23
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1201
                AND s.USERSECONDARYQUANTITY <= 1300 THEN s.USERSECONDARYQUANTITY + 25
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1301
                AND s.USERSECONDARYQUANTITY <= 1400 THEN s.USERSECONDARYQUANTITY + 27
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1401
                AND s.USERSECONDARYQUANTITY <= 1500 THEN s.USERSECONDARYQUANTITY + 29
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 1501
                AND s.USERSECONDARYQUANTITY <= 2000 THEN s.USERSECONDARYQUANTITY + 30
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 IN(
                    'FKY', 'FJQ'
                )
                AND s.USERSECONDARYQUANTITY >= 2001 THEN s.USERSECONDARYQUANTITY + (
                    s.USERSECONDARYQUANTITY * 0.015
                )
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1
                AND s.USERSECONDARYQUANTITY <= 50 THEN s.USERSECONDARYQUANTITY + 8
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 51
                AND s.USERSECONDARYQUANTITY <= 200 THEN s.USERSECONDARYQUANTITY + 10
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 201
                AND s.USERSECONDARYQUANTITY <= 400 THEN s.USERSECONDARYQUANTITY + 13
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 401
                AND s.USERSECONDARYQUANTITY <= 500 THEN s.USERSECONDARYQUANTITY + 15
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 501
                AND s.USERSECONDARYQUANTITY <= 600 THEN s.USERSECONDARYQUANTITY + 18
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 601
                AND s.USERSECONDARYQUANTITY <= 700 THEN s.USERSECONDARYQUANTITY + 20
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 701
                AND s.USERSECONDARYQUANTITY <= 800 THEN s.USERSECONDARYQUANTITY + 22
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 801
                AND s.USERSECONDARYQUANTITY <= 900 THEN s.USERSECONDARYQUANTITY + 25
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 901
                AND s.USERSECONDARYQUANTITY <= 1000 THEN s.USERSECONDARYQUANTITY + 28
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1001
                AND s.USERSECONDARYQUANTITY <= 1100 THEN s.USERSECONDARYQUANTITY + 30
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1101
                AND s.USERSECONDARYQUANTITY <= 1500 THEN s.USERSECONDARYQUANTITY + 33
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1501
                AND s.USERSECONDARYQUANTITY <= 2000 THEN s.USERSECONDARYQUANTITY + 35
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 2001 THEN s.USERSECONDARYQUANTITY + FLOOR(s.USERSECONDARYQUANTITY * 0.02)
                ELSE 0
            END AS qty_pcs_fkf,
            a.VALUESTRING,
            s.LINESTATUS,
            CASE
                WHEN a2.VALUEDECIMAL IS NULL THEN 0
                ELSE a2.VALUEDECIMAL
            END AS KGperPCS,
            a4.VALUEDATE AS DevKNKDelivery
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
            PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
        LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION2 ON
            PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION2.ORDERCODE
            AND PRODUCTIONRESERVATION2.RELATEDCMPBILLOFMATITEMTYPECOD = 'FKG'
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
            AND s.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
            AND s.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
            AND s.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
            AND s.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
        LEFT JOIN PRODUCT p ON
            p.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
            AND p.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
            AND p.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
            AND p.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
            AND p.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
            AND a.FIELDNAME = 'OriginalPDCode'
        LEFT JOIN ADSTORAGE a2 ON
            a2.UNIQUEID = p.ABSUNIQUEID
            AND a2.FIELDNAME = 'KGperPCS'
        LEFT JOIN ADSTORAGE a4 ON
            PRODUCTIONDEMAND.ABSUNIQUEID = a4.UNIQUEID
            AND a4.FIELDNAME = 'DevKNKDelivery'
        WHERE
            (
                PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
            )
            AND (
                PRODUCTIONRESERVATION2.RELATEDCMPBILLOFMATITEMTYPECOD = 'FKG'
                    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
            )
            AND a.VALUESTRING IS NULL
            AND s.LINESTATUS = 1
    );


-- DB2ADMIN.ITXVIEWKGBRUTOBONORDER2_FKF source

CREATE VIEW ITXVIEWKGBRUTOBONORDER2_FKF AS 
SELECT
    ORIGDLVSALORDLINESALORDERCODE,
    ORIGDLVSALORDERLINEORDERLINE,
    CODE,
    ITEMTYPE_DEMAND,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    ITEMTYPE_RESERV,
    USERPRIMARYUOMCODE,
    USERPRIMARYQUANTITY,
    CASE
        WHEN KGperPCS IS NULL
        OR ITEMTYPE_DEMAND = 'KFF' THEN 0
        WHEN KGperPCS IS NOT NULL THEN round(qty_pcs_fkf * KGperPCS, 2)
    END AS USERSECONDARYQUANTITY,
    VALUESTRING,
    LINESTATUS
FROM
    (
        SELECT
            --	DISTINCT 
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ITEMTYPEAFICODE AS ITEMTYPE_DEMAND,
            PRODUCTIONDEMAND.SUBCODE01,
            PRODUCTIONDEMAND.SUBCODE02,
            PRODUCTIONDEMAND.SUBCODE03,
            PRODUCTIONDEMAND.SUBCODE04,
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE AS ITEMTYPE_RESERV,
            PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF' THEN PRODUCTIONRESERVATION.USERPRIMARYQUANTITY
                ELSE 0
            END AS USERPRIMARYQUANTITY ,
            CASE
                WHEN PRODUCTIONDEMAND.ITEMTYPEAFICODE <> 'KFF' THEN s.USERSECONDARYQUANTITY
                ELSE 0
            END AS USERSECONDARYQUANTITY,
            a.VALUESTRING,
            s.LINESTATUS,
            CASE
                WHEN (
                    PRODUCT.ITEMTYPECODE = 'FKG'
                    OR PRODUCT.ITEMTYPECODE = 'FKF'
                ) THEN a3.VALUEDECIMAL
                ELSE 0
            END AS KGperPCS,
            CASE
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 5
                AND s.USERSECONDARYQUANTITY <= 20 THEN s.USERSECONDARYQUANTITY + 6
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 26
                AND s.USERSECONDARYQUANTITY <= 200 THEN s.USERSECONDARYQUANTITY + 7
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 201
                AND s.USERSECONDARYQUANTITY <= 400 THEN s.USERSECONDARYQUANTITY + 8
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 401
                AND s.USERSECONDARYQUANTITY <= 500 THEN s.USERSECONDARYQUANTITY + 10
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 501
                AND s.USERSECONDARYQUANTITY <= 600 THEN s.USERSECONDARYQUANTITY + 11
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 601
                AND s.USERSECONDARYQUANTITY <= 700 THEN s.USERSECONDARYQUANTITY + 13
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 701
                AND s.USERSECONDARYQUANTITY <= 800 THEN s.USERSECONDARYQUANTITY + 15
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 801
                AND s.USERSECONDARYQUANTITY <= 900 THEN s.USERSECONDARYQUANTITY + 17
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 901
                AND s.USERSECONDARYQUANTITY <= 1000 THEN s.USERSECONDARYQUANTITY + 19
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1001
                AND s.USERSECONDARYQUANTITY <= 1100 THEN s.USERSECONDARYQUANTITY + 21
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1101
                AND s.USERSECONDARYQUANTITY <= 1200 THEN s.USERSECONDARYQUANTITY + 23
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1201
                AND s.USERSECONDARYQUANTITY <= 1300 THEN s.USERSECONDARYQUANTITY + 25
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1301
                AND s.USERSECONDARYQUANTITY <= 1400 THEN s.USERSECONDARYQUANTITY + 27
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1401
                AND s.USERSECONDARYQUANTITY <= 1500 THEN s.USERSECONDARYQUANTITY + 29
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 1501
                AND s.USERSECONDARYQUANTITY <= 2000 THEN s.USERSECONDARYQUANTITY + 30
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKY'
                AND s.USERSECONDARYQUANTITY >= 2001 THEN s.USERSECONDARYQUANTITY + (
                    s.USERSECONDARYQUANTITY * 0.015
                )
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1
                AND s.USERSECONDARYQUANTITY <= 50 THEN s.USERSECONDARYQUANTITY + 8
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 51
                AND s.USERSECONDARYQUANTITY <= 200 THEN s.USERSECONDARYQUANTITY + 10
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 201
                AND s.USERSECONDARYQUANTITY <= 400 THEN s.USERSECONDARYQUANTITY + 13
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 401
                AND s.USERSECONDARYQUANTITY <= 500 THEN s.USERSECONDARYQUANTITY + 15
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 501
                AND s.USERSECONDARYQUANTITY <= 600 THEN s.USERSECONDARYQUANTITY + 18
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 601
                AND s.USERSECONDARYQUANTITY <= 700 THEN s.USERSECONDARYQUANTITY + 20
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 701
                AND s.USERSECONDARYQUANTITY <= 800 THEN s.USERSECONDARYQUANTITY + 22
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 801
                AND s.USERSECONDARYQUANTITY <= 900 THEN s.USERSECONDARYQUANTITY + 25
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 901
                AND s.USERSECONDARYQUANTITY <= 1000 THEN s.USERSECONDARYQUANTITY + 28
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1001
                AND s.USERSECONDARYQUANTITY <= 1100 THEN s.USERSECONDARYQUANTITY + 30
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1101
                AND s.USERSECONDARYQUANTITY <= 1500 THEN s.USERSECONDARYQUANTITY + 33
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 1501
                AND s.USERSECONDARYQUANTITY <= 2000 THEN s.USERSECONDARYQUANTITY + 35
                WHEN (
                    PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
                )
                AND PRODUCTIONDEMAND.SUBCODE02 = 'FKP'
                AND s.USERSECONDARYQUANTITY >= 2001 THEN s.USERSECONDARYQUANTITY + (
                    s.USERSECONDARYQUANTITY * 0.02
                )
            END AS qty_pcs_fkf
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        LEFT OUTER JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
            PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
        LEFT OUTER JOIN ADSTORAGE a ON
            a.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
            AND a.FIELDNAME = 'OriginalPDCode'
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        LEFT JOIN PRODUCT PRODUCT ON
            PRODUCTIONRESERVATION.SUBCODE01 = PRODUCT.SUBCODE01
            AND PRODUCTIONRESERVATION.SUBCODE02 = PRODUCT.SUBCODE02
            AND PRODUCTIONRESERVATION.SUBCODE03 = PRODUCT.SUBCODE03
            AND PRODUCTIONRESERVATION.SUBCODE04 = PRODUCT.SUBCODE04
            AND PRODUCTIONRESERVATION.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
        LEFT OUTER JOIN ADSTORAGE a3 ON
            PRODUCT.ABSUNIQUEID = a3.UNIQUEID
            AND a3.FIELDNAME = 'KGperPCS'
        WHERE
            (
                PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKG'
                    OR PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'FKF'
            )
            AND (
                PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
                    OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
            )
            AND a.VALUESTRING IS NULL
            AND s.LINESTATUS = 1
    )
    --WHERE ORIGDLVSALORDLINESALORDERCODE = 'EXP2300958';


-- DB2ADMIN.ITXVIEWKK source

CREATE VIEW ITXVIEWKK AS
SELECT
    DISTINCT
    PRODUCTIONDEMAND.PROGRESSSTATUS AS PROGRESSSTATUS_DEMAND,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.CODE AS DEAMAND,
    PRODUCTIONDEMAND.TEMPLATECODE,
    PRODUCTIONDEMAND.ORDERDATE,
    SALESORDERDELIVERY.DELIVERYDATE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
    dept.LONGDESCRIPTION || a10.VALUESTRING AS DESC_DEMAND,
    PRODUCTIONDEMAND.INTERNALREFERENCE AS DESC_DEMAND_KK,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE AS ITEMTYPEAFICODE_YND,
    PRODUCTIONDEMAND.ABSUNIQUEID AS ABSUNIQUEID_DEMAND,
    TRIM(SALESORDERLINE.SUBCODE01) AS DSUBCODE01,
    TRIM(SALESORDERLINE.SUBCODE02) AS DSUBCODE02,
    TRIM(SALESORDERLINE.SUBCODE03) AS DSUBCODE03,
    TRIM(SALESORDERLINE.SUBCODE04) AS DSUBCODE04,
    TRIM(SALESORDERLINE.SUBCODE05) AS DSUBCODE05,
    TRIM(SALESORDERLINE.SUBCODE06) AS DSUBCODE06,
    TRIM(SALESORDERLINE.SUBCODE07) AS DSUBCODE07,
    TRIM(SALESORDERLINE.SUBCODE08) AS DSUBCODE08,
    TRIM(SALESORDERLINE.SUBCODE09) AS DSUBCODE09,
    TRIM(SALESORDERLINE.SUBCODE10) AS DSUBCODE10,   
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMAND.DESCRIPTION AS LOT,
    PRODUCTIONDEMAND.ENTEREDUSERPRIMARYQUANTITY AS QTY_PACKING_KG,
    PRODUCTIONDEMAND.ENTEREDBASESECONDARYQUANTITY AS QTY_PACKING_YARD,
    SALESORDER.CODE AS BONORDER,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.DESCRIPTION,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.ABSUNIQUEID AS ABSUNIQUEID_SALESORDER,
    CASE
        WHEN SALESORDER.DELIVERYPOINTCODE IS NOT NULL THEN 
        	TRIM(a.ADDRESSLINE1) || ', ' || 
        	CASE
            WHEN TRIM(a.ADDRESSLINE2) IS NULL THEN '-'
            ELSE TRIM(a.ADDRESSLINE2)
        END || ', ' || 
        	CASE
            WHEN TRIM(a.ADDRESSLINE3) IS NULL THEN '-'
            ELSE TRIM(a.ADDRESSLINE3)
        END || ', ' || 
        	CASE
            WHEN TRIM(a.ADDRESSLINE4) IS NULL THEN '-'
            ELSE TRIM(a.ADDRESSLINE4)
        END
        ELSE BUSINESSPARTNER.ADDRESSLINE1
    END AS ADDRESSLINE1,
    CASE
        WHEN TRIM(o.EXTERNALITEMCODE) IS NULL THEN TRIM(PRODUCTIONDEMAND.SUBCODE02) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE03)
        ELSE TRIM(o.EXTERNALITEMCODE)
    END AS EXTERNALITEM,    
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    p.SUBCODE02 AS RESERVATION_SUBCODE02,
    p.SUBCODE03 AS RESERVATION_SUBCODE03,
    p.SUBCODE04 AS RESERVATION_SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    i.WARNA,
    i.WARNA_DASAR,
    CASE
        WHEN PRODUCT.LONGDESCRIPTION IS NULL THEN SALESORDERLINE.ITEMDESCRIPTION
        ELSE PRODUCT.LONGDESCRIPTION
    END || ' ' ||
    --    CASE
    --        WHEN TRIM(SALESORDER.INTERNALREFERENCE) IS NULL THEN 
    --	        CASE
    --	        	WHEN TRIM(SALESORDERLINE.INTERNALREFERENCE) IS NULL THEN '-'
    --	        	ELSE TRIM(SALESORDERLINE.INTERNALREFERENCE)
    --        	END
    --        ELSE TRIM(SALESORDER.INTERNALREFERENCE)
    --    END AS ITEMDESCRIPTION,
    COALESCE(SALESORDER.INTERNALREFERENCE, COALESCE(SALESORDERLINE.INTERNALREFERENCE, '')) AS ITEMDESCRIPTION,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    SALESORDERLINE.PRICEUNITOFMEASURECODE,
    SALESORDERLINE.ABSUNIQUEID AS ABSUNIQUEID_SALESORDERLINE,
    SALESORDERLINE.ORDERLINE,
    PRODUCTIONORDER.CREATIONDATETIME,
    PRODUCTIONORDER.PROGRESSSTATUS,
    'KGF' AS KGF,
    a2.VALUESTRING AS ADDITIONALDATA,
    a21.VALUEDECIMAL AS QTY,
    a3.VALUESTRING AS ADDITIONALDATA2,
    a22.VALUEDECIMAL AS QTY2,
    a4.VALUESTRING AS ADDITIONALDATA3,
    a23.VALUEDECIMAL AS QTY3,
    a5.VALUESTRING AS ADDITIONALDATA4,
    a24.VALUEDECIMAL AS QTY4,
    a6.VALUESTRING AS ADDITIONALDATA5,
    a25.VALUEDECIMAL AS QTY5,
    a26.VALUESTRING AS LEGACYORDER,
    a28.VALUEDECIMAL AS QTY6,
    a7.VALUESTRING AS OriginalPdCode,
    SALESORDER.CREATIONDATETIME AS CREATIONDATETIME_SALESORDER,
    SALESORDER.CREATIONUSER AS CREATIONUSER_SALESORDER,
    CASE
        WHEN a8.VALUESTRING IS NOT NULL THEN 'KK TAS'
        ELSE a8.VALUESTRING
    END AS KARTUKERJA,
    PRODUCTIONDEMAND.RESERVATIONORDERCODE AS DEMAND_KNT_by_YND,
    CASE
        WHEN a11.VALUESTRING = '1' THEN 'BODY'
        WHEN a11.VALUESTRING = '2' THEN 'KRAH'
    END AS UNTUK_PEMAKAIAN,
    a12.VALUESTRING AS KELIPATAN_RAJUT,
    a13.VALUEINT AS QTY_PERMINTAAN_BUYER,
    a14.VALUEDATE AS DATE_AKTUAL,
    a35.VALUEDATE AS DATE_AKTUAL_TO,
    a15.VALUEDATE AS DATE_AKTUAL2,
    a36.VALUEDATE AS DATE_AKTUAL_TO2,
    a16.VALUEDATE AS DATE_AKTUAL3,
    a37.VALUEDATE AS DATE_AKTUAL_TO3,
    a17.VALUEDATE AS DATE_AKTUAL4,
    a38.VALUEDATE AS DATE_AKTUAL_TO4,
    a18.VALUEDATE AS DATE_AKTUAL5,
    a39.VALUEDATE AS DATE_AKTUAL_TO5,
    a28.VALUEDATE AS DATE_AKTUAL6,
    a40.VALUEDATE AS DATE_AKTUAL_TO6,
    CASE
        WHEN a19.VALUESTRING = '1' THEN 'AKJ'
        WHEN a19.VALUESTRING = '2' THEN 'AKW'
        ELSE 'NON AKJ'
    END AS AKJ,
    a20.VALUESTRING AS NoteTas,
    a29.VALUESTRING AS PROD_ORDER_AKJ,
    a30.VALUESTRING AS SALESORDER_AKJ,
    a31.VALUESTRING AS PROD_ORDER_AKJ2,
    a32.VALUESTRING AS SALESORDER_AKJ2,
    a33.VALUESTRING AS PROD_ORDER_AKJ3,
    a34.VALUESTRING AS SALESORDER_AKJ3,
    a41.LONGDESCRIPTION AS AREA,
    a42.VALUESTRING AS PRODUCTIONORDER_AKW,
    a43.VALUEDECIMAL AS LOSS_RMP,
    a44.VALUESTRING AS NO_REGIS_NCP,
    a45.VALUESTRING AS COLORGROUP,
    u2.LONGDESCRIPTION AS NAME_COLORGROUP,
    PRODUCTIONDEMAND.CREATIONUSER AS CREATIONUSER_DEMAND,
    SUBSTR(PRODUCTIONDEMAND.CREATIONDATETIME, 1, 10) || ' ' || SUBSTR(PRODUCTIONDEMAND.CREATIONDATETIME, 12, 8) AS CREATIONDATETIME_DEMAND
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            DISTINCT PRODUCTIONDEMANDCODE,
            PRODUCTIONORDERCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
    ) PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
LEFT JOIN SALESORDER SALESORDER ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN ADDRESS a ON
    a.CODE = SALESORDER.DELIVERYPOINTCODE
    AND a.UNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
    SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE = PRODUCTIONDEMAND.DLVSALORDERLINESALESORDERCODE
    AND SALESORDERDELIVERY.SALESORDERLINEORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
RIGHT JOIN PRODUCTIONORDER PRODUCTIONORDER ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = PRODUCTIONORDER.CODE
LEFT JOIN PRODUCT PRODUCT ON
    PRODUCT.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND PRODUCT.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND PRODUCT.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND PRODUCT.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND PRODUCT.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND PRODUCT.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND PRODUCT.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND PRODUCT.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND PRODUCT.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND PRODUCT.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND PRODUCT.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ITXVIEWCOLOR i ON
    i.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND i.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND i.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND i.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND i.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND i.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND i.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND i.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND i.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND i.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND i.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a2.FIELDNAME = 'ProAllow'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a3.FIELDNAME = 'ProAllow2'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a4.FIELDNAME = 'ProAllow3'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a5.FIELDNAME = 'ProAllow4'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a6.FIELDNAME = 'ProAllow5'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a7.FIELDNAME = 'OriginalPDCode'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a8.FIELDNAME = 'NoTrackingDev'
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a9.FIELDNAME = 'BagianCode'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a10.FIELDNAME = 'DefectNote'
LEFT JOIN DEPARTMENT dept ON
    dept.CODE = a9.VALUESTRING
LEFT JOIN ORDERITEMORDERPARTNERLINK o ON
    o.INACTIVE = 0
    AND o.ORDPRNCUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
    AND o.ITEMTYPEAFICODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND o.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND o.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND o.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND o.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND o.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND o.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND o.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND o.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND o.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND o.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a11.FIELDNAME = 'UntukItem'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a12.FIELDNAME = 'KelipatanRajut'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a13.FIELDNAME = 'QTYPermintaanRMP'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a14.FIELDNAME = 'ProAllowDate'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a15.FIELDNAME = 'ProAllowDate2'
LEFT JOIN ADSTORAGE a16 ON
    a16.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a16.FIELDNAME = 'ProAllowDate3'
LEFT JOIN ADSTORAGE a17 ON
    a17.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a17.FIELDNAME = 'ProAllowDate4'
LEFT JOIN ADSTORAGE a18 ON
    a18.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a18.FIELDNAME = 'ProAllowDate5'
LEFT JOIN ADSTORAGE a19 ON
    a19.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a19.FIELDNAME = 'KainAKJ'
LEFT JOIN ADSTORAGE a20 ON
    a20.UNIQUEID = PRODUCT.ABSUNIQUEID
    AND a20.FIELDNAME = 'NoteTas'
LEFT JOIN ADSTORAGE a21 ON
    a21.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a21.FIELDNAME = 'ProAllowQty'
LEFT JOIN ADSTORAGE a22 ON
    a22.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a22.FIELDNAME = 'ProAllowQty2'
LEFT JOIN ADSTORAGE a23 ON
    a23.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a23.FIELDNAME = 'ProAllowQty3'
LEFT JOIN ADSTORAGE a24 ON
    a24.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a24.FIELDNAME = 'ProAllowQty4'
LEFT JOIN ADSTORAGE a25 ON
    a25.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a25.FIELDNAME = 'ProAllowQty5'
LEFT JOIN ADSTORAGE a26 ON
    a26.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a26.FIELDNAME = 'LegacyOrder'
LEFT JOIN ADSTORAGE a27 ON
    a27.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a27.FIELDNAME = 'ProAllowDate6'
LEFT JOIN ADSTORAGE a28 ON
    a28.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a28.FIELDNAME = 'ProAllowQty6'
LEFT JOIN PRODUCTIONRESERVATION p ON
    p.ORDERCODE = PRODUCTIONDEMAND.CODE
    AND (
        p.ITEMTYPEAFICODE = 'KGF'
            OR p.ITEMTYPEAFICODE = 'KFF'
    )
LEFT JOIN ADSTORAGE a29 ON
    a29.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a29.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN ADSTORAGE a30 ON
    a30.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a30.FIELDNAME = 'PrevSalesOrderCode'
LEFT JOIN ADSTORAGE a31 ON
    a31.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a31.FIELDNAME = 'PrevProdOrder2Code'
LEFT JOIN ADSTORAGE a32 ON
    a32.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a32.FIELDNAME = 'PrevSalesOrder2Code'
LEFT JOIN ADSTORAGE a33 ON
    a33.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a33.FIELDNAME = 'PrevProdOrder3Code'
LEFT JOIN ADSTORAGE a34 ON
    a34.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a34.FIELDNAME = 'PrevSalesOrder3Code'
LEFT JOIN ADSTORAGE a35 ON
    a35.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a35.FIELDNAME = 'ProAllowDateto'
LEFT JOIN ADSTORAGE a36 ON
    a36.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a36.FIELDNAME = 'ProAllowDate2to'
LEFT JOIN ADSTORAGE a37 ON
    a37.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a37.FIELDNAME = 'ProAllowDate3to'
LEFT JOIN ADSTORAGE a38 ON
    a38.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a38.FIELDNAME = 'ProAllowDate4to'
LEFT JOIN ADSTORAGE a39 ON
    a39.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a39.FIELDNAME = 'ProAllowDate5to'
LEFT JOIN ADSTORAGE a40 ON
    a40.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a40.FIELDNAME = 'ProAllowDate6to'
LEFT JOIN AREA a41 ON
    a41.CODE = SALESORDER.AREACODE
LEFT JOIN ADSTORAGE a42 ON
    a42.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a42.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN ADSTORAGE a43 ON
    a43.UNIQUEID = PRODUCT.ABSUNIQUEID
    AND a43.FIELDNAME = 'WastePercentage'
LEFT JOIN ADSTORAGE a44 ON
    a44.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a44.FIELDNAME = 'NoRegisNCP'
LEFT JOIN USERGENERICGROUP u ON
    u.CODE = i.SUBCODE05
    AND u.USERGENERICGROUPTYPECODE = 'CL1'
LEFT JOIN ADSTORAGE a45 ON
    a45.UNIQUEID = u.ABSUNIQUEID
    AND a45.FIELDNAME = 'ColorGroupCode'
LEFT JOIN USERGENERICGROUP u2 ON
    u2.CODE = a45.VALUESTRING
    AND u2.USERGENERICGROUPTYPECODE = 'CLG'
    --WHERE
    --    	PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = '00120405';
    --    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = '00191042';


-- DB2ADMIN.ITXVIEWKK2 source

CREATE VIEW ITXVIEWKK2 AS
SELECT
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMAND.CODE AS DEAMAND,
    PRODUCTIONDEMAND.TEMPLATECODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
    PRODUCTIONDEMAND.EXTERNALREFERENCE AS DESC_DEMAND,
    PRODUCTIONDEMAND.INTERNALREFERENCE AS DESC_DEMAND_KK,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE AS ITEMTYPEAFICODE_YND,
    PRODUCTIONDEMAND.ABSUNIQUEID AS ABSUNIQUEID_DEMAND,
    --    TRIM(SALESORDERLINE.SUBCODE01) AS DSUBCODE01,
    --    TRIM(SALESORDERLINE.SUBCODE02) AS DSUBCODE02,
    --    TRIM(SALESORDERLINE.SUBCODE03) AS DSUBCODE03,
    --    TRIM(SALESORDERLINE.SUBCODE04) AS DSUBCODE04,
    --    TRIM(SALESORDERLINE.SUBCODE05) AS DSUBCODE05,
    --    TRIM(SALESORDERLINE.SUBCODE06) AS DSUBCODE06,
    --    TRIM(SALESORDERLINE.SUBCODE07) AS DSUBCODE07,
    --    TRIM(SALESORDERLINE.SUBCODE08) AS DSUBCODE08,
    --    TRIM(SALESORDERLINE.SUBCODE09) AS DSUBCODE09,
    --    TRIM(SALESORDERLINE.SUBCODE10) AS DSUBCODE10,   
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    --    SALESORDER.CODE AS BONORDER,
    --    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    --    SALESORDER.DESCRIPTION,
    --    SALESORDER.REQUIREDDUEDATE,
    --    SALESORDER.ABSUNIQUEID AS ABSUNIQUEID_SALESORDER,
    --    CASE
    --        WHEN SALESORDER.DELIVERYPOINTCODE IS NOT NULL THEN TRIM(a.ADDRESSLINE1)
    --        ELSE BUSINESSPARTNER.ADDRESSLINE1
    --    END AS ADDRESSLINE1,
    --    CASE
    --        WHEN TRIM(SALESORDERLINE.EXTERNALITEM) IS NULL THEN '-'
    --        ELSE TRIM(SALESORDERLINE.EXTERNALITEM)
    --    END AS EXTERNALITEM,    
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    --    CASE
    --        WHEN PRODUCT.LONGDESCRIPTION IS NULL THEN SALESORDERLINE.ITEMDESCRIPTION
    --        ELSE PRODUCT.LONGDESCRIPTION
    --    END AS ITEMDESCRIPTION,
    --    SALESORDERLINE.USERSECONDARYUOMCODE,
    --    SALESORDERLINE.PRICEUNITOFMEASURECODE,
    --    SALESORDERLINE.ABSUNIQUEID AS ABSUNIQUEID_SALESORDERLINE,
    --    SALESORDERLINE.ORDERLINE,
    --    PRODUCTIONORDER.CREATIONDATETIME,
    --    PRODUCTIONORDER.STATUS AS PROGRESSSTATUS,
    'KGF' AS KGF
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    --LEFT JOIN SALESORDER SALESORDER ON PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDER.CODE
    --LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    --    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
    --LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    --    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    --LEFT JOIN ADDRESS a ON
    --    a.CODE = SALESORDER.DELIVERYPOINTCODE
    --    AND a.UNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
    --LEFT JOIN SALESORDERLINE SALESORDERLINE ON SALESORDERLINE.SALESORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE 
    --										AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
    --LEFT JOIN WRKCONFIRMLINE WRKCONFIRMLINE ON
    --    SALESORDERLINE.SALESORDERCOMPANYCODE = WRKCONFIRMLINE.SALORDLINESALORDERCOMPANYCODE
    --    AND SALESORDERLINE.SALESORDERCOUNTERCODE = WRKCONFIRMLINE.SALORDLINESALORDERCOUNTERCODE
    --    AND SALESORDERLINE.SALESORDERCODE = WRKCONFIRMLINE.SALESORDERLINESALESORDERCODE
    --    AND SALESORDERLINE.ORDERLINE = WRKCONFIRMLINE.SALESORDERLINEORDERLINE
    --    AND SALESORDERLINE.ORDERSUBLINE = WRKCONFIRMLINE.SALESORDERLINEORDERSUBLINE
    --    AND SALESORDERLINE.COMPONENTORDERLINE = WRKCONFIRMLINE.SALORDLINECOMPONENTORDERLINE
    --RIGHT JOIN PRODUCTIONORDER PRODUCTIONORDER ON
    --    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = PRODUCTIONORDER.CODE
    --    AND PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCOMPANYCODE = PRODUCTIONORDER.COMPANYCODE
    --LEFT JOIN PRODUCT PRODUCT ON
    --    PRODUCT.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    --    AND PRODUCT.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    --    AND PRODUCT.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    --    AND PRODUCT.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    --    AND PRODUCT.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    --    AND PRODUCT.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    --    AND PRODUCT.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    --    AND PRODUCT.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    --    AND PRODUCT.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    --    AND PRODUCT.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    --    AND PRODUCT.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
WHERE
    NOT PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE IS NULL
    AND NOT PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE IS NULL
GROUP BY
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.TEMPLATECODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMAND.EXTERNALREFERENCE,
    PRODUCTIONDEMAND.INTERNALREFERENCE,
    --    SALESORDER.CODE,
    --    SALESORDER.DELIVERYPOINTCODE,
    --    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    --    SALESORDER.DESCRIPTION,
    --    SALESORDER.REQUIREDDUEDATE,
    --    SALESORDER.ABSUNIQUEID,
    --    BUSINESSPARTNER.ADDRESSLINE1,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    --    PRODUCT.LONGDESCRIPTION,
    --    SALESORDERLINE.EXTERNALITEM,
    --    SALESORDERLINE.ITEMTYPEAFICODE,
    --    SALESORDERLINE.SUBCODE01,
    --    SALESORDERLINE.SUBCODE02,
    --    SALESORDERLINE.SUBCODE03,
    --    SALESORDERLINE.SUBCODE04,
    --    SALESORDERLINE.SUBCODE05,
    --    SALESORDERLINE.SUBCODE06,
    --    SALESORDERLINE.SUBCODE07,
    --    SALESORDERLINE.SUBCODE08,
    --    SALESORDERLINE.SUBCODE09,
    --    SALESORDERLINE.SUBCODE10,
    --    SALESORDERLINE.ITEMDESCRIPTION,
    --    SALESORDERLINE.USERSECONDARYUOMCODE,
    --    SALESORDERLINE.PRICEUNITOFMEASURECODE,
    --    SALESORDERLINE.ABSUNIQUEID,
    --    SALESORDERLINE.ORDERLINE,
    --    PRODUCT.LONGDESCRIPTION,
    --    PRODUCTIONORDER.CREATIONDATETIME,
    --    PRODUCTIONORDER.STATUS,
    --    a.ADDRESSLINE1,
    --    a.ADDRESSLINE2,
    --    a.ADDRESSLINE3,
    PRODUCTIONDEMAND.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEWKK_KNT source

CREATE VIEW ITXVIEWKK_KNT AS
SELECT
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    --SCHEDULESOFSTEPSPLITS.SCHEDULEDRESOURCECODE,
    BUSINESSPARTNER.LEGALNAME1
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT OUTER JOIN DB2ADMIN.COMPANY COMPANY ON
    PRODUCTIONDEMAND.COMPANYCODE = COMPANY.CODE
LEFT OUTER JOIN DB2ADMIN.PRODUCTIONCUSTOMIZEDOPTIONS PRODUCTIONCUSTOMIZEDOPTIONS ON
    PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONCUSTOMIZEDOPTIONS.COMPANYCODE
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONDEMAND.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND PRODUCTIONDEMAND.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
    --LEFT OUTER JOIN DB2ADMIN.SCHEDULESOFSTEPSPLITS SCHEDULESOFSTEPSPLITS ON
    --    PRODUCTIONDEMAND.CODE = SCHEDULESOFSTEPSPLITS.CODE;


-- DB2ADMIN.ITXVIEWKK_UNTUK_MEMOPENTING_PPC source

CREATE VIEW ITXVIEWKK_UNTUK_MEMOPENTING_PPC AS
SELECT
    DISTINCT
    PRODUCTIONORDER.CREATIONDATETIME AS CREATIONDATETIME_PRODORDER,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE AS ITEMTYPEAFICODE_YND,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    COALESCE(SALESORDER.INTERNALREFERENCE, COALESCE(SALESORDERLINE.INTERNALREFERENCE, '')) AS ITEMDESCRIPTION,
    SALESORDERDELIVERY.DELIVERYDATE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMAND.CODE AS DEAMAND,
    PRODUCTIONDEMAND.DESCRIPTION AS LOT,
    SALESORDER.CODE AS BONORDER,
    SALESORDERLINE.ORDERLINE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    PRODUCTIONORDER.PROGRESSSTATUS,
    PRODUCTIONDEMAND.ABSUNIQUEID AS ABSUNIQUEID_DEMAND,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.CREATIONDATETIME AS CREATIONDATETIME_SALESORDER,
    PRODUCTIONDEMAND.PROGRESSSTATUS AS PROGRESSSTATUS_DEMAND,
    i.WARNA,
    CASE
        WHEN TRIM(o.EXTERNALITEMCODE) IS NULL THEN TRIM(PRODUCTIONDEMAND.SUBCODE02) || '-' || TRIM(PRODUCTIONDEMAND.SUBCODE03)
        ELSE TRIM(o.EXTERNALITEMCODE)
    END AS EXTERNALITEM,
    'KGF' AS KGF
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            DISTINCT PRODUCTIONDEMANDCODE,
            PRODUCTIONORDERCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
    ) PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
LEFT JOIN SALESORDER SALESORDER ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN ADDRESS a ON
    a.CODE = SALESORDER.DELIVERYPOINTCODE
    AND a.UNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
    SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE = PRODUCTIONDEMAND.DLVSALORDERLINESALESORDERCODE
    AND SALESORDERDELIVERY.SALESORDERLINEORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
RIGHT JOIN PRODUCTIONORDER PRODUCTIONORDER ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = PRODUCTIONORDER.CODE
LEFT JOIN PRODUCT PRODUCT ON
    PRODUCT.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND PRODUCT.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND PRODUCT.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND PRODUCT.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND PRODUCT.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND PRODUCT.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND PRODUCT.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND PRODUCT.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND PRODUCT.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND PRODUCT.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND PRODUCT.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ITXVIEWCOLOR i ON
    i.ITEMTYPECODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND i.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND i.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND i.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND i.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND i.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND i.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND i.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND i.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND i.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND i.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a2.FIELDNAME = 'ProAllow'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a3.FIELDNAME = 'ProAllow2'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a4.FIELDNAME = 'ProAllow3'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a5.FIELDNAME = 'ProAllow4'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a6.FIELDNAME = 'ProAllow5'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a7.FIELDNAME = 'OriginalPDCode'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a8.FIELDNAME = 'NoTrackingDev'
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a9.FIELDNAME = 'BagianCode'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a10.FIELDNAME = 'DefectNote'
LEFT JOIN DEPARTMENT dept ON
    dept.CODE = a9.VALUESTRING
LEFT JOIN ORDERITEMORDERPARTNERLINK o ON
    o.INACTIVE = 0
    AND o.ORDPRNCUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
    AND o.ITEMTYPEAFICODE = PRODUCTIONDEMAND.ITEMTYPEAFICODE
    AND o.SUBCODE01 = PRODUCTIONDEMAND.SUBCODE01
    AND o.SUBCODE02 = PRODUCTIONDEMAND.SUBCODE02
    AND o.SUBCODE03 = PRODUCTIONDEMAND.SUBCODE03
    AND o.SUBCODE04 = PRODUCTIONDEMAND.SUBCODE04
    AND o.SUBCODE05 = PRODUCTIONDEMAND.SUBCODE05
    AND o.SUBCODE06 = PRODUCTIONDEMAND.SUBCODE06
    AND o.SUBCODE07 = PRODUCTIONDEMAND.SUBCODE07
    AND o.SUBCODE08 = PRODUCTIONDEMAND.SUBCODE08
    AND o.SUBCODE09 = PRODUCTIONDEMAND.SUBCODE09
    AND o.SUBCODE10 = PRODUCTIONDEMAND.SUBCODE10
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a11.FIELDNAME = 'UntukItem'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a12.FIELDNAME = 'KelipatanRajut'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a13.FIELDNAME = 'QTYPermintaanRMP'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a14.FIELDNAME = 'ProAllowDate'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a15.FIELDNAME = 'ProAllowDate2'
LEFT JOIN ADSTORAGE a16 ON
    a16.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a16.FIELDNAME = 'ProAllowDate3'
LEFT JOIN ADSTORAGE a17 ON
    a17.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a17.FIELDNAME = 'ProAllowDate4'
LEFT JOIN ADSTORAGE a18 ON
    a18.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a18.FIELDNAME = 'ProAllowDate5'
LEFT JOIN ADSTORAGE a19 ON
    a19.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a19.FIELDNAME = 'KainAKJ'
LEFT JOIN ADSTORAGE a20 ON
    a20.UNIQUEID = PRODUCT.ABSUNIQUEID
    AND a20.FIELDNAME = 'NoteTas'
LEFT JOIN ADSTORAGE a21 ON
    a21.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a21.FIELDNAME = 'ProAllowQty'
LEFT JOIN ADSTORAGE a22 ON
    a22.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a22.FIELDNAME = 'ProAllowQty2'
LEFT JOIN ADSTORAGE a23 ON
    a23.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a23.FIELDNAME = 'ProAllowQty3'
LEFT JOIN ADSTORAGE a24 ON
    a24.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a24.FIELDNAME = 'ProAllowQty4'
LEFT JOIN ADSTORAGE a25 ON
    a25.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a25.FIELDNAME = 'ProAllowQty5'
LEFT JOIN ADSTORAGE a26 ON
    a26.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a26.FIELDNAME = 'LegacyOrder'
LEFT JOIN ADSTORAGE a27 ON
    a27.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a27.FIELDNAME = 'ProAllowDate6'
LEFT JOIN ADSTORAGE a28 ON
    a28.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a28.FIELDNAME = 'ProAllowQty6'
LEFT JOIN PRODUCTIONRESERVATION p ON
    p.ORDERCODE = PRODUCTIONDEMAND.CODE
    AND (
        p.ITEMTYPEAFICODE = 'KGF'
            OR p.ITEMTYPEAFICODE = 'KFF'
    )
LEFT JOIN ADSTORAGE a29 ON
    a29.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a29.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN ADSTORAGE a30 ON
    a30.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a30.FIELDNAME = 'PrevSalesOrderCode'
LEFT JOIN ADSTORAGE a31 ON
    a31.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a31.FIELDNAME = 'PrevProdOrder2Code'
LEFT JOIN ADSTORAGE a32 ON
    a32.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a32.FIELDNAME = 'PrevSalesOrder2Code'
LEFT JOIN ADSTORAGE a33 ON
    a33.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a33.FIELDNAME = 'PrevProdOrder3Code'
LEFT JOIN ADSTORAGE a34 ON
    a34.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a34.FIELDNAME = 'PrevSalesOrder3Code'
LEFT JOIN ADSTORAGE a35 ON
    a35.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a35.FIELDNAME = 'ProAllowDateto'
LEFT JOIN ADSTORAGE a36 ON
    a36.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a36.FIELDNAME = 'ProAllowDate2to'
LEFT JOIN ADSTORAGE a37 ON
    a37.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a37.FIELDNAME = 'ProAllowDate3to'
LEFT JOIN ADSTORAGE a38 ON
    a38.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a38.FIELDNAME = 'ProAllowDate4to'
LEFT JOIN ADSTORAGE a39 ON
    a39.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a39.FIELDNAME = 'ProAllowDate5to'
LEFT JOIN ADSTORAGE a40 ON
    a40.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a40.FIELDNAME = 'ProAllowDate6to'
LEFT JOIN AREA a41 ON
    a41.CODE = SALESORDER.AREACODE
LEFT JOIN ADSTORAGE a42 ON
    a42.UNIQUEID = SALESORDERLINE.ABSUNIQUEID
    AND a42.FIELDNAME = 'PrevProdOrderCode'
LEFT JOIN ADSTORAGE a43 ON
    a43.UNIQUEID = PRODUCT.ABSUNIQUEID
    AND a43.FIELDNAME = 'WastePercentage'
LEFT JOIN ADSTORAGE a44 ON
    a44.UNIQUEID = PRODUCTIONDEMAND.ABSUNIQUEID
    AND a44.FIELDNAME = 'NoRegisNCP'
LEFT JOIN USERGENERICGROUP u ON
    u.CODE = i.SUBCODE05
    AND u.USERGENERICGROUPTYPECODE = 'CL1'
LEFT JOIN ADSTORAGE a45 ON
    a45.UNIQUEID = u.ABSUNIQUEID
    AND a45.FIELDNAME = 'ColorGroupCode'
LEFT JOIN USERGENERICGROUP u2 ON
    u2.CODE = a45.VALUESTRING
    AND u2.USERGENERICGROUPTYPECODE = 'CLG'
    --WHERE
    --	SALESORDERDELIVERY.DELIVERYDATE BETWEEN '2024-01-01' AND '2024-01-18'
    --    	PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = '00118771';
    --    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = '00191042';


-- DB2ADMIN.ITXVIEWKNTORDER source

CREATE VIEW ITXVIEWKNTORDER AS
SELECT
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.FINALEFFECTIVEDATE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE, 
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONORDER.PROGRESSSTATUS
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT OUTER JOIN DB2ADMIN.COMPANY COMPANY ON
    PRODUCTIONDEMAND.COMPANYCODE = COMPANY.CODE
LEFT OUTER JOIN DB2ADMIN.PRODUCTIONCUSTOMIZEDOPTIONS PRODUCTIONCUSTOMIZEDOPTIONS ON
    PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONCUSTOMIZEDOPTIONS.COMPANYCODE
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONDEMAND.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND PRODUCTIONDEMAND.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN DB2ADMIN.PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    AND PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCOMPANYCODE
LEFT JOIN DB2ADMIN.PRODUCTIONORDER PRODUCTIONORDER ON
    PRODUCTIONORDER.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE
GROUP BY
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.FINALEFFECTIVEDATE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONORDER.PROGRESSSTATUS;


-- DB2ADMIN.ITXVIEWKONDISIMESIN source

CREATE VIEW ITXVIEWKONDISIMESIN AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'KondisiMesin';


-- DB2ADMIN.ITXVIEWLABCOLORQLT source

CREATE VIEW ITXVIEWLABCOLORQLT AS
SELECT
    QUALITYDOCUMENT.LOTCODE,
    QUALITYDOCUMENT.NOTEINTERNE,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERCODE,
    QUALITYDOCLINE.QUALITYDOCUMENTITEMTYPEAFICODE,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE02,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE03,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE04,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE05,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE06,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE07,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE08,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE09,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE10,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.CREATIONUSER,
    LISTAGG(
        TRIM(CAST(QUALITYDOCLINE.CHARACTERISTICCODE AS VARCHAR(20000))),
        ','
    ) AS CHARACTERISTICCODE,
    LISTAGG(
        CONCAT(CONCAT(TRIM(QUALITYDOCLINE.CHARACTERISTICCODE), ':'), QUALITYDOCLINE.VALUEQUANTITY),
        ','
    ) AS VALUEQUANTITY,
    LISTAGG(
        CONCAT(CONCAT(TRIM(QUALITYDOCLINE.CHARACTERISTICCODE), ':'), QUALITYDOCLINE.ANNOTATION),
        ','
    ) AS ANNOTATION
FROM
    QUALITYDOCUMENT QUALITYDOCUMENT
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE ON
    QUALITYDOCUMENT.HEADERLINE = QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE
WHERE
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERCODE = 'LABDIP'
GROUP BY
    QUALITYDOCUMENT.LOTCODE,
    QUALITYDOCUMENT.NOTEINTERNE,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERCODE,
    QUALITYDOCLINE.QUALITYDOCUMENTITEMTYPEAFICODE,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE02,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE03,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE04,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE05,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE06,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE07,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE08,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE09,
    QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE10,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.CREATIONUSER;


-- DB2ADMIN.ITXVIEWLABCOLORQLT_DETAIL source

CREATE VIEW ITXVIEWLABCOLORQLT_DETAIL AS
SELECT
    DISTINCT 
	QUALITYDOCUMENT.LOTCODE,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE_LABCOLOUR.ANNOTATION AS LABCOLOUR,
    QUALITYDOCLINE_LABCLRNUM.ANNOTATION AS LABCLRNUM,
    QUALITYDOCLINE_LABCAT.ANNOTATION AS LABCAT,
    QUALITYDOCLINE_LABBLEED.ANNOTATION AS LABBLEED,
    QUALITYDOCLINE_LABDYEMIG.ANNOTATION AS LABDYEMIG,
    QUALITYDOCLINE_LABPHEN.ANNOTATION AS LABPHEN,
    QUALITYDOCLINE_LABTRANS.ANNOTATION AS LABTRANS,
    QUALITYDOCLINE_LABPLIGHT.ANNOTATION AS LABPLIGHT,
    QUALITYDOCLINE_LABCHLOR.ANNOTATION AS LABCHLOR,
    QUALITYDOCLINE_LABCOLOUR_QTY.VALUEQUANTITY AS LABCOLOUR_QTY,
    QUALITYDOCLINE_LABCLRNUM_QTY.VALUEQUANTITY AS LABCLRNUM_QTY,
    QUALITYDOCLINE_LABCAT_QTY.VALUEQUANTITY AS LABCAT_QTY,
    QUALITYDOCLINE_LABDIPCLRF_QTY.VALUEQUANTITY AS LABDIPCLRF_QTY,
    QUALITYDOCLINE_LABDIPCLRW_QTY.VALUEQUANTITY AS LABDIPCLRW_QTY,
    QUALITYDOCLINE_LABDIPCLRP_QTY.VALUEQUANTITY AS LABDIPCLRP_QTY,
    QUALITYDOCLINE_LABCLRSWH_QTY.VALUEQUANTITY AS LABCLRSWH_QTY,
    QUALITYDOCLINE_LABCLRSWR_QTY.VALUEQUANTITY AS LABCLRSWR_QTY,
    QUALITYDOCLINE_LABCLRPR_QTY.VALUEQUANTITY AS LABCLRPR_QTY,
    QUALITYDOCLINE_LABCLRSWHN_QTY.VALUEQUANTITY AS LABCLRSWHN_QTY,
    QUALITYDOCLINE_LABCLRSWRN_QTY.VALUEQUANTITY AS LABCLRSWRN_QTY,
    QUALITYDOCLINE_LABCLRPRN_QTY.VALUEQUANTITY AS LABCLRPRN_QTY,
    QUALITYDOCLINE_LABCLRSWHP_QTY.VALUEQUANTITY AS LABCLRSWHP_QTY,
    QUALITYDOCLINE_LABCLRSWRP_QTY.VALUEQUANTITY AS LABCLRSWRP_QTY,
    QUALITYDOCLINE_LABCLRPRP_QTY.VALUEQUANTITY AS LABCLRPRP_QTY,
    QUALITYDOCLINE_LABCRKDRY_QTY.VALUEQUANTITY AS LABCRKDRY_QTY,
    QUALITYDOCLINE_LABCRKWET_QTY.VALUEQUANTITY AS LABCRKWET_QTY,
    QUALITYDOCLINE_LABLIGHT_QTY.ANNOTATION AS LABLIGHT_QTY,
    QUALITYDOCLINE_LABBLEED_QTY.ANNOTATION AS LABBLEED_QTY,
    QUALITYDOCLINE_LABDYEMIG_QTY.ANNOTATION AS LABDYEMIG_QTY,
    QUALITYDOCLINE_LABPHEN_QTY.ANNOTATION AS LABPHEN_QTY,
    QUALITYDOCLINE_LABTRANS_QTY.ANNOTATION AS LABTRANS_QTY,
    QUALITYDOCLINE_LABPLIGHT_QTY.ANNOTATION AS LABPLIGHT_QTY,
    QUALITYDOCLINE_LABCHLOR_QTY.ANNOTATION AS LABCHLOR_QTY
FROM
    QUALITYDOCUMENT QUALITYDOCUMENT
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE ON
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCOLOUR ON
    QUALITYDOCLINE_LABCOLOUR.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCOLOUR.CHARACTERISTICCODE = 'LABCOLOUR'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRNUM ON
    QUALITYDOCLINE_LABCLRNUM.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRNUM.CHARACTERISTICCODE = 'LABCLRNUM'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCAT ON
    QUALITYDOCLINE_LABCAT.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCAT.CHARACTERISTICCODE = 'LABCAT'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABBLEED ON
    QUALITYDOCLINE_LABBLEED.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABBLEED.CHARACTERISTICCODE = 'LABBLEED'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABDYEMIG ON
    QUALITYDOCLINE_LABDYEMIG.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABDYEMIG.CHARACTERISTICCODE = 'LABDYEMIG'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABPHEN ON
    QUALITYDOCLINE_LABPHEN.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABPHEN.CHARACTERISTICCODE = 'LABPHEN'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABTRANS ON
    QUALITYDOCLINE_LABTRANS.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABTRANS.CHARACTERISTICCODE = 'LABTRANS'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABPLIGHT ON
    QUALITYDOCLINE_LABPLIGHT.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABPLIGHT.CHARACTERISTICCODE = 'LABPLIGHT'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCHLOR ON
    QUALITYDOCLINE_LABCHLOR.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCHLOR.CHARACTERISTICCODE = 'LABCHLOR'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCOLOUR_QTY ON
    QUALITYDOCLINE_LABCOLOUR_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCOLOUR_QTY.CHARACTERISTICCODE = 'LABCOLOUR'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRNUM_QTY ON
    QUALITYDOCLINE_LABCLRNUM_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRNUM_QTY.CHARACTERISTICCODE = 'LABCLRNUM'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCAT_QTY ON
    QUALITYDOCLINE_LABCAT_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCAT_QTY.CHARACTERISTICCODE = 'LABCAT'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABDIPCLRF_QTY ON
    QUALITYDOCLINE_LABDIPCLRF_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABDIPCLRF_QTY.CHARACTERISTICCODE = 'LABDIPCLRF'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABDIPCLRW_QTY ON
    QUALITYDOCLINE_LABDIPCLRW_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABDIPCLRW_QTY.CHARACTERISTICCODE = 'LABDIPCLRW'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABDIPCLRP_QTY ON
    QUALITYDOCLINE_LABDIPCLRP_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABDIPCLRP_QTY.CHARACTERISTICCODE = 'LABDIPCLRP'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWH_QTY ON
    QUALITYDOCLINE_LABCLRSWH_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWH_QTY.CHARACTERISTICCODE = 'LABCLRSWH'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWR_QTY ON
    QUALITYDOCLINE_LABCLRSWR_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWR_QTY.CHARACTERISTICCODE = 'LABCLRSWR'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRPR_QTY ON
    QUALITYDOCLINE_LABCLRPR_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRPR_QTY.CHARACTERISTICCODE = 'LABCLRPR'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWHN_QTY ON
    QUALITYDOCLINE_LABCLRSWHN_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWHN_QTY.CHARACTERISTICCODE = 'LABCLRSWHN'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWRN_QTY ON
    QUALITYDOCLINE_LABCLRSWRN_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWRN_QTY.CHARACTERISTICCODE = 'LABCLRSWRN'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRPRN_QTY ON
    QUALITYDOCLINE_LABCLRPRN_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRPRN_QTY.CHARACTERISTICCODE = 'LABCLRPRN'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWHP_QTY ON
    QUALITYDOCLINE_LABCLRSWHP_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWHP_QTY.CHARACTERISTICCODE = 'LABCLRSWHP'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRSWRP_QTY ON
    QUALITYDOCLINE_LABCLRSWRP_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRSWRP_QTY.CHARACTERISTICCODE = 'LABCLRSWRP'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCLRPRP_QTY ON
    QUALITYDOCLINE_LABCLRPRP_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCLRPRP_QTY.CHARACTERISTICCODE = 'LABCLRPRP'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCRKDRY_QTY ON
    QUALITYDOCLINE_LABCRKDRY_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCRKDRY_QTY.CHARACTERISTICCODE = 'LABCRKDRY'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCRKWET_QTY ON
    QUALITYDOCLINE_LABCRKWET_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCRKWET_QTY.CHARACTERISTICCODE = 'LABCRKWET'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABLIGHT_QTY ON
    QUALITYDOCLINE_LABLIGHT_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABLIGHT_QTY.CHARACTERISTICCODE = 'LABLIGHT'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABBLEED_QTY ON
    QUALITYDOCLINE_LABBLEED_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABBLEED_QTY.CHARACTERISTICCODE = 'LABBLEED'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABDYEMIG_QTY ON
    QUALITYDOCLINE_LABDYEMIG_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABDYEMIG_QTY.CHARACTERISTICCODE = 'LABDYEMIG'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABPHEN_QTY ON
    QUALITYDOCLINE_LABPHEN_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABPHEN_QTY.CHARACTERISTICCODE = 'LABPHEN'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABTRANS_QTY ON
    QUALITYDOCLINE_LABTRANS_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABTRANS_QTY.CHARACTERISTICCODE = 'LABTRANS'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABPLIGHT_QTY ON
    QUALITYDOCLINE_LABPLIGHT_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABPLIGHT_QTY.CHARACTERISTICCODE = 'LABPLIGHT'
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE_LABCHLOR_QTY ON
    QUALITYDOCLINE_LABCHLOR_QTY.QUALITYDOCUMENTHEADERLINE = QUALITYDOCUMENT.HEADERLINE
    AND QUALITYDOCLINE_LABCHLOR_QTY.CHARACTERISTICCODE = 'LABCHLOR'
WHERE
    QUALITYDOCLINE_LABCOLOUR.QUALITYDOCUMENTHEADERCODE = 'LABDIP'
    --    AND QUALITYDOCUMENT.LOTCODE LIKE '%LAB2300233%';


-- DB2ADMIN.ITXVIEWLABELPRESS source

CREATE VIEW ITXVIEWLABELPRESS AS
SELECT
    ELEMENTSINSPECTION.ELEMENTCODE,
    ELEMENTSINSPECTION.DEMANDCODE,
    ELEMENTSINSPECTION.WEIGHTNET,
    ELEMENTSINSPECTION.QUALITYCODE,
    ELEMENTSINSPECTION.WINDINGMACHINE,
    INITIALS.LONGDESCRIPTION,
    ELEMENTS.DECOSUBCODE02,
    ELEMENTS.DECOSUBCODE03,
    ELEMENTS.DECOSUBCODE04,
    PRODUCTIONDEMAND.EXTERNALREFERENCE,
    PRODUCTIONDEMAND.INTERNALREFERENCE
FROM
    (
        (
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        LEFT OUTER JOIN INITIALS INITIALS ON
            ELEMENTSINSPECTION.OPERATORCODE = INITIALS.CODE
        )
    LEFT OUTER JOIN ELEMENTS ELEMENTS ON
        ELEMENTSINSPECTION.ELEMENTCODE = ELEMENTS.CODE
    )
LEFT OUTER JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    ELEMENTSINSPECTION.ELEMENTCODE = PRODUCTIONDEMAND.CODE;


-- DB2ADMIN.ITXVIEWLANGGANANKNT source

CREATE VIEW ITXVIEWLANGGANANKNT AS 
SELECT
    SALESORDER.CODE,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    SALESORDER SALESORDER
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
    AND 
SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE;


-- DB2ADMIN.ITXVIEWLAPBULANANSPRKNT source

CREATE VIEW ITXVIEWLAPBULANANSPRKNT AS
SELECT
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    SUM(BALANCE.BASEPRIMARYQUANTITYUNIT) AS SISA_STOK,
    BALANCE.BASEPRIMARYUNITCODE,
    BALANCE.CREATIONDATETIME,
    ITEMWAREHOUSELINK.SAFETYSTOCK,
    B.STOK_MASUK,
    B.PRD_MASUK,
    C.STOK_KELUAR,
    C.PRD_KELUAR
FROM
    BALANCE BALANCE
LEFT JOIN ITEMWAREHOUSELINK ITEMWAREHOUSELINK ON
    BALANCE.ITEMTYPECODE = ITEMWAREHOUSELINK.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = ITEMWAREHOUSELINK.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = ITEMWAREHOUSELINK.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = ITEMWAREHOUSELINK.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = ITEMWAREHOUSELINK.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = ITEMWAREHOUSELINK.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = ITEMWAREHOUSELINK.SUBCODE06
    AND BALANCE.LOGICALWAREHOUSECODE = ITEMWAREHOUSELINK.LOGICALWAREHOUSECODE
LEFT JOIN (
        SELECT
            STOCKTRANSACTION.ITEMTYPECODE,
            STOCKTRANSACTION.DECOSUBCODE01,
            STOCKTRANSACTION.DECOSUBCODE02,
            STOCKTRANSACTION.DECOSUBCODE03,
            STOCKTRANSACTION.DECOSUBCODE04,
            STOCKTRANSACTION.DECOSUBCODE05,
            STOCKTRANSACTION.DECOSUBCODE06,
            STOCKTRANSACTION.LOGICALWAREHOUSECODE,
            SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS STOK_MASUK,
            PRODUCT.LONGDESCRIPTION AS PRD_MASUK
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        LEFT JOIN PRODUCT PRODUCT ON
            STOCKTRANSACTION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND STOCKTRANSACTION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND STOCKTRANSACTION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND STOCKTRANSACTION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND STOCKTRANSACTION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND STOCKTRANSACTION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND STOCKTRANSACTION.DECOSUBCODE06 = PRODUCT.SUBCODE06
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '099'
            AND STOCKTRANSACTION.ITEMTYPECODE = 'SPR'
            AND STOCKTRANSACTION.DECOSUBCODE01 = 'KNT'
            AND (
                STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'P211'
                    OR STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M211'
            )
        GROUP BY
            STOCKTRANSACTION.ITEMTYPECODE,
            STOCKTRANSACTION.DECOSUBCODE01,
            STOCKTRANSACTION.DECOSUBCODE02,
            STOCKTRANSACTION.DECOSUBCODE03,
            STOCKTRANSACTION.DECOSUBCODE04,
            STOCKTRANSACTION.DECOSUBCODE05,
            STOCKTRANSACTION.DECOSUBCODE06,
            STOCKTRANSACTION.LOGICALWAREHOUSECODE,
            PRODUCT.LONGDESCRIPTION
    ) B ON
    BALANCE.ITEMTYPECODE = B.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = B.DECOSUBCODE01
    AND BALANCE.DECOSUBCODE02 = B.DECOSUBCODE02
    AND BALANCE.DECOSUBCODE03 = B.DECOSUBCODE03
    AND BALANCE.DECOSUBCODE04 = B.DECOSUBCODE04
    AND BALANCE.DECOSUBCODE05 = B.DECOSUBCODE05
    AND BALANCE.DECOSUBCODE06 = B.DECOSUBCODE06
    AND BALANCE.LOGICALWAREHOUSECODE = B.LOGICALWAREHOUSECODE
LEFT JOIN (
        SELECT
            STOCKTRANSACTION.ITEMTYPECODE,
            STOCKTRANSACTION.DECOSUBCODE01,
            STOCKTRANSACTION.DECOSUBCODE02,
            STOCKTRANSACTION.DECOSUBCODE03,
            STOCKTRANSACTION.DECOSUBCODE04,
            STOCKTRANSACTION.DECOSUBCODE05,
            STOCKTRANSACTION.DECOSUBCODE06,
            STOCKTRANSACTION.LOGICALWAREHOUSECODE,
            SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS STOK_KELUAR,
            PRODUCT.LONGDESCRIPTION AS PRD_KELUAR
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        LEFT JOIN PRODUCT PRODUCT ON
            STOCKTRANSACTION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND STOCKTRANSACTION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND STOCKTRANSACTION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND STOCKTRANSACTION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND STOCKTRANSACTION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND STOCKTRANSACTION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND STOCKTRANSACTION.DECOSUBCODE06 = PRODUCT.SUBCODE06
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '098'
            AND STOCKTRANSACTION.ITEMTYPECODE = 'SPR'
            AND STOCKTRANSACTION.DECOSUBCODE01 = 'KNT'
            AND (
                STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'P211'
                    OR STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M211'
            )
        GROUP BY
            STOCKTRANSACTION.ITEMTYPECODE,
            STOCKTRANSACTION.DECOSUBCODE01,
            STOCKTRANSACTION.DECOSUBCODE02,
            STOCKTRANSACTION.DECOSUBCODE03,
            STOCKTRANSACTION.DECOSUBCODE04,
            STOCKTRANSACTION.DECOSUBCODE05,
            STOCKTRANSACTION.DECOSUBCODE06,
            STOCKTRANSACTION.LOGICALWAREHOUSECODE,
            PRODUCT.LONGDESCRIPTION
    ) C ON
    BALANCE.ITEMTYPECODE = C.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = C.DECOSUBCODE01
    AND BALANCE.DECOSUBCODE02 = C.DECOSUBCODE02
    AND BALANCE.DECOSUBCODE03 = C.DECOSUBCODE03
    AND BALANCE.DECOSUBCODE04 = C.DECOSUBCODE04
    AND BALANCE.DECOSUBCODE05 = C.DECOSUBCODE05
    AND BALANCE.DECOSUBCODE06 = C.DECOSUBCODE06
    AND BALANCE.LOGICALWAREHOUSECODE = C.LOGICALWAREHOUSECODE
WHERE
    BALANCE.ITEMTYPECODE = 'SPR'
    AND BALANCE.DECOSUBCODE01 = 'KNT'
    AND (
        BALANCE.LOGICALWAREHOUSECODE = 'P211'
            OR BALANCE.LOGICALWAREHOUSECODE = 'M211'
    )
GROUP BY
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.BASEPRIMARYUNITCODE,
    ITEMWAREHOUSELINK.SAFETYSTOCK,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.CREATIONDATETIME,
    B.STOK_MASUK,
    B.PRD_MASUK,
    C.STOK_KELUAR,
    C.PRD_KELUAR;


-- DB2ADMIN.ITXVIEWLAPHARIAN_GKJ source

CREATE VIEW ITXVIEWLAPHARIAN_GKJ AS
SELECT
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.DECOSUBCODE07,
    STOCKTRANSACTION.DECOSUBCODE08,
    STOCKTRANSACTION.DECOSUBCODE09,
    STOCKTRANSACTION.DECOSUBCODE10,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.BASESECONDARYUOMCODE,
    STOCKTRANSACTION.BASESECONDARYQUANTITY,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.PROJECTCODE,
    BUSINESSPARTNER.LEGALNAME1,
    SALESORDER.EXTERNALREFERENCE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    STOCKTRANSACTION.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN DB2ADMIN.SALESORDER SALESORDER ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
LEFT JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER;


-- DB2ADMIN.ITXVIEWLAPHARIAN_MASUKKAINGREIGE source

CREATE VIEW ITXVIEWLAPHARIAN_MASUKKAINGREIGE AS   
   
SELECT
    STOCKTRANSACTION.COMPANYCODE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.DECOSUBCODE07,
    STOCKTRANSACTION.DECOSUBCODE08,
    STOCKTRANSACTION.DECOSUBCODE09,
    STOCKTRANSACTION.DECOSUBCODE10,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.TRANSACTIONDETAILNUMBER,
    SALESORDER.CODE AS SALES_CODE,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.COMPANYCODE AS FULLITEMKEYDECODER_COMPANYCODE,
    FULLITEMKEYDECODER.IDENTIFIER,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    (
        (
            (
                DB2ADMIN.STOCKTRANSACTION STOCKTRANSACTION
            LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
                STOCKTRANSACTION.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
            )
        LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        )
    LEFT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
        STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
    )
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER;


-- DB2ADMIN.ITXVIEWLAPHARKELUARSPRKNT source

CREATE VIEW ITXVIEWLAPHARKELUARSPRKNT AS
SELECT
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE,
    STOCKTRANSACTION.ABSUNIQUEID,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS STOK_KELUAR,
    PRODUCT.LONGDESCRIPTION
FROM
    STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN PRODUCT PRODUCT ON
    STOCKTRANSACTION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
    AND STOCKTRANSACTION.DECOSUBCODE01 = PRODUCT.SUBCODE01
    AND STOCKTRANSACTION.DECOSUBCODE02 = PRODUCT.SUBCODE02
    AND STOCKTRANSACTION.DECOSUBCODE03 = PRODUCT.SUBCODE03
    AND STOCKTRANSACTION.DECOSUBCODE04 = PRODUCT.SUBCODE04
    AND STOCKTRANSACTION.DECOSUBCODE05 = PRODUCT.SUBCODE05
    AND STOCKTRANSACTION.DECOSUBCODE06 = PRODUCT.SUBCODE06
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '098'
    AND STOCKTRANSACTION.ITEMTYPECODE = 'SPR'
    AND STOCKTRANSACTION.DECOSUBCODE01 = 'KNT'
    AND (
        STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'P211'
            OR STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M211'
    )
GROUP BY
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE,
    STOCKTRANSACTION.ABSUNIQUEID,
    PRODUCT.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWLAPHARMASUKSPRKNT source

CREATE VIEW ITXVIEWLAPHARMASUKSPRKNT AS
SELECT
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE,
    STOCKTRANSACTION.ABSUNIQUEID,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS STOK_MASUK,
    PRODUCT.LONGDESCRIPTION
FROM
    STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN PRODUCT PRODUCT ON
    STOCKTRANSACTION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
    AND STOCKTRANSACTION.DECOSUBCODE01 = PRODUCT.SUBCODE01
    AND STOCKTRANSACTION.DECOSUBCODE02 = PRODUCT.SUBCODE02
    AND STOCKTRANSACTION.DECOSUBCODE03 = PRODUCT.SUBCODE03
    AND STOCKTRANSACTION.DECOSUBCODE04 = PRODUCT.SUBCODE04
    AND STOCKTRANSACTION.DECOSUBCODE05 = PRODUCT.SUBCODE05
    AND STOCKTRANSACTION.DECOSUBCODE06 = PRODUCT.SUBCODE06
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '099'
    AND STOCKTRANSACTION.ITEMTYPECODE = 'SPR'
    AND STOCKTRANSACTION.DECOSUBCODE01 = 'KNT'
    AND (
        STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'P211'
            OR STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M211'
    )
GROUP BY
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ITEMTYPECODE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.LOGICALWAREHOUSECODE,
    STOCKTRANSACTION.ABSUNIQUEID,
    PRODUCT.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWLAPHAR_MASUKGREIGE source

CREATE VIEW ITXVIEWLAPHAR_MASUKGREIGE AS
SELECT
    STOCKTRANSACTION.COMPANYCODE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.DECOSUBCODE07,
    STOCKTRANSACTION.DECOSUBCODE08,
    STOCKTRANSACTION.DECOSUBCODE09,
    STOCKTRANSACTION.DECOSUBCODE10,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.TRANSACTIONDETAILNUMBER,
    SALESORDER.CODE AS SALES_CODE,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.COMPANYCODE AS FULLITEMKEYDECODER_COMPANYCODE,
    FULLITEMKEYDECODER.IDENTIFIER,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    (
        (
            (
                STOCKTRANSACTION STOCKTRANSACTION
            LEFT OUTER JOIN ORDERPARTNER ORDERPARTNER ON
                STOCKTRANSACTION.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
            )
        LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        )
    LEFT OUTER JOIN SALESORDER SALESORDER ON
        STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
    )
LEFT OUTER JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER;


-- DB2ADMIN.ITXVIEWLAPKELUARBENANG source

CREATE VIEW ITXVIEWLAPKELUARBENANG AS
SELECT
    INTERNALDOCUMENT.COMPANYCODE,
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE,
    INTERNALDOCUMENT.PROVISIONALCODE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.EXTERNALREFERENCE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    SUM(STOCKTRANSACTION.BASEPRIMARYQUANTITY) AS QTY_KG,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS QTY_USER,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE
FROM
    INTERNALDOCUMENT INTERNALDOCUMENT
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE ON
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE = INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE
    AND INTERNALDOCUMENT.PROVISIONALCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '203'
    AND STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M011'
GROUP BY
    INTERNALDOCUMENT.COMPANYCODE,
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE,
    INTERNALDOCUMENT.PROVISIONALCODE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.EXTERNALREFERENCE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE;


-- DB2ADMIN.ITXVIEWLAPKIRIMDOMESTIK source

CREATE VIEW ITXVIEWLAPKIRIMDOMESTIK AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.SALESORDERCOUNTERCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    SALESDOCUMENT.SALESORDERCOUNTERCODE <> 'CAPITAL'
    AND SALESDOCUMENTLINE.PREVIOUSORIGINFROM = '1'
GROUP BY
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.SALESORDERCOUNTERCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
    SALESDOCUMENT.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    ORDERPARTNERBRAND.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEWLAPKIRIMKNT source

CREATE VIEW ITXVIEWLAPKIRIMKNT AS 
SELECT
    INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE,
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.RECEIVINGDATE,
    INTERNALDOCUMENTLINE.RECEIVINGSTATUS,
    INTERNALDOCUMENTLINE.SHIPPEDUSERPRIMARYQUANTITY,
    INTERNALDOCUMENTLINE.RECEIVEDUSERPRIMARYQUANTITY,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.PROJECTCODE
FROM
    INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE;


-- DB2ADMIN.ITXVIEWLAPKIRIMLAINLAIN source

CREATE VIEW ITXVIEWLAPKIRIMLAINLAIN AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.SALESORDERCOUNTERCODE,
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    SALESDOCUMENT.SALESORDERCOUNTERCODE = 'CAPITAL'
    AND SALESDOCUMENTLINE.PREVIOUSORIGINFROM = '1';


-- DB2ADMIN.ITXVIEWLAPKIRIMPPC source

CREATE VIEW ITXVIEWLAPKIRIMPPC AS
SELECT
    DISTINCT 
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    CASE
        WHEN TRIM(i.EXTERNALITEMCODE) IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02) || '' || TRIM(SALESDOCUMENTLINE.SUBCODE03)
        ELSE TRIM(i.EXTERNALITEMCODE)
    END AS EXTERNALITEMCODE,    
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ORDERLINE,
    A.LOTCODE AS LOTCODE,
    --    LISTAGG(TRIM(A.LOTCODE), ', ') AS LOTCODE,
    --    DBL.PRODUCTIONDEMANDCODE,
    ITXVIEWALLOCATIONLAPKIRIMPPC.CODE
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ITXVIEWALLOCATIONLAPKIRIMPPC ITXVIEWALLOCATIONLAPKIRIMPPC ON
    ITXVIEWALLOCATIONLAPKIRIMPPC.ORDERCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND ITXVIEWALLOCATIONLAPKIRIMPPC.ORDERLINE = SALESDOCUMENTLINE.ORDERLINE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '0'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
        GROUP BY
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
    ) A ON
    ITXVIEWALLOCATIONLAPKIRIMPPC.CODE = A.CODE
LEFT JOIN ITXVIEWORDERITEMLINKACTIVE i ON
    i.ORDPRNCUSTOMERSUPPLIERCODE = SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE
    AND i.ITEMTYPEAFICODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
    AND i.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND i.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND i.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND i.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND i.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND i.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND i.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND i.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND i.SUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
    AND i.SUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
LEFT JOIN ITXVIEW_DEMANDBYLOTCODE DBL ON
    DBL.PRODUCTIONORDERCODE = A.LOTCODE
    AND DBL.DLVSALESORDERLINEORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
GROUP BY
    A.LOTCODE,
    --	DBL.PRODUCTIONDEMANDCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ORDERLINE,
    ITXVIEWALLOCATIONLAPKIRIMPPC.CODE,
    i.EXTERNALITEMCODE;


-- DB2ADMIN.ITXVIEWLAPMASUKBENANG source

CREATE VIEW ITXVIEWLAPMASUKBENANG AS
SELECT
    MRNDETAIL.MRNHEADERCODE,
    MRNDETAIL.TRANSACTIONNUMBER,
    MRNDETAIL.PURCHASEORDERCODE,
    MRNDETAIL.ORDERLINE,
    MRNDETAIL.ITEMTYPEAFICODE,
    MRNDETAIL.SUBCODE01,
    MRNDETAIL.SUBCODE02,
    MRNDETAIL.SUBCODE03,
    MRNDETAIL.SUBCODE04,
    MRNDETAIL.SUBCODE05,
    MRNDETAIL.SUBCODE06,
    MRNDETAIL.SUBCODE07,
    MRNDETAIL.SUBCODE08,
    MRNDETAIL.SUBCODE09,
    MRNDETAIL.SUBCODE10,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    SUM(STOCKTRANSACTION.BASEPRIMARYQUANTITY) AS QTY_KG,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS QTY_USER,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE
FROM
    MRNDETAIL MRNDETAIL
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    MRNDETAIL.TRANSACTIONNUMBER = STOCKTRANSACTION.TRANSACTIONNUMBER
    AND MRNDETAIL.PURCHASEORDERCODE = STOCKTRANSACTION.ORDERCODE
    AND MRNDETAIL.ORDERLINE = STOCKTRANSACTION.ORDERLINE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    STOCKTRANSACTION.SUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
GROUP BY
    MRNDETAIL.MRNHEADERCODE,
    MRNDETAIL.TRANSACTIONNUMBER,
    MRNDETAIL.PURCHASEORDERCODE,
    MRNDETAIL.ORDERLINE,
    MRNDETAIL.ITEMTYPEAFICODE,
    MRNDETAIL.SUBCODE01,
    MRNDETAIL.SUBCODE02,
    MRNDETAIL.SUBCODE03,
    MRNDETAIL.SUBCODE04,
    MRNDETAIL.SUBCODE05,
    MRNDETAIL.SUBCODE06,
    MRNDETAIL.SUBCODE07,
    MRNDETAIL.SUBCODE08,
    MRNDETAIL.SUBCODE09,
    MRNDETAIL.SUBCODE10,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE;


-- DB2ADMIN.ITXVIEWLAPMASUKGREIGE source

CREATE VIEW ITXVIEWLAPMASUKGREIGE AS
SELECT
    --	STOCKTRANSACTION.TRANSACTIONNUMBER,
    INTERNALDOCUMENT.COMPANYCODE,
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE,
    INTERNALDOCUMENT.PROVISIONALCODE,
    INTERNALDOCUMENTLINE.RECEIVINGDATE, 
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.EXTERNALREFERENCE,
    INTERNALDOCUMENTLINE.INTERNALREFERENCE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    SUM(STOCKTRANSACTION.BASEPRIMARYQUANTITY) AS QTY_KG,
    SUM(STOCKTRANSACTION.USERPRIMARYQUANTITY) AS QTY_USER,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE
FROM
    INTERNALDOCUMENT INTERNALDOCUMENT
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE ON
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE = INTERNALDOCUMENTLINE.INTDOCPROVISIONALCOUNTERCODE
    AND INTERNALDOCUMENT.PROVISIONALCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '204'
    AND STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M021'
GROUP BY
    --	STOCKTRANSACTION.TRANSACTIONNUMBER,
    INTERNALDOCUMENT.COMPANYCODE,
    INTERNALDOCUMENT.PROVISIONALCOUNTERCODE,
    INTERNALDOCUMENT.PROVISIONALCODE,
    INTERNALDOCUMENTLINE.RECEIVINGDATE,
    INTERNALDOCUMENTLINE.ORDERLINE,
    INTERNALDOCUMENTLINE.EXTERNALREFERENCE,
    INTERNALDOCUMENTLINE.INTERNALREFERENCE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    INTERNALDOCUMENTLINE.SUBCODE01,
    INTERNALDOCUMENTLINE.SUBCODE02,
    INTERNALDOCUMENTLINE.SUBCODE03,
    INTERNALDOCUMENTLINE.SUBCODE04,
    INTERNALDOCUMENTLINE.SUBCODE05,
    INTERNALDOCUMENTLINE.SUBCODE06,
    INTERNALDOCUMENTLINE.SUBCODE07,
    INTERNALDOCUMENTLINE.SUBCODE08,
    INTERNALDOCUMENTLINE.SUBCODE09,
    INTERNALDOCUMENTLINE.SUBCODE10,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.DESTINATIONWAREHOUSECODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.USERPRIMARYUOMCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.WAREHOUSELOCATIONCODE;


-- DB2ADMIN.ITXVIEWLAPORANAFTERSALES source

CREATE VIEW ITXVIEWLAPORANAFTERSALES AS
SELECT
    D.CODE,
    G.PRODUCTIONORDERCODE,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    CASE
        WHEN SALESORDER.EXTERNALREFERENCE IS NULL THEN SALESORDERLINE.EXTERNALREFERENCE
        ELSE SALESORDER.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESORDERLINE.SALESORDERCODE,
    TRIM(H.NO_ITEM) AS NO_ITEM,
    TRIM(SALESORDERLINE.SUBCODE02) AS SUBCODE02,
    TRIM(SALESORDERLINE.SUBCODE03) AS SUBCODE03,
    SALESORDERLINE.ITEMDESCRIPTION,
    J.VALUEDECIMAL AS LEBAR,
    I.VALUEDECIMAL AS GRAMASI,
    CASE
        WHEN SALESORDERLINE.SUBCODE07 = '-' THEN A.COLOR
        WHEN SALESORDERLINE.SUBCODE07 <> '-'
        OR SALESORDERLINE.SUBCODE07 <> '' THEN B.COLOR_PRT
        WHEN SALESORDERLINE.ITEMTYPEAFICODE = 'FKF' THEN C.COLOR_FKF
        ELSE ''
    END AS WARNA,
    TRIM(SALESORDERLINE.SUBCODE05) AS NO_WARNA,
    SALESORDER.REQUIREDDUEDATE AS TGL_DELIVERY,
    SUM(SALESORDERLINE.USERPRIMARYQUANTITY) AS QTY_ORDER,
    SUM(SALESORDERLINE.USERSECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
    SALESORDERLINE.USERSECONDARYUOMCODE AS UOM_ORDER_SECOND,
    F.QTY_BRUTO,
    O.TGL_INSPEK,
    P.COMMENT_INSPEK,
    M.TGL_PACKING,
    K.TOTAL_ROLL AS TOTAL_ROLL_PACKING,
    K.TOTAL_KG AS TOTAL_KG_PACKING,
    K.TOTAL_YARD AS TOTAL_YARD_PACKING,
    L.TOTAL_ROLL AS TOTAL_ROLL_KIRIM,
    L.TOTAL_KG AS TOTAL_KG_KIRIM,
    L.TOTAL_YARD AS TOTAL_YARD_KIRIM,
    N.TOTAL_ROLL AS TOTAL_ROLL_FOC,
    N.TOTAL_KG AS TOTAL_KG_FOC,
    N.TOTAL_YARD AS TOTAL_YARD_FOC,
    Q.ORDERCODE AS NO_SJ,
    Q.DEFINITIVEDOCUMENTDATE AS TGL_KIRIM,
    K.TOTAL_ROLL-R.TOTAL_ROLL AS TOTAL_ROLL_SISA,
    ROUND(K.TOTAL_KG-R.TOTAL_KG, 2) AS TOTAL_KG_SISA,
    ROUND(K.TOTAL_YARD-R.TOTAL_YARD, 2) AS TOTAL_YARD_SISA,
    CASE
        WHEN D.TEMPLATECODE = '310' THEN 'KK SALINAN'
        ELSE '-'
    END AS SALINAN,
    D.EXTERNALREFERENCE,
    D.INTERNALREFERENCE,
    L.CODE AS NO_ALLOCATION
FROM
    SALESORDER SALESORDER
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION AS COLOR
        FROM
            USERGENERICGROUP USERGENERICGROUP
        WHERE
            USERGENERICGROUP.USERGENERICGROUPTYPECODE = 'CL1'
    ) A ON
    SALESORDERLINE.SUBCODE05 = A.CODE
LEFT JOIN (
        SELECT
            DESIGN.SUBCODE01,
            DESIGNCOMPONENT.VARIANTCODE,
            DESIGNCOMPONENT.SHORTDESCRIPTION AS COLOR_PRT
        FROM
            DESIGN DESIGN
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            DESIGN.NUMBERID = DESIGNCOMPONENT.DESIGNNUMBERID
            AND DESIGN.SUBCODE01 = DESIGNCOMPONENT.DESIGNSUBCODE01
    ) B ON
    SALESORDERLINE.SUBCODE07 = B.SUBCODE01
    AND SALESORDERLINE.SUBCODE08 = B.VARIANTCODE
LEFT JOIN (
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            CASE
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) = 0 THEN ''
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) > 0 THEN SUBSTR(PRODUCT.SHORTDESCRIPTION , 1, LOCATE('-', PRODUCT.SHORTDESCRIPTION)-1)
                ELSE ''
            END AS COLOR_FKF
        FROM
            PRODUCT PRODUCT
        WHERE
            PRODUCT.ITEMTYPECODE = 'FKF'
    ) C ON
    SALESORDERLINE.ITEMTYPEAFICODE = C.ITEMTYPECODE
    AND SALESORDERLINE.SUBCODE01 = C.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = C.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = C.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = C.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = C.SUBCODE05
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.TEMPLATECODE,
            PRODUCTIONDEMAND.EXTERNALREFERENCE,
            PRODUCTIONDEMAND.INTERNALREFERENCE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
    ) D ON
    SALESORDERLINE.SALESORDERCODE = D.PROJECTCODE
    AND SALESORDERLINE.ORDERLINE = D.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE AS NO_SJ,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASEPRIMARYQUANTITY) AS QTY_KIRIM_KG,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE AS UOM_KIRIM_KG,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASESECONDARYQUANTITY) AS QTY_KIRIM_SECOND,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE AS UOM_KIRIM_SECOND
        FROM
            SALESDOCUMENTLINE SALESDOCUMENTLINE
        WHERE
            SALESDOCUMENTLINE.PREVIOUSORIGINFROM = '1'
        GROUP BY
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE
    ) E ON
    SALESORDERLINE.SALESORDERCODE = E.PROJECTCODE
    AND SALESORDERLINE.ITEMTYPEAFICODE = E.ITEMTYPEAFICODE
    AND SALESORDERLINE.SUBCODE01 = E.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = E.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = E.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = E.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = E.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = E.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = E.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = E.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = E.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = E.SUBCODE10
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    SALESDOCUMENT.PROVISIONALCODE = E.NO_SJ
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            SUM(PRODUCTIONRESERVATION.USEDBASEPRIMARYQUANTITY) AS QTY_BRUTO,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE AS UOM_BAGIKAIN_KG,
            SUM(PRODUCTIONRESERVATION.USEDBASESECONDARYQUANTITY) AS QTY_BRUTO_SECOND,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE AS UOM_BAGIKAIN_SECOND
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE
    ) F ON
    D.CODE = F.ORDERCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'CNP1'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) G ON
    D.CODE = G.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            ORDERITEMORDERPARTNERLINK.ORDPRNCUSTOMERSUPPLIERCODE,
            ORDERITEMORDERPARTNERLINK.ITEMTYPEAFICODE,
            ORDERITEMORDERPARTNERLINK.SUBCODE01,
            ORDERITEMORDERPARTNERLINK.SUBCODE02,
            ORDERITEMORDERPARTNERLINK.SUBCODE03,
            ORDERITEMORDERPARTNERLINK.SUBCODE04,
            ORDERITEMORDERPARTNERLINK.SUBCODE05,
            ORDERITEMORDERPARTNERLINK.SUBCODE06,
            ORDERITEMORDERPARTNERLINK.SUBCODE07,
            ORDERITEMORDERPARTNERLINK.SUBCODE08,
            ORDERITEMORDERPARTNERLINK.SUBCODE09,
            ORDERITEMORDERPARTNERLINK.SUBCODE10,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION AS NO_ITEM
        FROM
            ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK
    ) H ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = H.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDERLINE.ITEMTYPEAFICODE = H.ITEMTYPEAFICODE
    AND SALESORDERLINE.SUBCODE01 = H.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = H.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = H.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = H.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = H.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = H.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = H.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = H.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = H.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = H.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'GSM'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) I ON
    SALESORDERLINE.SUBCODE01 = I.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = I.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = I.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = I.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = I.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = I.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = I.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = I.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = I.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = I.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'Width'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) J ON
    SALESORDERLINE.SUBCODE01 = J.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = J.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = J.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = J.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = J.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = J.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = J.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = J.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = J.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = J.SUBCODE10
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            COUNT(ELEMENTSINSPECTION.ELEMENTCODE) AS TOTAL_ROLL,
            SUM(ELEMENTSINSPECTION.WEIGHTNET) AS TOTAL_KG,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) K ON
    D.CODE = K.DEMANDCODE
LEFT JOIN (
        SELECT
            ALLOCATION.LOTCODE,
            ALLOCATION.CODE,
            COUNT(ALLOCATION.ITEMELEMENTCODE) AS TOTAL_ROLL,
            SUM(ALLOCATION.USERPRIMARYQUANTITY) AS TOTAL_KG,
            SUM(ALLOCATION.USERSECONDARYQUANTITY) AS TOTAL_YARD
        FROM
            ALLOCATION ALLOCATION
        WHERE
            LENGTH(TRIM(ALLOCATION.ITEMELEMENTCODE))= 13
                AND ALLOCATION.TEMPLATECODE = '004'
            GROUP BY
                ALLOCATION.LOTCODE,
                ALLOCATION.CODE
    ) L ON
    G.PRODUCTIONORDERCODE = L.LOTCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10))
                ),
                ','
            ) AS TGL_PACKING
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) M ON
    D.CODE = M.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            COUNT(ELEMENTSINSPECTION.ELEMENTCODE) AS TOTAL_ROLL,
            SUM(ELEMENTSINSPECTION.WEIGHTGROSS) AS TOTAL_KG,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
                AND ELEMENTSINSPECTION.QUALITYREASONCODE = 'FOC'
            GROUP BY
                ELEMENTSINSPECTION.DEMANDCODE
    ) N ON
    D.CODE = N.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10))
                ),
                ','
            ) AS TGL_INSPEK
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 11
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) O ON
    D.CODE = O.DEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEPCOMMENT.PRODEMANDSTEPPRODEMANDCODE,
            CAST(
                PRODUCTIONDEMANDSTEPCOMMENT.COMMENTTEXT AS VARCHAR(5000)
            ) AS COMMENT_INSPEK
        FROM
            PRODUCTIONDEMANDSTEPCOMMENT PRODUCTIONDEMANDSTEPCOMMENT
        WHERE
            PRODUCTIONDEMANDSTEPCOMMENT.PRODUCTIONDEMANDSTEPSTEPNUMBER = 600
    ) P ON
    D.CODE = P.PRODEMANDSTEPPRODEMANDCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.ORDERCODE,
            SALESDOCUMENT.DEFINITIVEDOCUMENTDATE
        FROM
            ALLOCATION ALLOCATION
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    ) Q ON
    L.CODE = Q.CODE
LEFT JOIN (
        SELECT
            ALLOCATION.LOTCODE,
            COUNT(ALLOCATION.ITEMELEMENTCODE) AS TOTAL_ROLL,
            SUM(ALLOCATION.USERPRIMARYQUANTITY) AS TOTAL_KG,
            SUM(ALLOCATION.USERSECONDARYQUANTITY) AS TOTAL_YARD
        FROM
            ALLOCATION ALLOCATION
        WHERE
            LENGTH(TRIM(ALLOCATION.ITEMELEMENTCODE))= 13
                AND ALLOCATION.TEMPLATECODE = '004'
            GROUP BY
                ALLOCATION.LOTCODE
    ) R ON
    G.PRODUCTIONORDERCODE = R.LOTCODE
GROUP BY
    D.CODE,
    G.PRODUCTIONORDERCODE,
    BUSINESSPARTNER.LEGALNAME1,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.SALESORDERCODE,
    H.NO_ITEM,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.ITEMDESCRIPTION,
    I.VALUEDECIMAL,
    J.VALUEDECIMAL,
    A.COLOR,
    B.COLOR_PRT,
    C.COLOR_FKF,
    SALESORDERLINE.SUBCODE05,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    F.QTY_BRUTO,
    O.TGL_INSPEK,
    P.COMMENT_INSPEK,
    M.TGL_PACKING,
    K.TOTAL_ROLL,
    K.TOTAL_KG,
    K.TOTAL_YARD,
    L.TOTAL_ROLL,
    L.TOTAL_KG,
    L.TOTAL_YARD,
    N.TOTAL_ROLL,
    N.TOTAL_KG,
    N.TOTAL_YARD,
    Q.ORDERCODE,
    Q.DEFINITIVEDOCUMENTDATE,
    D.TEMPLATECODE,
    D.EXTERNALREFERENCE,
    D.INTERNALREFERENCE,
    L.CODE,
    R.TOTAL_ROLL,
    R.TOTAL_KG,
    R.TOTAL_YARD;


-- DB2ADMIN.ITXVIEWLAPORANAFTERSALESHEADER source

CREATE VIEW ITXVIEWLAPORANAFTERSALESHEADER AS
SELECT
    D.CODE,
    G.PRODUCTIONORDERCODE,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    CASE
        WHEN SALESORDER.EXTERNALREFERENCE IS NULL THEN SALESORDERLINE.EXTERNALREFERENCE
        ELSE SALESORDER.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESORDERLINE.SALESORDERCODE,
    TRIM(H.NO_ITEM) AS NO_ITEM,
    TRIM(SALESORDERLINE.SUBCODE02) AS SUBCODE02,
    TRIM(SALESORDERLINE.SUBCODE03) AS SUBCODE03,
    SALESORDERLINE.ITEMDESCRIPTION,
    J.VALUEDECIMAL AS LEBAR,
    I.VALUEDECIMAL AS GRAMASI,
    CASE
        WHEN SALESORDERLINE.SUBCODE07 = '-' THEN A.COLOR
        WHEN SALESORDERLINE.SUBCODE07 <> '-'
        OR SALESORDERLINE.SUBCODE07 <> '' THEN B.COLOR_PRT
        WHEN SALESORDERLINE.ITEMTYPEAFICODE = 'FKF' THEN C.COLOR_FKF
        ELSE ''
    END AS WARNA,
    TRIM(SALESORDERLINE.SUBCODE05) AS NO_WARNA,
    SALESORDER.REQUIREDDUEDATE AS TGL_DELIVERY,
    SUM(SALESORDERLINE.USERPRIMARYQUANTITY) AS QTY_ORDER,
    SUM(SALESORDERLINE.USERSECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
    SALESORDERLINE.USERSECONDARYUOMCODE AS UOM_ORDER_SECOND,
    F.QTY_BRUTO,
    O.TGL_INSPEK,
    P.COMMENT_INSPEK,
    M.TGL_PACKING,
    K.TOTAL_ROLL AS TOTAL_ROLL_PACKING,
    K.TOTAL_KG AS TOTAL_KG_PACKING,
    K.TOTAL_YARD AS TOTAL_YARD_PACKING,
    L.TOTAL_ROLL AS TOTAL_ROLL_KIRIM,
    L.TOTAL_KG AS TOTAL_KG_KIRIM,
    L.TOTAL_YARD AS TOTAL_YARD_KIRIM,
    N.TOTAL_ROLL AS TOTAL_ROLL_FOC,
    N.TOTAL_KG AS TOTAL_KG_FOC,
    N.TOTAL_YARD AS TOTAL_YARD_FOC,
    Q.ORDERCODE AS NO_SJ,
    Q.DEFINITIVEDOCUMENTDATE AS TGL_KIRIM,
    K.TOTAL_ROLL-R.TOTAL_ROLL AS TOTAL_ROLL_SISA,
    ROUND(K.TOTAL_KG-R.TOTAL_KG, 2) AS TOTAL_KG_SISA,
    ROUND(K.TOTAL_YARD-R.TOTAL_YARD, 2) AS TOTAL_YARD_SISA,
    CASE
        WHEN D.TEMPLATECODE = '310' THEN 'KK SALINAN'
        ELSE '-'
    END AS SALINAN,
    D.EXTERNALREFERENCE,
    D.INTERNALREFERENCE,
    L.CODE AS NO_ALLOCATION
FROM
    SALESORDER SALESORDER
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION AS COLOR
        FROM
            USERGENERICGROUP USERGENERICGROUP
        WHERE
            USERGENERICGROUP.USERGENERICGROUPTYPECODE = 'CL1'
    ) A ON
    SALESORDERLINE.SUBCODE05 = A.CODE
LEFT JOIN (
        SELECT
            DESIGN.SUBCODE01,
            DESIGNCOMPONENT.VARIANTCODE,
            DESIGNCOMPONENT.SHORTDESCRIPTION AS COLOR_PRT
        FROM
            DESIGN DESIGN
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            DESIGN.NUMBERID = DESIGNCOMPONENT.DESIGNNUMBERID
            AND DESIGN.SUBCODE01 = DESIGNCOMPONENT.DESIGNSUBCODE01
    ) B ON
    SALESORDERLINE.SUBCODE07 = B.SUBCODE01
    AND SALESORDERLINE.SUBCODE08 = B.VARIANTCODE
LEFT JOIN (
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            CASE
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) = 0 THEN ''
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) > 0 THEN SUBSTR(PRODUCT.SHORTDESCRIPTION , 1, LOCATE('-', PRODUCT.SHORTDESCRIPTION)-1)
                ELSE ''
            END AS COLOR_FKF
        FROM
            PRODUCT PRODUCT
        WHERE
            PRODUCT.ITEMTYPECODE = 'FKF'
    ) C ON
    SALESORDERLINE.ITEMTYPEAFICODE = C.ITEMTYPECODE
    AND SALESORDERLINE.SUBCODE01 = C.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = C.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = C.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = C.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = C.SUBCODE05
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.TEMPLATECODE,
            PRODUCTIONDEMAND.EXTERNALREFERENCE,
            PRODUCTIONDEMAND.INTERNALREFERENCE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
    ) D ON
    (
        SALESORDERLINE.SALESORDERCODE = D.PROJECTCODE
            OR SALESORDERLINE.SALESORDERCODE = D.ORIGDLVSALORDLINESALORDERCODE
    )
    AND SALESORDERLINE.ORDERLINE = D.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE AS NO_SJ,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASEPRIMARYQUANTITY) AS QTY_KIRIM_KG,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE AS UOM_KIRIM_KG,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASESECONDARYQUANTITY) AS QTY_KIRIM_SECOND,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE AS UOM_KIRIM_SECOND
        FROM
            SALESDOCUMENTLINE SALESDOCUMENTLINE
        WHERE
            SALESDOCUMENTLINE.PREVIOUSORIGINFROM = '1'
        GROUP BY
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE
    ) E ON
    SALESORDERLINE.SALESORDERCODE = E.PROJECTCODE
    AND SALESORDERLINE.ITEMTYPEAFICODE = E.ITEMTYPEAFICODE
    AND SALESORDERLINE.SUBCODE01 = E.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = E.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = E.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = E.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = E.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = E.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = E.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = E.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = E.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = E.SUBCODE10
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    SALESDOCUMENT.PROVISIONALCODE = E.NO_SJ
LEFT JOIN (
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            SUM(PRODUCTIONRESERVATION.USEDBASEPRIMARYQUANTITY) AS QTY_BRUTO,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE AS UOM_BAGIKAIN_KG,
            SUM(PRODUCTIONRESERVATION.USEDBASESECONDARYQUANTITY) AS QTY_BRUTO_SECOND,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE AS UOM_BAGIKAIN_SECOND
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE
    ) F ON
    D.CODE = F.ORDERCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        WHERE
            PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'CNP1'
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) G ON
    D.CODE = G.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            ORDERITEMORDERPARTNERLINK.ORDPRNCUSTOMERSUPPLIERCODE,
            ORDERITEMORDERPARTNERLINK.ITEMTYPEAFICODE,
            ORDERITEMORDERPARTNERLINK.SUBCODE01,
            ORDERITEMORDERPARTNERLINK.SUBCODE02,
            ORDERITEMORDERPARTNERLINK.SUBCODE03,
            ORDERITEMORDERPARTNERLINK.SUBCODE04,
            ORDERITEMORDERPARTNERLINK.SUBCODE05,
            ORDERITEMORDERPARTNERLINK.SUBCODE06,
            ORDERITEMORDERPARTNERLINK.SUBCODE07,
            ORDERITEMORDERPARTNERLINK.SUBCODE08,
            ORDERITEMORDERPARTNERLINK.SUBCODE09,
            ORDERITEMORDERPARTNERLINK.SUBCODE10,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION AS NO_ITEM
        FROM
            ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK
    ) H ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = H.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESORDERLINE.ITEMTYPEAFICODE = H.ITEMTYPEAFICODE
    AND SALESORDERLINE.SUBCODE01 = H.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = H.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = H.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = H.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = H.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = H.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = H.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = H.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = H.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = H.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'GSM'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) I ON
    SALESORDERLINE.SUBCODE01 = I.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = I.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = I.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = I.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = I.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = I.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = I.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = I.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = I.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = I.SUBCODE10
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        WHERE
            ADSTORAGE.NAMENAME = 'Width'
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            ADSTORAGE.VALUEDECIMAL
    ) J ON
    SALESORDERLINE.SUBCODE01 = J.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = J.SUBCODE02
    AND SALESORDERLINE.SUBCODE03 = J.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = J.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = J.SUBCODE05
    AND SALESORDERLINE.SUBCODE06 = J.SUBCODE06
    AND SALESORDERLINE.SUBCODE07 = J.SUBCODE07
    AND SALESORDERLINE.SUBCODE08 = J.SUBCODE08
    AND SALESORDERLINE.SUBCODE09 = J.SUBCODE09
    AND SALESORDERLINE.SUBCODE10 = J.SUBCODE10
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            COUNT(ELEMENTSINSPECTION.ELEMENTCODE) AS TOTAL_ROLL,
            SUM(ELEMENTSINSPECTION.WEIGHTNET) AS TOTAL_KG,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) K ON
    D.CODE = K.DEMANDCODE
LEFT JOIN (
        SELECT
            ALLOCATION.LOTCODE,
            ALLOCATION.CODE,
            COUNT(ALLOCATION.ITEMELEMENTCODE) AS TOTAL_ROLL,
            SUM(ALLOCATION.USERPRIMARYQUANTITY) AS TOTAL_KG,
            SUM(ALLOCATION.USERSECONDARYQUANTITY) AS TOTAL_YARD
        FROM
            ALLOCATION ALLOCATION
        WHERE
            LENGTH(TRIM(ALLOCATION.ITEMELEMENTCODE))= 13
                AND ALLOCATION.TEMPLATECODE = '004'
            GROUP BY
                ALLOCATION.LOTCODE,
                ALLOCATION.CODE
    ) L ON
    G.PRODUCTIONORDERCODE = L.LOTCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10))
                ),
                ','
            ) AS TGL_PACKING
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) M ON
    D.CODE = M.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            COUNT(ELEMENTSINSPECTION.ELEMENTCODE) AS TOTAL_ROLL,
            SUM(ELEMENTSINSPECTION.WEIGHTGROSS) AS TOTAL_KG,
            SUM(ELEMENTSINSPECTION.LENGTHGROSS) AS TOTAL_YARD
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 13
                AND ELEMENTSINSPECTION.QUALITYREASONCODE = 'FOC'
            GROUP BY
                ELEMENTSINSPECTION.DEMANDCODE
    ) N ON
    D.CODE = N.DEMANDCODE
LEFT JOIN (
        SELECT
            ELEMENTSINSPECTION.DEMANDCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(LEFT(ELEMENTSINSPECTION.INSPECTIONSTARTDATETIME, 10))
                ),
                ','
            ) AS TGL_INSPEK
        FROM
            ELEMENTSINSPECTION ELEMENTSINSPECTION
        WHERE
            LENGTH(TRIM(ELEMENTSINSPECTION.ELEMENTCODE))= 11
        GROUP BY
            ELEMENTSINSPECTION.DEMANDCODE
    ) O ON
    D.CODE = O.DEMANDCODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEPCOMMENT.PRODEMANDSTEPPRODEMANDCODE,
            CAST(
                PRODUCTIONDEMANDSTEPCOMMENT.COMMENTTEXT AS VARCHAR(5000)
            ) AS COMMENT_INSPEK
        FROM
            PRODUCTIONDEMANDSTEPCOMMENT PRODUCTIONDEMANDSTEPCOMMENT
        WHERE
            PRODUCTIONDEMANDSTEPCOMMENT.PRODUCTIONDEMANDSTEPSTEPNUMBER = 600
    ) P ON
    D.CODE = P.PRODEMANDSTEPPRODEMANDCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.ORDERCODE,
            SALESDOCUMENT.DEFINITIVEDOCUMENTDATE
        FROM
            ALLOCATION ALLOCATION
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    ) Q ON
    L.CODE = Q.CODE
LEFT JOIN (
        SELECT
            ALLOCATION.LOTCODE,
            COUNT(ALLOCATION.ITEMELEMENTCODE) AS TOTAL_ROLL,
            SUM(ALLOCATION.USERPRIMARYQUANTITY) AS TOTAL_KG,
            SUM(ALLOCATION.USERSECONDARYQUANTITY) AS TOTAL_YARD
        FROM
            ALLOCATION ALLOCATION
        WHERE
            LENGTH(TRIM(ALLOCATION.ITEMELEMENTCODE))= 13
                AND ALLOCATION.TEMPLATECODE = '004'
            GROUP BY
                ALLOCATION.LOTCODE
    ) R ON
    G.PRODUCTIONORDERCODE = R.LOTCODE
GROUP BY
    D.CODE,
    G.PRODUCTIONORDERCODE,
    BUSINESSPARTNER.LEGALNAME1,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.SALESORDERCODE,
    H.NO_ITEM,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.ITEMDESCRIPTION,
    I.VALUEDECIMAL,
    J.VALUEDECIMAL,
    A.COLOR,
    B.COLOR_PRT,
    C.COLOR_FKF,
    SALESORDERLINE.SUBCODE05,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    F.QTY_BRUTO,
    O.TGL_INSPEK,
    P.COMMENT_INSPEK,
    M.TGL_PACKING,
    K.TOTAL_ROLL,
    K.TOTAL_KG,
    K.TOTAL_YARD,
    L.TOTAL_ROLL,
    L.TOTAL_KG,
    L.TOTAL_YARD,
    N.TOTAL_ROLL,
    N.TOTAL_KG,
    N.TOTAL_YARD,
    Q.ORDERCODE,
    Q.DEFINITIVEDOCUMENTDATE,
    D.TEMPLATECODE,
    D.EXTERNALREFERENCE,
    D.INTERNALREFERENCE,
    L.CODE,
    R.TOTAL_ROLL,
    R.TOTAL_KG,
    R.TOTAL_YARD;


-- DB2ADMIN.ITXVIEWLAP_BAGIKAINGREIGE source

CREATE VIEW ITXVIEWLAP_BAGIKAINGREIGE AS
SELECT
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.COMPANYCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.PRODUCTIONORDERCODE,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.TRANSACTIONDETAILNUMBER,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.CREATIONDATETIME,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    STOCKTRANSACTION
LEFT JOIN SALESORDER ON
    STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
LEFT JOIN FULLITEMKEYDECODER ON
    STOCKTRANSACTION.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT JOIN ORDERPARTNER ON
    STOCKTRANSACTION.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID;


-- DB2ADMIN.ITXVIEWLAP_KAINJADI source

CREATE VIEW ITXVIEWLAP_KAINJADI AS
SELECT
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.PROJECTCODE,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE05,
    BALANCE.QUALITYLEVELCODE,
    BALANCE.CREATIONDATETIME,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.TRANSACTIONDETAILNUMBER,
    STOCKTRANSACTION.ITEMELEMENTCODE AS STK_ITEMELEMENTCODE,
    STOCKTRANSACTION.DECOSUBCODE05 AS STK_CODE05,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE AS STK_QUALITYLEVELCODE,
    STOCKTRANSACTION.QUALITYREASONCODE,
    STOCKTRANSACTION.PROJECTCODE AS STK_PROJECTCODE,
    SALESORDER.CODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10
FROM
    DB2ADMIN.BALANCE BALANCE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    BALANCE.PHYSICALWAREHOUSECODE = STOCKTRANSACTION.PHYSICALWAREHOUSECODE
    AND
    BALANCE.ELEMENTSCODE = STOCKTRANSACTION.ITEMELEMENTCODE
    AND
    BALANCE.PROJECTCODE = STOCKTRANSACTION.PROJECTCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    STOCKTRANSACTION.ITEMTYPECODE = SALESORDERLINE.ITEMTYPEAFICODE
    AND STOCKTRANSACTION.DECOSUBCODE01 = SALESORDERLINE.SUBCODE01
    AND STOCKTRANSACTION.DECOSUBCODE02 = SALESORDERLINE.SUBCODE02
    AND STOCKTRANSACTION.DECOSUBCODE03 = SALESORDERLINE.SUBCODE03
    AND STOCKTRANSACTION.DECOSUBCODE04 = SALESORDERLINE.SUBCODE04
    AND STOCKTRANSACTION.DECOSUBCODE05 = SALESORDERLINE.SUBCODE05
    AND STOCKTRANSACTION.DECOSUBCODE06 = SALESORDERLINE.SUBCODE06
    AND STOCKTRANSACTION.DECOSUBCODE07 = SALESORDERLINE.SUBCODE07
    AND STOCKTRANSACTION.DECOSUBCODE08 = SALESORDERLINE.SUBCODE08
    AND STOCKTRANSACTION.DECOSUBCODE09 = SALESORDERLINE.SUBCODE09
    AND STOCKTRANSACTION.DECOSUBCODE10 = SALESORDERLINE.SUBCODE10
    AND STOCKTRANSACTION.PROJECTCODE = SALESORDERLINE.SALESORDERCODE
RIGHT JOIN SALESORDER SALESORDER ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE;


-- DB2ADMIN.ITXVIEWLAP_KAINJADIDETAIL source

CREATE VIEW ITXVIEWLAP_KAINJADIDETAIL AS
SELECT
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.CREATIONDATETIME,
    STOCKTRANSACTION.ITEMELEMENTCODE AS STK_ITEMELEMENTCODE,
    STOCKTRANSACTION.DECOSUBCODE05 AS STK_CODE05,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
FROM
    DB2ADMIN.BALANCE BALANCE
LEFT JOIN (
        SELECT
            *
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        WHERE
            STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'M039'
    ) STOCKTRANSACTION ON
    BALANCE.PHYSICALWAREHOUSECODE = STOCKTRANSACTION.PHYSICALWAREHOUSECODE
    AND BALANCE.ELEMENTSCODE = STOCKTRANSACTION.ITEMELEMENTCODE
    AND BALANCE.WAREHOUSELOCATIONCODE = STOCKTRANSACTION.WAREHOUSELOCATIONCODE
    AND BALANCE.WHSLOCATIONWAREHOUSEZONECODE = STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE
    AND BALANCE.QUALITYLEVELCODE = STOCKTRANSACTION.QUALITYLEVELCODE
LEFT JOIN SALESORDER SALESORDER ON
    BALANCE.PROJECTCODE = SALESORDER.CODE
GROUP BY
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.CREATIONDATETIME,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.PHYSICALWAREHOUSECODE,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    SALESORDER.CODE,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE;


-- DB2ADMIN.ITXVIEWLEBAR source

CREATE VIEW ITXVIEWLEBAR AS
SELECT
    s.SALESORDERCODE,
    s.ORDERLINE,
    CASE
        WHEN a.VALUEDECIMAL IS NULL THEN a2.VALUEDECIMAL
        ELSE a.VALUEDECIMAL
    END AS LEBAR
FROM
    SALESORDERLINE s
LEFT JOIN PRODUCT p ON
    p.SUBCODE01 = s.SUBCODE01
    AND p.SUBCODE02 = s.SUBCODE02
    AND p.SUBCODE03 = s.SUBCODE03
    AND p.SUBCODE04 = s.SUBCODE04
    AND p.SUBCODE05 = s.SUBCODE05
    AND p.SUBCODE06 = s.SUBCODE06
    AND p.SUBCODE07 = s.SUBCODE07
    AND p.SUBCODE08 = s.SUBCODE08
    AND p.SUBCODE09 = s.SUBCODE09
    AND p.SUBCODE10 = s.SUBCODE10
    AND p.ITEMTYPECODE = s.ITEMTYPEAFICODE
    AND p.ITEMTYPECODE = 'KFF'
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.NAMENAME = 'Width'
LEFT JOIN PRODUCT p2 ON
    p2.SUBCODE01 = s.SUBCODE01
    AND p2.SUBCODE02 = s.SUBCODE02
    AND p2.SUBCODE03 = s.SUBCODE03
    AND p2.SUBCODE04 = s.SUBCODE04
    AND p2.SUBCODE05 = s.SUBCODE05
    AND p2.SUBCODE06 = s.SUBCODE06
    AND p2.SUBCODE07 = s.SUBCODE07
    AND p2.SUBCODE08 = s.SUBCODE08
    AND p2.SUBCODE09 = s.SUBCODE09
    AND p2.SUBCODE10 = s.SUBCODE10
    AND p2.ITEMTYPECODE = s.ITEMTYPEAFICODE
    AND p2.ITEMTYPECODE = 'FKF'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = p2.ABSUNIQUEID
    AND a2.NAMENAME = 'Width'
    --WHERE s.SALESORDERCODE = 'OPN2200395' AND s.ORDERLINE = 20;


-- DB2ADMIN.ITXVIEWLEBARGRAMASI_GREIGE source

CREATE VIEW ITXVIEWLEBARGRAMASI_GREIGE AS
SELECT
    p.SUBCODE01,
    p.SUBCODE02,
    p.SUBCODE03,
    p.SUBCODE04,
    a.VALUEDECIMAL AS LEBAR,
    a2.VALUEDECIMAL AS GRAMASI
FROM 
    PRODUCT p
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.FIELDNAME = 'Width'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = p.ABSUNIQUEID
    AND a2.FIELDNAME = 'GSM'
WHERE
    --    SUBCODE01 = '$d_ITXVIEWKK[SUBCODE01]' 
    --    AND SUBCODE02 = '$d_ITXVIEWKK[SUBCODE02]' 
    --    AND SUBCODE03 = '$d_ITXVIEWKK[SUBCODE03]'
    --    AND SUBCODE04 = '$d_ITXVIEWKK[SUBCODE04]' 
    --    AND 
    ITEMTYPECODE = 'KGF';


-- DB2ADMIN.ITXVIEWLEBAR_BUKMUTKNT source

CREATE VIEW ITXVIEWLEBAR_BUKMUTKNT AS 
SELECT
    QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE,
    QUALITYDOCLINE.CHARACTERISTICCODE,
    QUALITYDOCLINE.VALUEQUANTITY
FROM
    QUALITYDOCLINE QUALITYDOCLINE
WHERE
    QUALITYDOCLINE.CHARACTERISTICCODE = 'LEBAR1';


-- DB2ADMIN.ITXVIEWLEBAR_BUKMUTKNT_1379 source

CREATE VIEW ITXVIEWLEBAR_BUKMUTKNT_1379 AS 
SELECT
    QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE,
    QUALITYDOCLINE.VALUEQUANTITY AS LEBAR1,
    GSM.VALUEQUANTITY AS GSM1
FROM
    QUALITYDOCLINE
LEFT OUTER JOIN 
(
        SELECT
            QUALITYDOCPRODUCTIONORDERCODE,
            VALUEQUANTITY
        FROM
            QUALITYDOCLINE
        WHERE
            QUALITYDOCUMENTHEADERNUMBERID = '1379'
            AND
    QUALITYDOCLINE.CHARACTERISTICCODE = 'GSM'
            AND 
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KGF'
    ) GSM ON
    GSM.QUALITYDOCPRODUCTIONORDERCODE = QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE
WHERE
    QUALITYDOCUMENTHEADERNUMBERID = '1379'
    AND
	QUALITYDOCLINE.CHARACTERISTICCODE = 'LEBAR1'
    AND
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KGF';


-- DB2ADMIN.ITXVIEWLEBAR_BUKMUTKNT_35 source

CREATE VIEW ITXVIEWLEBAR_BUKMUTKNT_35 AS 
SELECT
    QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE,
    QUALITYDOCLINE.VALUEQUANTITY AS LEBAR1,
    GSM.VALUEQUANTITY AS GSM1
FROM
    QUALITYDOCLINE
LEFT OUTER JOIN 
(
        SELECT
            QUALITYDOCPRODUCTIONORDERCODE,
            VALUEQUANTITY
        FROM
            QUALITYDOCLINE
        WHERE
            QUALITYDOCUMENTHEADERNUMBERID = '35'
            AND
    QUALITYDOCLINE.CHARACTERISTICCODE = 'GSM'
            AND 
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KGF'
    ) GSM ON
    GSM.QUALITYDOCPRODUCTIONORDERCODE = QUALITYDOCLINE.QUALITYDOCPRODUCTIONORDERCODE
WHERE
    QUALITYDOCUMENTHEADERNUMBERID = '35'
    AND
	QUALITYDOCLINE.CHARACTERISTICCODE = 'LEBAR1'
    AND
	QUALITYDOCUMENTITEMTYPEAFICODE = 'KGF';


-- DB2ADMIN.ITXVIEWLOTBENANGKNT source

CREATE VIEW ITXVIEWLOTBENANGKNT AS 
SELECT
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    LISTAGG(
        DISTINCT(
            TRIM(INTERNALDOCUMENTLINE.EXTERNALREFERENCE)
        ),
        ','
    ) AS EXTERNALREFERENCE
FROM
    STOCKTRANSACTION STOCKTRANSACTION
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE 
ON
    STOCKTRANSACTION.ORDERCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
    AND 
STOCKTRANSACTION.ORDERLINE = INTERNALDOCUMENTLINE.ORDERLINE
WHERE
    STOCKTRANSACTION.ORDERCOUNTERCODE = 'I02M50'
GROUP BY
    STOCKTRANSACTION.PROJECTCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.ORDERCODE,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04;


-- DB2ADMIN.ITXVIEWLOTBENANGPEMBANDING source

CREATE VIEW ITXVIEWLOTBENANGPEMBANDING AS 
SELECT
    *
FROM
    ADSTORAGE a
WHERE
    a.FIELDNAME = 'LotBenang';


-- DB2ADMIN.ITXVIEWMUTASIQCF_GKJ source

CREATE VIEW ITXVIEWMUTASIQCF_GKJ AS
SELECT
    GKJ.*
FROM
    (
        SELECT
            *
        FROM
            STOCKTRANSACTION s
        WHERE
            TRANSACTIONDETAILNUMBER = '1'
            AND TEMPLATECODE = '303'
            AND LOGICALWAREHOUSECODE = 'M033'
            AND (
                ITEMTYPECODE = 'KFF'
                    OR ITEMTYPECODE = 'FKF'
            )
    ) QCF
INNER JOIN  
(
        SELECT
            *
        FROM
            STOCKTRANSACTION s
        WHERE
            TRANSACTIONDETAILNUMBER = '2'
            AND TEMPLATECODE = '304'
            AND LOGICALWAREHOUSECODE = 'M031'
            AND (
                ITEMTYPECODE = 'KFF'
                    OR ITEMTYPECODE = 'FKF'
            )
    ) GKJ
ON
    QCF.TRANSACTIONNUMBER = GKJ.TRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEWNODEMANDKGFDESC source

CREATE VIEW ITXVIEWNODEMANDKGFDESC AS
SELECT
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND;


-- DB2ADMIN.ITXVIEWNOSJLOSSORDER source

CREATE VIEW ITXVIEWNOSJLOSSORDER AS
SELECT
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    LISTAGG(
        TRIM(SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE),
        ','
    ) AS NO_SJ
FROM
    SALESDOCUMENTLINE SALESDOCUMENTLINE
GROUP BY
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10;


-- DB2ADMIN.ITXVIEWNOTEYARNDEFECTKNT source

CREATE VIEW ITXVIEWNOTEYARNDEFECTKNT AS
SELECT
    i.INTDOCPROVISIONALCOUNTERCODE,
    i.INTDOCUMENTPROVISIONALCODE,
    i.ORDERLINE,
    a.VALUESTRING
FROM
    (
        SELECT
            i2.*,
            i.ORDPRNCUSTOMERSUPPLIERCODE
        FROM
            INTERNALDOCUMENT i
        LEFT OUTER JOIN INTERNALDOCUMENTLINE i2 ON
            i.PROVISIONALCODE = i2.INTDOCUMENTPROVISIONALCODE
            AND i.PROVISIONALCOUNTERCODE = i2.INTDOCPROVISIONALCOUNTERCODE
    ) i
LEFT OUTER JOIN ADSTORAGE a ON
    a.UNIQUEID = i.ABSUNIQUEID
    AND a.NAMENAME = 'NoteYarnDefect'
WHERE
    i.ORDPRNCUSTOMERSUPPLIERCODE = 'M011';


-- DB2ADMIN.ITXVIEWORDERITEMLINKACTIVE source

CREATE VIEW ITXVIEWORDERITEMLINKACTIVE AS
SELECT
    ORDERITEMORDERPARTNERLINK.*
FROM
    ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK
WHERE
    ORDERITEMORDERPARTNERLINK.INACTIVE <> 1;


-- DB2ADMIN.ITXVIEWORDERPARTNERLINKACTIVE source

CREATE VIEW ITXVIEWORDERPARTNERLINKACTIVE AS
SELECT
    *
FROM
    ORDERITEMORDERPARTNERLINK
WHERE
    INACTIVE = '0';


-- DB2ADMIN.ITXVIEWPACKINGLIST_EXIM source

CREATE VIEW ITXVIEWPACKINGLIST_EXIM AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.NUMBERPLATE AS VESSEL_NM,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.ABSUNIQUEID,
    SALESORDER.PROJECTCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    LOGICALWAREHOUSE.CODE AS LOGICALWAREHOUSE_CODE,
    LOGICALWAREHOUSE.LONGDESCRIPTION,
    ALLOCATION.CODE,
    ALLOCATION.LOTCODE,
    ALLOCATION.DESTINATIONTYPE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE,
    ALLOCATION.ITEMELEMENTCODE,
    BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1 AS PARTNER_ADDRES1,
    BUSINESSPARTNER.ADDRESSLINE2 AS PARTNER_ADDRES2,
    BUSINESSPARTNER.ADDRESSLINE3 AS PARTNER_ADDRES3,
    BUSINESSPARTNER.ADDRESSLINE4 AS PARTNER_ADDRES4,
    BUSINESSPARTNER.TOWN AS PARTNER_TOWN,
    BUSINESSPARTNER.DISTRICT AS PARTNER_DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERM_DESC,
    USERGENERICGROUP.LONGDESCRIPTION AS COLOR_DESC,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESORDER.CODE = SALESDOCUMENTLINE.PROJECTCODE
    AND SALESORDER.EXTERNALREFERENCE = SALESDOCUMENTLINE.EXTERNALREFERENCE
    AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
WHERE
    ALLOCATION.ORDERCODE IS NOT NULL;


-- DB2ADMIN.ITXVIEWPMPRVMNT source

CREATE VIEW ITXVIEWPMPRVMNT AS 
SELECT
    PMPRVMNT.CODE,
    PMSCHEDULING.SCHEDULEDDATE,
    PMPRVMNT.EFFECTIVESTARTDATE,
    PMPRVMNT.SHORTDESCRIPTION,
    PMBOM.LONGDESCRIPTION AS DESC_MC,
    PMACTIVITY.LONGDESCRIPTION,
    CASE
        WHEN PMSCHEDULING.STATUS = '1' THEN 'Open'
        WHEN PMSCHEDULING.STATUS = '2' THEN 'In Progress'
        WHEN PMSCHEDULING.STATUS = '3' THEN 'Closed'
        WHEN PMSCHEDULING.STATUS = '4' THEN 'Suspended'
    END AS STATUS
FROM
    PMPRVMNT PMPRVMNT
LEFT JOIN PMPRVMNTMACHINE PMPRVMNTMACHINE ON
    PMPRVMNT.CODE = PMPRVMNTMACHINE.PMPRVMNTCODE
LEFT JOIN PMBOM PMBOM ON
    PMPRVMNTMACHINE.PMBOMCODE = PMBOM.CODE
LEFT JOIN PMPRVMNTDETAILS PMPRVMNTDETAILS ON
    PMPRVMNT.CODE = PMPRVMNTDETAILS.PMPRVMNTCODE
LEFT JOIN PMACTIVITY PMACTIVITY ON
    PMPRVMNTDETAILS.ACTIVITYCODE = PMACTIVITY.CODE
LEFT JOIN PMSCHEDULING PMSCHEDULING ON
    PMPRVMNTMACHINE.PMPRVMNTCODE = PMSCHEDULING.PREVENTIVEMAINTENANCECODE
GROUP BY
    PMPRVMNT.CODE,
    PMSCHEDULING.SCHEDULEDDATE,
    PMPRVMNT.EFFECTIVESTARTDATE,
    PMPRVMNT.SHORTDESCRIPTION,
    PMBOM.LONGDESCRIPTION,
    PMACTIVITY.LONGDESCRIPTION,
    PMSCHEDULING.STATUS;


-- DB2ADMIN.ITXVIEWPMWORKORDERJOBCARD source

CREATE VIEW ITXVIEWPMWORKORDERJOBCARD AS
SELECT
    COMPANYCODE,
    LINENO,
    WORKORDERCOUNTERCODE,
    WORKORDERCODE,
    PLANTCODE,
    DEPARTMENTCODE ,
    DIVISONCODE,
    PMBOMCOUNTERCODE,
    PMBOMCODE,
    ACTIVITYCOUNTERCODE,
    ACTIVITYCODE,
    WORKORDERMACHINECOUNTER,
    WORKORDERMACHINECODE,
    ACTIVITYGROUPCOUNTERCODE,
    WORKORDERSTATUS,
    ACTUALDURATION,
    ACTUALDURATIONUOM,
    STARTDATE ,
    ENDDATE,
    PLANNEDDURATIONUOM,
    PLANNEDDURATION,
    WORKORDERDATE,
    WORKORDERFOR,
    "SEQUENCE" ,
    SUBSEQUENCE,
    REMARKS
FROM
    DB2ADMIN.PMWRKWORKORDERJOBCARDRPT
GROUP BY
    COMPANYCODE,
    LINENO,
    WORKORDERCOUNTERCODE,
    WORKORDERCODE,
    PLANTCODE,
    DEPARTMENTCODE ,
    DIVISONCODE,
    PMBOMCOUNTERCODE,
    PMBOMCODE,
    ACTIVITYCOUNTERCODE,
    ACTIVITYCODE,
    WORKORDERMACHINECOUNTER,
    WORKORDERMACHINECODE,
    ACTIVITYGROUPCOUNTERCODE,
    WORKORDERSTATUS,
    ACTUALDURATION,
    ACTUALDURATIONUOM,
    STARTDATE ,
    ENDDATE,
    PLANNEDDURATIONUOM,
    PLANNEDDURATION,
    WORKORDERDATE,
    WORKORDERFOR,
    "SEQUENCE" ,
    SUBSEQUENCE,
    REMARKS;


-- DB2ADMIN.ITXVIEWPOGREIGE source

CREATE VIEW ITXVIEWPOGREIGE AS
SELECT
    ALLOCATION.LOTCODE,
    ALLOCATION.ITEMTYPECODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.PROJECTCODE
FROM
    ALLOCATION ALLOCATION
WHERE
    ALLOCATION.ITEMTYPECODE = 'KGF'
    AND ALLOCATION.STOCKTYPECODE = 'AFW'
GROUP BY
    ALLOCATION.LOTCODE,
    ALLOCATION.ITEMTYPECODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.PROJECTCODE;


-- DB2ADMIN.ITXVIEWPOGREIGENEW source

CREATE VIEW ITXVIEWPOGREIGENEW AS   
SELECT
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    A.LOTCODE,
    B.CODE AS DEMAND_KGF
FROM
    SALESORDERLINE SALESORDERLINE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND
ON
    SALESORDERLINE.SALESORDERCODE = PRODUCTIONDEMAND.DLVSALORDERLINESALESORDERCODE
    AND 
SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
LEFT JOIN ALLOCATION ALLOCATION 
ON
    SALESORDERLINE.SALESORDERCODE = ALLOCATION.PROJECTCODE
    AND PRODUCTIONDEMAND.CODE = ALLOCATION.ORDERCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.STOCKTYPECODE = 'AFW'
    ) A ON
    ALLOCATION.CODE = A.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ITEMTYPEAFICODE,
            PRODUCTIONDEMAND.SUBCODE01,
            PRODUCTIONDEMAND.SUBCODE02,
            PRODUCTIONDEMAND.SUBCODE03,
            PRODUCTIONDEMAND.SUBCODE04,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KGF'
    ) B ON
    B.SUBCODE01 = SALESORDERLINE.SUBCODE01
    AND 
B.SUBCODE02 = SALESORDERLINE.SUBCODE02
    AND 
B.SUBCODE03 = SALESORDERLINE.SUBCODE03
    AND 
B.ORIGDLVSALORDLINESALORDERCODE = SALESORDERLINE.SALESORDERCODE
    AND  
B.ORIGDLVSALORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
GROUP BY
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    A.LOTCODE,
    B.CODE;


-- DB2ADMIN.ITXVIEWPOGREIGENEW2 source

CREATE VIEW ITXVIEWPOGREIGENEW2 AS   
SELECT
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    A.LOTCODE,
    B.CODE AS DEMAND_KGF
FROM
    SALESORDERLINE SALESORDERLINE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND
ON
    SALESORDERLINE.SALESORDERCODE = PRODUCTIONDEMAND.DLVSALORDERLINESALESORDERCODE
    AND 
SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
LEFT JOIN ALLOCATION ALLOCATION 
ON
    PRODUCTIONDEMAND.CODE = ALLOCATION.ORDERCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.STOCKTYPECODE = 'AFW'
    ) A ON
    ALLOCATION.CODE = A.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ITEMTYPEAFICODE,
            PRODUCTIONDEMAND.SUBCODE01,
            PRODUCTIONDEMAND.SUBCODE02,
            PRODUCTIONDEMAND.SUBCODE03,
            PRODUCTIONDEMAND.SUBCODE04,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KGF'
    ) B ON
    B.SUBCODE01 = SALESORDERLINE.SUBCODE01
    AND 
B.SUBCODE02 = SALESORDERLINE.SUBCODE02
    AND 
B.SUBCODE03 = SALESORDERLINE.SUBCODE03
    AND 
B.ORIGDLVSALORDLINESALORDERCODE = SALESORDERLINE.SALESORDERCODE
    AND  
B.ORIGDLVSALORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
GROUP BY
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    A.LOTCODE,
    B.CODE;


-- DB2ADMIN.ITXVIEWPOGREIGENEW3 source

CREATE VIEW ITXVIEWPOGREIGENEW3 AS   
SELECT 
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    SALESORDERLINE.ABSUNIQUEID,
    LISTAGG(
        DISTINCT(
            TRIM(A.PROJECTCODE)
        ),
        ','
    ) AS PROJECTCODE,
    LISTAGG(
        TRIM(A.LOTCODE),
        ','
    ) AS LOTCODE,
    C.CREMARKS,
    CASE
        WHEN D.KAIN_AKJ = '1' THEN NULL
        WHEN C.CREMARKS LIKE '%AKJ%' THEN NULL
        ELSE B.CODE
    END AS DEMAND_KGF
FROM
    SALESORDERLINE SALESORDERLINE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    SALESORDERLINE.SALESORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE
    AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN ALLOCATION ALLOCATION ON
    PRODUCTIONDEMAND.CODE = ALLOCATION.ORDERCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE,
            ALLOCATION.PROJECTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.STOCKTYPECODE = 'AFW'
            AND ALLOCATION.ITEMTYPECODE = 'KGF'
    ) A ON
    ALLOCATION.CODE = A.CODE
LEFT JOIN (
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.ITEMTYPEAFICODE,
            PRODUCTIONDEMAND.SUBCODE01,
            PRODUCTIONDEMAND.SUBCODE02,
            PRODUCTIONDEMAND.SUBCODE03,
            PRODUCTIONDEMAND.SUBCODE04,
            PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KGF'
    ) B ON
    B.SUBCODE01 = SALESORDERLINE.SUBCODE01
    AND B.SUBCODE02 = SALESORDERLINE.SUBCODE02
    AND B.SUBCODE03 = SALESORDERLINE.SUBCODE03
    AND B.ORIGDLVSALORDLINESALORDERCODE = SALESORDERLINE.SALESORDERCODE
    AND B.ORIGDLVSALORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS CREMARKS
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ColorRemarks'
    ) C ON
    SALESORDERLINE.ABSUNIQUEID = C.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS KAIN_AKJ
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'KainAKJ'
    ) D ON
    SALESORDERLINE.ABSUNIQUEID = D.UNIQUEID
WHERE
    A.LOTCODE IS NOT NULL
    OR A.PROJECTCODE IS NOT NULL
    OR B.CODE IS NOT NULL
GROUP BY
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.CREATIONDATETIME,
    SALESORDERLINE.ABSUNIQUEID,
    B.CODE,
    C.CREMARKS,
    D.KAIN_AKJ;


-- DB2ADMIN.ITXVIEWPOSELESAI source

CREATE VIEW ITXVIEWPOSELESAI AS
SELECT
    SALESORDER.COMPANYCODE,
    SALESORDER.REQUIREDDUEDATE,
    CASE
        WHEN SALESORDER.EXTERNALREFERENCE IS NULL THEN SALESORDERLINE.EXTERNALREFERENCE
        ELSE SALESORDER.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10,
    SUM(SALESORDERLINE.USERPRIMARYQUANTITY) AS QTY_BUTUH_KG,
    SALESORDERLINE.USERPRIMARYUOMCODE AS UOM_BUTUH_KG,
    SUM(SALESORDERLINE.USERSECONDARYQUANTITY) AS QTY_BUTUH_SECOND,
    SALESORDERLINE.USERSECONDARYUOMCODE AS UOM_BUTUH_SECOND,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    CASE
        WHEN SALESORDERLINE.SUBCODE07 = '-' THEN A.COLOR
        WHEN SALESORDERLINE.SUBCODE07 <> '-'
        OR SALESORDERLINE.SUBCODE07 <> '' THEN B.COLOR_PRT
        WHEN SALESORDERLINE.ITEMTYPEAFICODE = 'FKF' THEN C.COLOR_FKF
        ELSE ''
    END AS WARNA,
    D.CODE,
    E.NO_SJ, 
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE AS TGL_KIRIM_SJ,
    D.QTY_PACKING_KG,
    D.UOM_PACKING_KG,
    D.QTY_PACKING_SECOND,
    D.UOM_PACKING_SECOND,
    E.QTY_KIRIM_KG,
    E.UOM_KIRIM_KG,
    E.QTY_KIRIM_SECOND,
    E.UOM_KIRIM_SECOND,
    F.QTY_BAGIKAIN_KG,
    F.UOM_BAGIKAIN_KG,
    F.QTY_BAGIKAIN_SECOND,
    F.UOM_BAGIKAIN_SECOND
FROM
    SALESORDER SALESORDER
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            USERGENERICGROUP.CODE,
            USERGENERICGROUP.LONGDESCRIPTION AS COLOR
        FROM
            USERGENERICGROUP USERGENERICGROUP
        WHERE
            USERGENERICGROUP.USERGENERICGROUPTYPECODE = 'CL1'
    ) A ON
    SALESORDERLINE.SUBCODE05 = A.CODE
LEFT JOIN 
	(
        SELECT
            DESIGN.SUBCODE01,
            DESIGNCOMPONENT.VARIANTCODE,
            DESIGNCOMPONENT.SHORTDESCRIPTION AS COLOR_PRT
        FROM
            DESIGN DESIGN
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            DESIGN.NUMBERID = DESIGNCOMPONENT.DESIGNNUMBERID
            AND 
	DESIGN.SUBCODE01 = DESIGNCOMPONENT.DESIGNSUBCODE01
    ) B
ON
    SALESORDERLINE.SUBCODE07 = B.SUBCODE01
    AND SALESORDERLINE.SUBCODE08 = B.VARIANTCODE
LEFT JOIN 
	(
        SELECT
            PRODUCT.ITEMTYPECODE,
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            CASE
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) = 0 THEN ''
                WHEN LOCATE('-', PRODUCT.SHORTDESCRIPTION) > 0 THEN SUBSTR(PRODUCT.SHORTDESCRIPTION , 1, LOCATE('-', PRODUCT.SHORTDESCRIPTION)-1)
                ELSE ''
            END AS COLOR_FKF
        FROM
            PRODUCT PRODUCT
        WHERE
            PRODUCT.ITEMTYPECODE = 'FKF'
    ) C
ON
    SALESORDERLINE.ITEMTYPEAFICODE = C.ITEMTYPECODE
    AND SALESORDERLINE.SUBCODE01 = C.SUBCODE01
    AND SALESORDERLINE.SUBCODE02 = C.SUBCODE02
    AND 
SALESORDERLINE.SUBCODE03 = C.SUBCODE03
    AND SALESORDERLINE.SUBCODE04 = C.SUBCODE04
    AND SALESORDERLINE.SUBCODE05 = C.SUBCODE05
LEFT JOIN 
	(
        SELECT
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            SUM(PRODUCTIONDEMAND.ENTEREDBASEPRIMARYQUANTITY) AS QTY_PACKING_KG,
            PRODUCTIONDEMAND.BASEPRIMARYUOMCODE AS UOM_PACKING_KG,
            SUM(PRODUCTIONDEMAND.ENTEREDBASESECONDARYQUANTITY) AS QTY_PACKING_SECOND,
            PRODUCTIONDEMAND.BASESECONDARYUOMCODE AS UOM_PACKING_SECOND
        FROM
            PRODUCTIONDEMAND PRODUCTIONDEMAND
        WHERE
            PRODUCTIONDEMAND.ITEMTYPEAFICODE = 'KFF'
        GROUP BY
            PRODUCTIONDEMAND.CODE,
            PRODUCTIONDEMAND.PROJECTCODE,
            PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
            PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
            PRODUCTIONDEMAND.BASESECONDARYUOMCODE
    ) D
ON
    SALESORDERLINE.SALESORDERCODE = D.PROJECTCODE
    AND SALESORDERLINE.ORDERLINE = D.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN 
	(
        SELECT
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE AS NO_SJ,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASEPRIMARYQUANTITY) AS QTY_KIRIM_KG,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE AS UOM_KIRIM_KG,
            SUM(SALESDOCUMENTLINE.SHIPPEDBASESECONDARYQUANTITY) AS QTY_KIRIM_SECOND,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE AS UOM_KIRIM_SECOND
        FROM
            SALESDOCUMENTLINE SALESDOCUMENTLINE
        WHERE
            SALESDOCUMENTLINE.PREVIOUSORIGINFROM = '1'
        GROUP BY
            SALESDOCUMENTLINE.PROJECTCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            SALESDOCUMENTLINE.SUBCODE09,
            SALESDOCUMENTLINE.SUBCODE10,
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTLINE.BASEPRIMARYUOMCODE,
            SALESDOCUMENTLINE.BASESECONDARYUOMCODE
    ) E
 ON
    SALESORDERLINE.SALESORDERCODE = E.PROJECTCODE
    AND 
	SALESORDERLINE.ITEMTYPEAFICODE = E.ITEMTYPEAFICODE
    AND 
	SALESORDERLINE.SUBCODE01 = E.SUBCODE01
    AND 
	SALESORDERLINE.SUBCODE02 = E.SUBCODE02
    AND 
	SALESORDERLINE.SUBCODE03 = E.SUBCODE03
    AND
	SALESORDERLINE.SUBCODE04 = E.SUBCODE04
    AND
	SALESORDERLINE.SUBCODE05 = E.SUBCODE05
    AND
	SALESORDERLINE.SUBCODE06 = E.SUBCODE06
    AND
	SALESORDERLINE.SUBCODE07 = E.SUBCODE07
    AND
	SALESORDERLINE.SUBCODE08 = E.SUBCODE08
    AND
	SALESORDERLINE.SUBCODE09 = E.SUBCODE09
    AND
	SALESORDERLINE.SUBCODE10 = E.SUBCODE10
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    SALESDOCUMENT.PROVISIONALCODE = E.NO_SJ
LEFT JOIN 
	(
        SELECT
            PRODUCTIONRESERVATION.ORDERCODE,
            SUM(PRODUCTIONRESERVATION.USEDBASEPRIMARYQUANTITY) AS QTY_BAGIKAIN_KG,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE AS UOM_BAGIKAIN_KG,
            SUM(PRODUCTIONRESERVATION.USEDBASESECONDARYQUANTITY) AS QTY_BAGIKAIN_SECOND,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE AS UOM_BAGIKAIN_SECOND
        FROM
            PRODUCTIONRESERVATION PRODUCTIONRESERVATION
        WHERE
            PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            PRODUCTIONRESERVATION.ORDERCODE,
            PRODUCTIONRESERVATION.BASEPRIMARYUOMCODE,
            PRODUCTIONRESERVATION.BASESECONDARYUOMCODE
    ) F
ON
    D.CODE = F.ORDERCODE
GROUP BY
    SALESORDER.COMPANYCODE,
    SALESORDER.REQUIREDDUEDATE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10,
    SALESORDERLINE.USERPRIMARYUOMCODE,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    A.COLOR,
    B.COLOR_PRT,
    C.COLOR_FKF,
    D.CODE,
    E.NO_SJ,
    D.QTY_PACKING_KG,
    D.UOM_PACKING_KG,
    D.QTY_PACKING_SECOND,
    D.UOM_PACKING_SECOND,
    E.QTY_KIRIM_KG,
    E.UOM_KIRIM_KG,
    E.QTY_KIRIM_SECOND,
    E.UOM_KIRIM_SECOND,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    F.QTY_BAGIKAIN_KG,
    F.UOM_BAGIKAIN_KG,
    F.QTY_BAGIKAIN_SECOND,
    F.UOM_BAGIKAIN_SECOND;


-- DB2ADMIN.ITXVIEWPRODUCTIONRESERVATIONCOMMENTLOT source

CREATE VIEW ITXVIEWPRODUCTIONRESERVATIONCOMMENTLOT AS
SELECT
    COMMENTTEXT,
    PRODUCTIONRESERVATIONORDERCODE,
    PRORESERVATIONRESERVATIONLINE
FROM
    PRODUCTIONRESERVATIONCOMMENT
WHERE
    CODE = 'PD002';


-- DB2ADMIN.ITXVIEWPRODUCTIONRESERVATIONCOMMENTSUPP source

CREATE VIEW ITXVIEWPRODUCTIONRESERVATIONCOMMENTSUPP AS
SELECT
    COMMENTTEXT,
    PRODUCTIONRESERVATIONORDERCODE,
    PRORESERVATIONRESERVATIONLINE
FROM
    PRODUCTIONRESERVATIONCOMMENT
WHERE
    CODE = 'PD001';


-- DB2ADMIN.ITXVIEWPROD_SUFFIX source

CREATE VIEW ITXVIEWPROD_SUFFIX AS
SELECT
    p.CREATIONDATETIME,
    i.DEAMAND,
    p.PRODUCTIONORDERCODE,
    i2.USEDUSERPRIMARYQUANTITY AS QTY_BAGIKAIN,
    p.SUBCODE01,
    p.SUFFIXCODE
FROM
    PRODUCTIONORDERRESERVATION p
LEFT JOIN ITXVIEWKK i ON
    i.PRODUCTIONORDERCODE = p.PRODUCTIONORDERCODE
LEFT JOIN PRODUCTIONRESERVATION i2 ON
    i2.ORDERCODE = i.DEAMAND
    AND i2.ITEMTYPEAFICODE = 'KGF';


-- DB2ADMIN.ITXVIEWPROJECTBONORDER source

CREATE VIEW ITXVIEWPROJECTBONORDER AS  
SELECT
    PRODUCTIONDEMAND.ABSUNIQUEID,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    CASE
        WHEN A.PRO1 IS NULL THEN '-'
        ELSE A.PRO1
    END AS PRO1,
    B.PRO2,
    C.PRO3,
    D.PRO4,
    CASE
        WHEN E.RMPNOTE IS NULL THEN '-'
        ELSE E.RMPNOTE
    END AS RMPNOTE,
    CASE
        WHEN Floor(F.RMPQTY) IS NULL THEN 0
        ELSE Floor(F.RMPQTY)
    END AS QTY,
    CASE
        WHEN p.ITEMTYPEAFICODE = 'KGF'
        AND TRIM(p.SUBCODE04) = 'D01' THEN 'Dark'
        WHEN p.ITEMTYPEAFICODE = 'KGF'
        AND TRIM(p.SUBCODE04) = 'L01' THEN 'Light'
        ELSE '-'
    END AS DL
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS PRO1
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllow'
    ) A ON
    PRODUCTIONDEMAND.ABSUNIQUEID = A.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS PRO2
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllow2'
    ) B ON
    PRODUCTIONDEMAND.ABSUNIQUEID = B.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS PRO3
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllow3'
    ) C ON
    PRODUCTIONDEMAND.ABSUNIQUEID = C.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS PRO4
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllow4'
    ) D ON
    PRODUCTIONDEMAND.ABSUNIQUEID = D.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS RMPNOTE
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'RMPNote'
    ) E ON
    PRODUCTIONDEMAND.ABSUNIQUEID = E.UNIQUEID
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUEDECIMAL AS RMPQTY
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'ProAllowQty'
    ) F ON
    PRODUCTIONDEMAND.ABSUNIQUEID = F.UNIQUEID
LEFT JOIN PRODUCTIONDEMAND p ON
    p.ITEMTYPEAFICODE = 'KGF'
    AND p.ORIGDLVSALORDLINESALORDERCODE = PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE
    AND p.ORIGDLVSALORDERLINEORDERLINE = PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
    --WHERE PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300392' 
    --AND PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = 120 
GROUP BY
    PRODUCTIONDEMAND.ABSUNIQUEID,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    A.PRO1,
    B.PRO2,
    C.PRO3,
    D.PRO4,
    E.RMPNOTE,
    F.RMPQTY,
    p.ITEMTYPEAFICODE,
    p.SUBCODE04;


-- DB2ADMIN.ITXVIEWPROJECTBONORDER2 source

CREATE VIEW ITXVIEWPROJECTBONORDER2 AS 
SELECT
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT
FROM
    ITXVIEWPROJECTBONORDER i
LEFT JOIN ITXVIEWJENISBENANGRMP i1 ON
    i1.ORIGDLVSALORDLINESALORDERCODE = i.PRO1
WHERE
    i.PRO1 IS NOT NULL
    --    AND i.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300168' 
    --    AND i.SUBCODE01 = 'CVCX' 
    --    AND i.SUBCODE02 = 'DKI' 
    --    AND i.SUBCODE03 = '22047' 
    --    AND i.SUBCODE04 = 'D01'
GROUP BY
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.PRO1,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT;


-- DB2ADMIN.ITXVIEWPROJECTBONORDER3 source

CREATE VIEW ITXVIEWPROJECTBONORDER3 AS 
SELECT
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.PRO2,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT
FROM
    ITXVIEWPROJECTBONORDER i
LEFT JOIN ITXVIEWJENISBENANGRMP i1 ON
    i1.ORIGDLVSALORDLINESALORDERCODE = i.PRO2
WHERE
    i.PRO2 IS NOT NULL
    --AND i.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300065' 
    --AND i.SUBCODE01 = 'T' 
    --AND i.SUBCODE02 = 'DKF' 
    --AND i.SUBCODE03 = '22035' 
    --AND i.SUBCODE04 = 'D01'
GROUP BY
    i.CODE,
    i.ORIGDLVSALORDLINESALORDERCODE,
    i.PRO2,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i1.SUMMARIZEDDESCRIPTION,
    i1.COMMENTTEXT;


-- DB2ADMIN.ITXVIEWQTYBAGIKAIN source

CREATE VIEW ITXVIEWQTYBAGIKAIN AS 
SELECT
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.TEMPLATECODE,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    CASE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '310'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USEDUSERPRIMARYQUANTITY
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USEDUSERPRIMARYQUANTITY
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NULL THEN PRODUCTIONRESERVATION.USEDUSERPRIMARYQUANTITY
    END AS USERPRIMARYQUANTITY,
    CASE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '310'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USERPRIMARYUOMCODE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USERPRIMARYUOMCODE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NULL THEN PRODUCTIONRESERVATION.USERPRIMARYUOMCODE
    END AS USERPRIMARYUOMCODE,
    CASE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '310'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USEDUSERSECONDARYQUANTITY
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USEDUSERSECONDARYQUANTITY
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NULL THEN PRODUCTIONRESERVATION.USEDUSERSECONDARYQUANTITY
    END AS USERSECONDARYQUANTITY,
    CASE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '310'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USERSECONDARYUOMCODE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NOT NULL THEN PRODUCTIONRESERVATION.USERSECONDARYUOMCODE
        WHEN PRODUCTIONDEMAND.TEMPLATECODE = '300'
        AND PRODUCTIONDEMAND.EXTERNALREFERENCE IS NULL THEN PRODUCTIONRESERVATION.USERSECONDARYUOMCODE
    END AS USERSECONDARYUOMCODE
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION 
ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
WHERE
    (
        PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
            OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KFF'
    );


-- DB2ADMIN.ITXVIEWQTYBAGIKAINGABUNG source

CREATE VIEW ITXVIEWQTYBAGIKAINGABUNG AS 
SELECT
    PRODUCTIONORDER.CODE,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    SUM(PRODUCTIONRESERVATION.USEDUSERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    SUM(PRODUCTIONRESERVATION.USEDUSERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
    PRODUCTIONRESERVATION.USERSECONDARYUOMCODE
FROM
    PRODUCTIONORDER PRODUCTIONORDER
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION 
ON
    PRODUCTIONORDER.CODE = PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
WHERE
    (
        PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
            OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KFF'
    )
GROUP BY
    PRODUCTIONORDER.CODE,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    PRODUCTIONRESERVATION.USERSECONDARYUOMCODE;


-- DB2ADMIN.ITXVIEWQTYBENANGWARNA source

CREATE VIEW ITXVIEWQTYBENANGWARNA AS 
SELECT
    ORDERCODE,
    ORDERLINE,
    COUNT(ITEMELEMENTCODE) AS DUS,
    SUM(USERPRIMARYQUANTITY)AS QTY,
    LOTCODE
FROM
    STOCKTRANSACTION
WHERE
    LOGICALWAREHOUSECODE = 'P504'
GROUP BY
    ORDERCODE,
    ORDERLINE,
    LOTCODE;


-- DB2ADMIN.ITXVIEWQUADOCLINE source

CREATE VIEW ITXVIEWQUADOCLINE AS
SELECT
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERNUMBERID,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.TESTLINESTATUS,
    QUALITYDOCLINE.CHARACTERISTICCODE
FROM
    QUALITYDOCLINE QUALITYDOCLINE;


-- DB2ADMIN.ITXVIEWRECIPECONCENTRATION source

CREATE VIEW ITXVIEWRECIPECONCENTRATION AS
SELECT
    ITXVIEWRECIPEHEADER.CODE,
    ITXVIEWRECIPEHEADER.ORDERCODE,
    ITXVIEWRECIPEHEADER.PROJECTCODE,
    ITXVIEWRECIPEHEADER.COLOR_NO,
    ITXVIEWRECIPEHEADER.WARNA,
    ITXVIEWRECIPEHEADER.INITIALUSERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.RESERVATIONLINE,
    PRODUCTIONRESERVATION.STEPNUMBER,
    PRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE,
    PRODUCTIONRESERVATION.WAREHOUSECODE,
    PRODUCTIONRESERVATION.ISSUEDATE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    PRODUCTIONRESERVATION.SUBCODE01,
    PRODUCTIONRESERVATION.SUBCODE02,
    PRODUCTIONRESERVATION.SUBCODE03,
    PRODUCTIONRESERVATION.SUBCODE04,
    PRODUCTIONRESERVATION.SUBCODE05,
    PRODUCTIONRESERVATION.SUFFIXCODE,
    PRODUCTIONRESERVATION.FULLITEMIDENTIFIER,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    PRODUCTIONRESERVATION.USERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    PRODUCTIONRESERVATION.GROUPLINE,
    PRODUCTIONRESERVATION.GROUPSTEPNUMBER,
    PRODUCTIONRESERVATION.HEADERLINELINK
FROM
    ITXVIEWRECIPEHEADER ITXVIEWRECIPEHEADER
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    ITXVIEWRECIPEHEADER.HEADERLINELINK = PRODUCTIONRESERVATION.HEADERLINELINK
    AND ITXVIEWRECIPEHEADER.CODE = PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONRESERVATION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
GROUP BY
    ITXVIEWRECIPEHEADER.CODE,
    ITXVIEWRECIPEHEADER.ORDERCODE,
    ITXVIEWRECIPEHEADER.PROJECTCODE,
    ITXVIEWRECIPEHEADER.COLOR_NO,
    ITXVIEWRECIPEHEADER.WARNA,
    ITXVIEWRECIPEHEADER.INITIALUSERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.RESERVATIONLINE,
    PRODUCTIONRESERVATION.STEPNUMBER,
    PRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE,
    PRODUCTIONRESERVATION.WAREHOUSECODE,
    PRODUCTIONRESERVATION.ISSUEDATE,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    PRODUCTIONRESERVATION.SUBCODE01,
    PRODUCTIONRESERVATION.SUBCODE02,
    PRODUCTIONRESERVATION.SUBCODE03,
    PRODUCTIONRESERVATION.SUBCODE04,
    PRODUCTIONRESERVATION.SUBCODE05,
    PRODUCTIONRESERVATION.SUFFIXCODE,
    PRODUCTIONRESERVATION.FULLITEMIDENTIFIER,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    PRODUCTIONRESERVATION.USERPRIMARYQUANTITY,
    PRODUCTIONRESERVATION.USERPRIMARYUOMCODE,
    PRODUCTIONRESERVATION.GROUPLINE,
    PRODUCTIONRESERVATION.GROUPSTEPNUMBER,
    PRODUCTIONRESERVATION.HEADERLINELINK;


-- DB2ADMIN.ITXVIEWRECIPEHEADER source

CREATE VIEW ITXVIEWRECIPEHEADER AS
SELECT
    PRODUCTIONORDER.CODE,
    PRODUCTIONRESERVATION.ORDERCODE,
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.SUBCODE05 AS COLOR_NO,
    A.WARNA,
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    PRODUCTIONRESERVATION.SUBCODE01,
    PRODUCTIONRESERVATION.SUFFIXCODE,
    PRODUCTIONRESERVATION.HEADERLINELINK,
    PRODUCTIONDEMANDSTEP.INITIALUSERPRIMARYQUANTITY
FROM
    PRODUCTIONORDER PRODUCTIONORDER
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    PRODUCTIONORDER.CODE = PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONRESERVATION.ORDERCODE = PRODUCTIONDEMAND.CODE
LEFT JOIN (
        SELECT
            ITXVIEWCOLOR.ITEMTYPECODE,
            ITXVIEWCOLOR.SUBCODE01,
            ITXVIEWCOLOR.SUBCODE02,
            ITXVIEWCOLOR.SUBCODE03,
            ITXVIEWCOLOR.SUBCODE04,
            ITXVIEWCOLOR.SUBCODE05,
            ITXVIEWCOLOR.SUBCODE06,
            ITXVIEWCOLOR.SUBCODE07,
            ITXVIEWCOLOR.SUBCODE08,
            ITXVIEWCOLOR.SUBCODE09,
            ITXVIEWCOLOR.SUBCODE10,
            ITXVIEWCOLOR.WARNA
        FROM
            ITXVIEWCOLOR ITXVIEWCOLOR
    ) A ON
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = A.ITEMTYPECODE
    AND PRODUCTIONDEMAND.SUBCODE01 = A.SUBCODE01
    AND PRODUCTIONDEMAND.SUBCODE02 = A.SUBCODE02
    AND PRODUCTIONDEMAND.SUBCODE03 = A.SUBCODE03
    AND PRODUCTIONDEMAND.SUBCODE04 = A.SUBCODE04
    AND PRODUCTIONDEMAND.SUBCODE05 = A.SUBCODE05
    AND PRODUCTIONDEMAND.SUBCODE06 = A.SUBCODE06
    AND PRODUCTIONDEMAND.SUBCODE07 = A.SUBCODE07
    AND PRODUCTIONDEMAND.SUBCODE08 = A.SUBCODE08
    AND PRODUCTIONDEMAND.SUBCODE09 = A.SUBCODE09
    AND PRODUCTIONDEMAND.SUBCODE10 = A.SUBCODE10
LEFT JOIN PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP ON
    PRODUCTIONORDER.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE
    AND PRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE = PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE
WHERE
    PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'RFD';


-- DB2ADMIN.ITXVIEWRESEP source

CREATE VIEW ITXVIEWRESEP AS   
SELECT
    	VIEWPRODUCTIONRESERVATION.COMPANYCODE,
       VIEWPRODUCTIONRESERVATION.GROUPLINE,
       VIEWPRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE,
       VIEWPRODUCTIONRESERVATION.SUBCODE01 AS SUBCODE01_RESERVATION,
       VIEWPRODUCTIONRESERVATION.PICKUPQUANTITY,
       VIEWPRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
       VIEWPRODUCTIONRESERVATION.SUFFIXCODE AS SUFFIXCODE_RESERVATION,
       ITXVIEWRESEP1.RECIPENUMBERID,
       ITXVIEWRESEP1.SUFFIXCODE,
       ITXVIEWRESEP1.GROUPNUMBER,
       ITXVIEWRESEP1.CODE,
       ITXVIEWRESEP1.SUBCODE,
       ITXVIEWRESEP1.CONSUMPTION,
       ITXVIEWRESEP1.COMMENTLINE,
       ITXVIEWRESEP1.LONGDESCRIPTION,
       ITXVIEWRESEP1.RECIPESUBCODE01,
       ITXVIEWRESEP1.SUBCODE01,
       ITXVIEWRESEP1.SUBCODE02,
       ITXVIEWRESEP1.SUBCODE03,
       ITXVIEWRESEP1.CONSUMPTIONTYPE,
       RECIPE.RECIPETYPE,
       RECIPE.PICKUPPERCENTAGE,
       RECIPE.RESIDUALBATHVOLUME
FROM
    VIEWPRODUCTIONRESERVATION VIEWPRODUCTIONRESERVATION
LEFT JOIN RECIPE RECIPE ON
    VIEWPRODUCTIONRESERVATION.SUFFIXCODE = RECIPE.SUFFIXCODE
    AND VIEWPRODUCTIONRESERVATION.SUBCODE01 = RECIPE.SUBCODE01
LEFT JOIN ITXVIEWRESEP1 ON
    RECIPE.NUMBERID = ITXVIEWRESEP1.RECIPENUMBERID;


-- DB2ADMIN.ITXVIEWRESEP1 source

CREATE VIEW ITXVIEWRESEP1 AS 
SELECT
    RECIPENUMBERID,
    r.SUFFIXCODE,
    GROUPNUMBER,
    TRIM(r.ITEMTYPEAFICODE) AS ITEMTYPEAFICODE,
    RECIPESUBCODE01,
    CASE
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'RFF' THEN TRIM(r.SUBCODE01)
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'RFD' THEN TRIM(r.SUBCODE01)
        ELSE ''
    END AS CODE,
    CASE
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'DYC' THEN TRIM(r.SUBCODE01) || '-' || TRIM(r.SUBCODE02) || '-' || TRIM(r.SUBCODE03)
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'PST' THEN TRIM(r.SUBCODE01) || '-' || TRIM(r.SUBCODE02) || '-' || TRIM(r.SUBCODE03)
        ELSE ''
    END AS SUBCODE,
    TRIM(r.COMMENTLINE) AS COMMENTLINE,
    TRIM(p.LONGDESCRIPTION) AS LONGDESCRIPTION,
    CONSUMPTION,
    r.COMPONENTUOMCODE,
    r.CONSUMPTIONTYPE,
    TRIM(r.SUBCODE01) AS SUBCODE01,
    TRIM(r.SUBCODE02) AS SUBCODE02,
    TRIM(r.SUBCODE03) AS SUBCODE03
FROM
    RECIPECOMPONENT r
LEFT JOIN PRODUCT p ON
    p.ITEMTYPECODE = r.ITEMTYPEAFICODE
    AND p.SUBCODE01 = r.SUBCODE01
    AND p.SUBCODE02 = r.SUBCODE02
    AND p.SUBCODE03 = r.SUBCODE03
    --LEFT JOIN VIEWPRODUCTIONRESERVATION v ON v.SUBCODE01 = r.SUBCODE01 
    --										AND v.SUBCODE02= r.SUBCODE02 
    --										AND v.SUBCODE03 = r.SUBCODE03
    --										AND v.PRODUCTIONORDERCODE = r.RECIPESUBCODE01;


-- DB2ADMIN.ITXVIEWRESEP2 source

CREATE VIEW ITXVIEWRESEP2 AS
SELECT
    r.RECIPESUBCODE01,
    r.RECIPESUFFIXCODE,
    r.GROUPNUMBER,
    TRIM(r.ITEMTYPEAFICODE) AS ITEMTYPEAFICODE,
    CASE
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'RFF' THEN TRIM(r.SUBCODE01)
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'RFD' THEN TRIM(r.SUBCODE01)
        ELSE ''
    END AS CODE,
    CASE
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'DYC' THEN TRIM(r.SUBCODE01) || '-' || TRIM(r.SUBCODE02) || '-' || TRIM(r.SUBCODE03)
        WHEN TRIM(r.ITEMTYPEAFICODE) = 'PST' THEN TRIM(r.SUBCODE01) || '-' || TRIM(r.SUBCODE02) || '-' || TRIM(r.SUBCODE03)
        ELSE ''
    END AS SUBCODE,
    TRIM(r.COMMENTLINE) AS COMMENTLINE,
    TRIM(p.LONGDESCRIPTION) AS LONGDESCRIPTION,
    r.CONSUMPTION,
    r.COMPONENTUOMCODE,
    r.CONSUMPTIONTYPE,
    TRIM(r.SUBCODE01) AS SUBCODE01,
    TRIM(r.SUBCODE02) AS SUBCODE02,
    TRIM(r.SUBCODE03) AS SUBCODE03
FROM
    RECIPECOMPONENT r
LEFT JOIN PRODUCT p ON
    p.ITEMTYPECODE = r.ITEMTYPEAFICODE
    AND p.SUBCODE01 = r.SUBCODE01
    AND p.SUBCODE02 = r.SUBCODE02
    AND p.SUBCODE03 = r.SUBCODE03
    --ORDER BY r.GROUPNUMBER
    --WHERE r.RECIPESUBCODE01 = 'SC0001++';


-- DB2ADMIN.ITXVIEWRESEP3 source

CREATE VIEW ITXVIEWRESEP3 AS
SELECT
    a.MYROW,
    b.PRODUCTIONORDERCODE,
    a.RECIPESUBCODE01,
    a.RECIPESUFFIXCODE,
    a.GROUPNUMBER,
    a.ITEMTYPEAFICODE,
    a.CODE,
    a.SUBCODE,
    a.COMMENTLINE,
    a.LONGDESCRIPTION,
    a.CONSUMPTION,
    b.USERPRIMARYQUANTITY,
    b.USERPRIMARYUOMCODE
FROM
    (
        SELECT
            ROW_NUMBER() OVER() AS MYROW,
            *
        FROM
            ITXVIEWRESEP2
    ) a
LEFT JOIN VIEWPRODUCTIONRESERVATION b ON
    b.SUBCODE01 = a.SUBCODE01
    AND b.SUBCODE02 = a.SUBCODE02
    AND b.SUBCODE03 = a.SUBCODE03;


-- DB2ADMIN.ITXVIEWRESEPCOLOR source

CREATE VIEW ITXVIEWRESEPCOLOR AS
SELECT
    SUBSTR(RECIPE.SUBCODE01, 1, LOCATE('/', RECIPE.SUBCODE01)-1) AS ARTIKEL,
    SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1, 7) AS NO_WARNA,
    SUBSTR(SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1), LOCATE('/', SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1))+ 1) AS CELUP,
    RECIPE.LONGDESCRIPTION,
    RECIPE.SHORTDESCRIPTION,
    A.CUSTOMER,
    RECIPE.NUMBERID
FROM
    RECIPE RECIPE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS CUSTOMER
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'OriginalCustomer'
            AND ADSTORAGE.VALUESTRING <> '1'
    ) A ON
    RECIPE.ABSUNIQUEID = A.UNIQUEID
WHERE
    RECIPE.ITEMTYPECODE = 'RFD'
    AND LOCATE('/', RECIPE.SUBCODE01) > 0;


-- DB2ADMIN.ITXVIEWSALDOCELCUT source

CREATE VIEW ITXVIEWSALDOCELCUT AS
SELECT
    ITXVIEWSALESDOCUMENT.PROVISIONALCODE,
    ITXVIEWINSPECTBYSALESDOC.CODE,
    ITXVIEW_ALLOCATION_INSPECT.ITEMTYPECODE,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE01,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE02,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE03,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE04,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE05,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE06,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE07,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE08,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE09,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE10,
    ITXVIEW_ALLOCATION_INSPECT.ITEMELEMENTCODE,
    ITXVIEW_ALLOCATION_INSPECT.LOTCODE,
    ITXVIEW_ALLOCATION_INSPECT.BASEPRIMARYQUANTITY,
    ITXVIEW_ALLOCATION_INSPECT.BASESECONDARYQUANTITY
FROM
    ITXVIEWSALESDOCUMENT ITXVIEWSALESDOCUMENT
LEFT JOIN ITXVIEWINSPECTBYSALESDOC ITXVIEWINSPECTBYSALESDOC ON
    ITXVIEWSALESDOCUMENT.PROVISIONALCODE = ITXVIEWINSPECTBYSALESDOC.PROVISIONALCODE
LEFT JOIN ITXVIEW_ALLOCATION_INSPECT ITXVIEW_ALLOCATION_INSPECT ON
    ITXVIEWINSPECTBYSALESDOC.CODE = ITXVIEW_ALLOCATION_INSPECT.CODE
    AND ITXVIEWINSPECTBYSALESDOC.ITEMELEMENTCODE = ITXVIEW_ALLOCATION_INSPECT.ITEMELEMENTCODE
GROUP BY
    ITXVIEWSALESDOCUMENT.PROVISIONALCODE,
    ITXVIEWINSPECTBYSALESDOC.CODE,
    ITXVIEW_ALLOCATION_INSPECT.ITEMTYPECODE,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE01,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE02,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE03,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE04,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE05,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE06,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE07,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE08,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE09,
    ITXVIEW_ALLOCATION_INSPECT.DECOSUBCODE10,
    ITXVIEW_ALLOCATION_INSPECT.ITEMELEMENTCODE,
    ITXVIEW_ALLOCATION_INSPECT.LOTCODE,
    ITXVIEW_ALLOCATION_INSPECT.BASEPRIMARYQUANTITY,
    ITXVIEW_ALLOCATION_INSPECT.BASESECONDARYQUANTITY;


-- DB2ADMIN.ITXVIEWSALESDOCUMENT source

CREATE VIEW ITXVIEWSALESDOCUMENT AS
SELECT
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    CASE
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '0' THEN 'Entered'
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '1' THEN 'Partially shipped'
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '2' THEN 'Shipped'
    END AS PROGRESS,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    A.LOTCODE
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN ALLOCATION ALLOCATION ON
    ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '0'
    ) A ON
    ALLOCATION.CODE = A.CODE
WHERE
    SALESDOCUMENT.DOCUMENTTYPETYPE = '05'
GROUP BY
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.PROGRESSSTATUS,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    A.LOTCODE;


-- DB2ADMIN.ITXVIEWSALESDOCUMENTDETAIL source

CREATE VIEW ITXVIEWSALESDOCUMENTDETAIL AS
SELECT
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.PROJECTCODE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    BUSINESSPARTNER.LEGALNAME1,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    B.LOTCODE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    ITXVIEWORDERITEMLINKACTIVE.EXTERNALITEMCODE,
    CASE
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '0' THEN 'Entered'
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '1' THEN 'Partially shipped'
        WHEN SALESDOCUMENT.PROGRESSSTATUS = '2' THEN 'Shipped'
    END AS PROGRESS
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ITXVIEWORDERITEMLINKACTIVE ITXVIEWORDERITEMLINKACTIVE ON
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ITXVIEWORDERITEMLINKACTIVE.ORDPRNCUSTOMERSUPPLIERCODE
    AND SALESDOCUMENTLINE.ITEMTYPEAFICODE = ITXVIEWORDERITEMLINKACTIVE.ITEMTYPEAFICODE
    AND SALESDOCUMENTLINE.SUBCODE01 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE07
    AND SALESDOCUMENTLINE.SUBCODE08 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE08
    AND SALESDOCUMENTLINE.SUBCODE09 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE09
    AND SALESDOCUMENTLINE.SUBCODE10 = ITXVIEWORDERITEMLINKACTIVE.SUBCODE10
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.ORDERCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
        GROUP BY
            ALLOCATION.CODE,
            ALLOCATION.ORDERCODE
    ) A ON
    SALESDOCUMENT.PROVISIONALCODE = A.ORDERCODE
LEFT JOIN (
        SELECT
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '0'
        GROUP BY
            ALLOCATION.CODE,
            ALLOCATION.LOTCODE
    ) B ON
    A.CODE = B.CODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    SALESDOCUMENT.DOCUMENTTYPETYPE = '05'
GROUP BY
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    BUSINESSPARTNER.LEGALNAME1,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    B.LOTCODE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    ITXVIEWORDERITEMLINKACTIVE.EXTERNALITEMCODE,
    SALESDOCUMENT.PROGRESSSTATUS;


-- DB2ADMIN.ITXVIEWSALESORDER source

CREATE VIEW ITXVIEWSALESORDER AS
SELECT
    WRKCONFIRMHEADER.SALESORDERCODE AS WRKCH_SALESORDERCODE,
    WRKCONFIRMHEADER.ORDERPARTNERLEGALNAME1,
    WRKCONFIRMHEADER.ORDERPARTNERADDRESSLINE1,
    WRKCONFIRMHEADER.ORDERPARTNERADDRESSLINE2,
    WRKCONFIRMHEADER.TERMSOFSHPLONGDESCRIPTION,
    WRKCONFIRMHEADER.PAYMENTMETHODLONGDESCRIPTION,
    WRKCONFIRMLINE.SUBCODE01 AS WRKCL_SUBCODE01,
    WRKCONFIRMLINE.SUBCODE02 AS WRKCL_SUBCODE02,
    WRKCONFIRMLINE.SUBCODE03 AS WRKCL_SUBCODE03,
    WRKCONFIRMLINE.SUBCODE04 AS WRKCL_SUBCODE04,
    WRKCONFIRMLINE.SUBCODE05 AS WRKCL_SUBCODE05,
    WRKCONFIRMLINE.SUBCODE06 AS WRKCL_SUBCODE06,
    WRKCONFIRMLINE.SUBCODE07 AS WRKCL_SUBCODE07,
    WRKCONFIRMLINE.SUBCODE08 AS WRKCL_SUBCODE08,
    WRKCONFIRMLINE.SUBCODE09 AS WRKCL_SUBCODE09,
    WRKCONFIRMLINE.SUBCODE10 AS WRKCL_SUBCODE10,
    SALESORDERLINE.SALESORDERCODE AS SOL_SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.EXTERNALREFERENCE AS SOL_EXTERNALREFERENCE,
    SALESORDERLINE.INTERNALREFERENCE AS SOL_INTERNALREFERENCE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01 AS SOL_SUBCODE01,
    SALESORDERLINE.SUBCODE02 AS SOL_SUBCODE02,
    SALESORDERLINE.SUBCODE03 AS SOL_SUBCODE03,
    SALESORDERLINE.SUBCODE04 AS SOL_SUBCODE04,
    SALESORDERLINE.SUBCODE05 AS SOL_SUBCODE05,
    SALESORDERLINE.SUBCODE06 AS SOL_SUBCODE06,
    SALESORDERLINE.SUBCODE07 AS SOL_SUBCODE07,
    SALESORDERLINE.SUBCODE08 AS SOL_SUBCODE08,
    SALESORDERLINE.SUBCODE09 AS SOL_SUBCODE09,
    SALESORDERLINE.SUBCODE10 AS SOL_SUBCODE10,
    SALESORDERLINE.ITEMDESCRIPTION,
    SALESORDERLINE.USERPRIMARYUOMCODE,
    SALESORDERLINE.USERPRIMARYQUANTITY,
    SALESORDERLINE.BASEPRIMARYQUANTITY,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    SALESORDERLINE.USERSECONDARYQUANTITY,
    SALESORDERLINE.BASESECONDARYQUANTITY,
    SALESORDERLINE.ABSUNIQUEID AS SOL_ABSUNIQUEID,
    SALESORDER.CODE,
    SALESORDER.ORDERDATE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.DESCRIPTION,
    SALESORDER.EXTERNALREFERENCE AS SO_EXTERNALREFERENCE,
    SALESORDER.INTERNALREFERENCE AS SO_INTERNALREFERENCE,
    SALESORDER.STATISTICALGROUPCODE,
    SALESORDER.CREATIONUSER,
    SALESORDER.ABSUNIQUEID AS SO_ABSUNIQUEID,
    ORDERPARTNER.ABSUNIQUEID AS OP_ABSUNIQUEID,
    BUSINESSPARTNER.PERSON,
    BUSINESSPARTNER.PHONENUMBER,
    BUSINESSPARTNER.FAXNUMBER,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    ADDRESS.ADDRESSFAXNUMBER,
    COUNTRY.LONGDESCRIPTION
FROM
    (
        (
            (
                (
                    (
                        (
                            WRKCONFIRMHEADER WRKCONFIRMHEADER
                        LEFT OUTER JOIN WRKCONFIRMLINE WRKCONFIRMLINE ON
                            WRKCONFIRMHEADER.CREATIONTIMESTAMP = WRKCONFIRMLINE.CREATIONTIMESTAMP
                            AND WRKCONFIRMHEADER.SALESORDERCOMPANYCODE = WRKCONFIRMLINE.SALORDLINESALORDERCOMPANYCODE
                            AND WRKCONFIRMHEADER.SALESORDERCOUNTERCODE = WRKCONFIRMLINE.SALORDLINESALORDERCOUNTERCODE
                            AND WRKCONFIRMHEADER.SALESORDERCODE = WRKCONFIRMLINE.SALESORDERLINESALESORDERCODE
                        )
                    LEFT OUTER JOIN SALESORDERLINE SALESORDERLINE ON
                        WRKCONFIRMLINE.SALORDLINESALORDERCOMPANYCODE = SALESORDERLINE.SALESORDERCOMPANYCODE
                        AND WRKCONFIRMLINE.SALORDLINESALORDERCOUNTERCODE = SALESORDERLINE.SALESORDERCOUNTERCODE
                        AND WRKCONFIRMLINE.SALESORDERLINESALESORDERCODE = SALESORDERLINE.SALESORDERCODE
                        AND WRKCONFIRMLINE.SALESORDERLINEORDERLINE = SALESORDERLINE.ORDERLINE
                        AND WRKCONFIRMLINE.SALESORDERLINEORDERSUBLINE = SALESORDERLINE.ORDERSUBLINE
                        AND WRKCONFIRMLINE.SALORDLINECOMPONENTORDERLINE = SALESORDERLINE.COMPONENTORDERLINE
                    )
                LEFT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
                    WRKCONFIRMHEADER.SALESORDERCODE = SALESORDER.CODE
                    AND WRKCONFIRMHEADER.SALESORDERCOUNTERCODE = SALESORDER.COUNTERCODE
                )
            LEFT OUTER JOIN ORDERPARTNER ORDERPARTNER ON
                SALESORDER.COMPANYCODE = ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE
                AND SALESORDER.ORDERTYPE = ORDERPARTNER.CUSTOMERSUPPLIERTYPE
                AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
            )
        LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        )
    LEFT OUTER JOIN ADDRESS ADDRESS ON
        WRKCONFIRMHEADER.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
        AND WRKCONFIRMHEADER.DELIVERYPOINTCODE = ADDRESS.CODE
    )
LEFT OUTER JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE;


-- DB2ADMIN.ITXVIEWSPECS source

CREATE VIEW ITXVIEWSPECS AS
SELECT
    ADSTORAGE.ABSUNIQUEID,
    PRODUCTIONDEMANDSTEP.STEPNUMBER,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.OPERATIONCODE,
    PRODUCTIONSPECS.ITEMTYPEAFICODE,
    PRODUCTIONSPECS.SUBCODE01,
    PRODUCTIONSPECS.SUBCODE02,
    PRODUCTIONSPECS.SUBCODE03,
    PRODUCTIONSPECS.SUBCODE04,
    PRODUCTIONSPECS.SUBCODE06,
    PRODUCTIONSPECS.SUBCODE07,
    PRODUCTIONSPECS.SUBCODE08,
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUESTRING,
    ADSTORAGE.VALUEDECIMAL,
    RECIPE.SHORTDESCRIPTION,
    PRODUCTIONSPECS.LONGDESCRIPTION
FROM
    PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
LEFT JOIN WORKCENTER WORKCENTER ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCOMPANYCODE = WORKCENTER.COMPANYCODE
    AND PRODUCTIONDEMANDSTEP.WORKCENTERCODE = WORKCENTER.CODE
LEFT JOIN OPERATION OPERATION ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCOMPANYCODE = OPERATION.COMPANYCODE
    AND PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE = OPERATION.CODE
LEFT JOIN DB2ADMIN.PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = PRODUCTIONDEMAND.CODE
LEFT JOIN DB2ADMIN.PRODUCTIONSPECS PRODUCTIONSPECS ON
    PRODUCTIONDEMANDSTEP.OPERATIONCODE = PRODUCTIONSPECS.OPERATIONCODE
    AND PRODUCTIONDEMAND.SUBCODE03 = PRODUCTIONSPECS.SUBCODE03
LEFT JOIN DB2ADMIN.ADSTORAGE ADSTORAGE ON
    PRODUCTIONSPECS.ABSUNIQUEID = ADSTORAGE.UNIQUEID
LEFT JOIN DB2ADMIN.RECIPE RECIPE ON
    RECIPE.SUBCODE01 = ADSTORAGE.VALUESTRING
WHERE
    PRODUCTIONSPECS.OPERATIONCODE IS NOT NULL
    AND ADSTORAGE.UNIQUEID IS NOT NULL;


-- DB2ADMIN.ITXVIEWSPECS_KKPRINTING source

CREATE VIEW ITXVIEWSPECS_KKPRINTING AS
SELECT
    p.CODE,
    a.VALUEDECIMAL AS LEBAR_SCREEN,
    a2.VALUESTRING AS REPEAT_SCREEN,
    a3.VALUESTRING AS REPEAT_BUYER
FROM
    PRODUCTIONDEMAND p
LEFT JOIN PRODUCTIONSPECS p2 ON
    p2.ITEMTYPEAFICODE = p.ITEMTYPEAFICODE
    --							AND p2.SUBCODE01 = p.SUBCODE01 
    --							AND p2.SUBCODE02 = p.SUBCODE02 
    --							AND p2.SUBCODE03 = p.SUBCODE03 
    --							AND p2.SUBCODE04 = p.SUBCODE04 
    --							AND p2.SUBCODE05 = p.SUBCODE05 
    --							AND p2.SUBCODE06 = p.SUBCODE06 
    AND p2.SUBCODE07 = p.SUBCODE07
    AND p2.SUBCODE08 = p.SUBCODE08
    AND (
        p2.OPERATIONCODE = 'ROT1'
            OR p2.OPERATIONCODE = 'FLT1'
    )
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p2.ABSUNIQUEID
    AND a.FIELDNAME = 'LebarScreen'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = p2.ABSUNIQUEID
    AND a2.FIELDNAME = 'RepeatScreen'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = p2.ABSUNIQUEID
    AND a3.FIELDNAME = 'RepeatBuyer';


-- DB2ADMIN.ITXVIEWSPRKNT source

CREATE VIEW ITXVIEWSPRKNT AS
SELECT
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    SUM(BALANCE.BASEPRIMARYQUANTITYUNIT) AS SISA_STOK,
    BALANCE.BASEPRIMARYUNITCODE,
    ITEMWAREHOUSELINK.SAFETYSTOCK
FROM
    BALANCE BALANCE
LEFT JOIN ITEMWAREHOUSELINK ITEMWAREHOUSELINK ON
    BALANCE.ITEMTYPECODE = ITEMWAREHOUSELINK.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = ITEMWAREHOUSELINK.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = ITEMWAREHOUSELINK.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = ITEMWAREHOUSELINK.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = ITEMWAREHOUSELINK.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = ITEMWAREHOUSELINK.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = ITEMWAREHOUSELINK.SUBCODE06
WHERE
    BALANCE.ITEMTYPECODE = 'SPR'
    AND BALANCE.DECOSUBCODE01 = 'KNT'
    AND BALANCE.LOGICALWAREHOUSECODE = 'P211'
    AND ITEMWAREHOUSELINK.SAFETYSTOCK <> 0
GROUP BY
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.BASEPRIMARYUNITCODE,
    ITEMWAREHOUSELINK.SAFETYSTOCK;


-- DB2ADMIN.ITXVIEWSTATUSKAIN_GKJ source

CREATE VIEW ITXVIEWSTATUSKAIN_GKJ AS
SELECT
    *
FROM
    (
        SELECT
            ITEMELEMENTCODE,
            QUALITYREASONCODE,
            CREATIONDATETIME,
            PROJECTCODE,
            ROW_NUMBER() OVER (
                PARTITION BY ITEMELEMENTCODE
            ORDER BY
                CREATIONDATETIME DESC,
                TRANSACTIONDETAILNUMBER DESC
            ) AS RN
        FROM
            STOCKTRANSACTION
        WHERE
            (
                ITEMTYPECODE = 'FKF'
                    OR ITEMTYPECODE = 'KFF'
            )
            AND 
	LOGICALWAREHOUSECODE = 'M031'
    ) T
WHERE
    T.RN = '1';


-- DB2ADMIN.ITXVIEWSTEP_ROUTING source

CREATE VIEW ITXVIEWSTEP_ROUTING AS 
SELECT
    CODE,
    LISTAGG(
        OPERATIONCODE,
        '-'
    ) AS OPERATIONCODE
FROM
    (
        SELECT
            p.CODE,
            r.SEQUENCE,
            TRIM(r.OPERATIONCODE) AS OPERATIONCODE
            --    TRIM(r.LONGDESCRIPTION) AS DESCRIPTION 
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN ROUTINGSTEP r ON
            r.ROUTINGNUMBERID = p.ROUTINGNUMBERID
        LEFT JOIN OPERATION o ON
            o.CODE = r.OPERATIONCODE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = o.ABSUNIQUEID
            AND a.FIELDNAME = 'AlurProses'
        WHERE
            --	    p.CODE = '00185564' 
            --	    AND
            a.VALUESTRING = '2'
        ORDER BY
            r.SEQUENCE ASC
    )
GROUP BY
    CODE;


-- DB2ADMIN.ITXVIEWSTIKERBNGKNTSTOCK source

CREATE VIEW ITXVIEWSTIKERBNGKNTSTOCK AS    
SELECT
    STOCKTRANSACTION.*
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '125'
    AND STOCKTRANSACTION.ITEMTYPECODE = 'GYR';


-- DB2ADMIN.ITXVIEWSTIKERKNTKECIL source

CREATE VIEW ITXVIEWSTIKERKNTKECIL AS
SELECT
    "ELEMENTSINSPECTION"."ELEMENTCODE",
    "ELEMENTSINSPECTION"."WEIGHTNET",
    "ELEMENTSINSPECTION"."DEMANDCODE",
    "ELEMENTSINSPECTION"."QUALITYCODE",
    "ELEMENTSINSPECTION"."LENGTHGROSS",
    "ELEMENTSINSPECTION"."TOTALPOINTS",
    CASE
        WHEN "PRODUCTIONDEMAND"."PROJECTCODE" <> '' THEN "PRODUCTIONDEMAND"."PROJECTCODE"
        ELSE "PRODUCTIONDEMAND"."ORIGDLVSALORDLINESALORDERCODE"
    END AS "PROJECTCODE",
    "PRODUCTIONDEMAND"."INTERNALREFERENCE",
    "PRODUCTIONDEMAND"."SUBCODE02",
    "PRODUCTIONDEMAND"."SUBCODE03",
    "PRODUCTIONDEMAND"."SUBCODE04",
    "INITIALS"."LONGDESCRIPTION",
    "ADSTORAGE"."VALUESTRING" AS "NOTE_INSPEK",
    "ADSTORAGE1"."VALUESTRING" AS "NoMesin"
FROM
    (
        (
            "DB2ADMIN"."ELEMENTSINSPECTION" "ELEMENTSINSPECTION"
        LEFT OUTER JOIN "DB2ADMIN"."PRODUCTIONDEMAND" "PRODUCTIONDEMAND" ON
            "ELEMENTSINSPECTION"."DEMANDCODE" = "PRODUCTIONDEMAND"."CODE"
        LEFT OUTER JOIN "DB2ADMIN"."ADSTORAGE" "ADSTORAGE1" ON
            "ADSTORAGE1"."UNIQUEID" = "PRODUCTIONDEMAND"."ABSUNIQUEID"
            AND "ADSTORAGE1"."NAMENAME" = 'MachineNo'
        )
    LEFT OUTER JOIN "DB2ADMIN"."INITIALS" "INITIALS" ON
        "ELEMENTSINSPECTION"."OPERATORCODE" = "INITIALS"."CODE"
    )
LEFT OUTER JOIN "DB2ADMIN"."ADSTORAGE" "ADSTORAGE" ON
    "ADSTORAGE"."UNIQUEID" = "ELEMENTSINSPECTION"."ABSUNIQUEID"
    AND "ADSTORAGE"."NAMENAME" = 'Note';


-- DB2ADMIN.ITXVIEWSTOCKBALANCEDYC source

CREATE VIEW ITXVIEWSTOCKBALANCEDYC AS
SELECT
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    PRODUCT.LONGDESCRIPTION,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.LOTCODE,
    SUM(BALANCE.BASEPRIMARYQUANTITYUNIT) AS BASEPRIMARYQUANTITYUNIT,
    BALANCE.BASEPRIMARYUNITCODE,
    SUM(BALANCE.BASESECONDARYQUANTITYUNIT) AS BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE
FROM
    BALANCE BALANCE
LEFT JOIN PRODUCT PRODUCT ON
    BALANCE.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
    AND BALANCE.DECOSUBCODE01 = PRODUCT.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = PRODUCT.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = PRODUCT.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = PRODUCT.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = PRODUCT.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = PRODUCT.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = PRODUCT.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = PRODUCT.SUBCODE08
    AND BALANCE.DECOSUBCODE09 = PRODUCT.SUBCODE09
    AND BALANCE.DECOSUBCODE10 = PRODUCT.SUBCODE10
WHERE
    BALANCE.ITEMTYPECODE = 'DYC'
    AND BALANCE.LOGICALWAREHOUSECODE = 'M101'
GROUP BY
    BALANCE.ITEMTYPECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    PRODUCT.LONGDESCRIPTION,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.LOTCODE,
    BALANCE.BASEPRIMARYUNITCODE,
    BALANCE.BASESECONDARYUNITCODE;


-- DB2ADMIN.ITXVIEWSTOCKBALANCEFKF source

CREATE VIEW ITXVIEWSTOCKBALANCEFKF AS
SELECT
    ONHANDUPDATE,
    QUALITYREASONCODE,
    CREATIONDATETIME,
    ITEMELEMENTCODE,
    PROJECTCODE,
    LOTCODE
FROM
    STOCKTRANSACTION
WHERE
    ONHANDUPDATE = '1'
    AND TEMPLATECODE <> 'OPN'
    AND ITEMTYPECODE = 'FKF';


-- DB2ADMIN.ITXVIEWSTOCKBALANCEKFF source

CREATE VIEW ITXVIEWSTOCKBALANCEKFF AS
SELECT
    ONHANDUPDATE,
    QUALITYREASONCODE,
    CREATIONDATETIME,
    ITEMELEMENTCODE,
    PROJECTCODE,
    LOTCODE
FROM
    STOCKTRANSACTION
WHERE
    ONHANDUPDATE = '1'
    AND TEMPLATECODE <> 'OPN'
    AND (
        ITEMTYPECODE = 'KFF'
            OR ITEMTYPECODE = 'FKF'
    );


-- DB2ADMIN.ITXVIEWSTOCKKELUARGKIMIA source

CREATE VIEW ITXVIEWSTOCKKELUARGKIMIA AS
SELECT
    STOCKTRANSACTIONIMPORT.TRANSACTIONDATE,
    TRIM(PRODUCTIONRESERVATION.PRODUCTIONORDERCODE) || '-' || TRIM(PRODUCTIONRESERVATION.GROUPLINE) AS PRODUCTION_ORDER,
    RECIPECOMPONENT.ITEMTYPEAFICODE,
    TRIM(RECIPECOMPONENT.SUBCODE01) || '-' || TRIM(RECIPECOMPONENT.SUBCODE02) || '-' || TRIM(RECIPECOMPONENT.SUBCODE03) AS ITEM_CODE,
    STOCKTRANSACTIONIMPORT.USERPRIMARYQUANTITY AS QTY_PRIMARY_AKTUAL,
    STOCKTRANSACTIONIMPORT.USERPRIMARYUOMCODE,
    STOCKTRANSACTIONIMPORT.USERSECONDARYQUANTITY AS QTY_SECONDARY_AKTUAL,
    STOCKTRANSACTIONIMPORT.USERSECONDARYUOMCODE,
    STOCKTRANSACTIONIMPORT.LOTCODE
FROM
    PRODUCTIONRESERVATION PRODUCTIONRESERVATION
LEFT JOIN RECIPE RECIPE ON
    PRODUCTIONRESERVATION.SUBCODE01 = RECIPE.SUBCODE01
    AND PRODUCTIONRESERVATION.SUFFIXCODE = RECIPE.SUFFIXCODE
LEFT JOIN RECIPECOMPONENT RECIPECOMPONENT ON
    RECIPE.NUMBERID = RECIPECOMPONENT.RECIPENUMBERID
LEFT JOIN STOCKTRANSACTIONIMPORT STOCKTRANSACTIONIMPORT ON
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE = STOCKTRANSACTIONIMPORT.ORDERCODE
    AND RECIPECOMPONENT.ITEMTYPEAFICODE = STOCKTRANSACTIONIMPORT.ITEMTYPECODE
    AND RECIPECOMPONENT.SUBCODE01 = STOCKTRANSACTIONIMPORT.DECOSUBCODE01
    AND RECIPECOMPONENT.SUBCODE02 = STOCKTRANSACTIONIMPORT.DECOSUBCODE02
    AND RECIPECOMPONENT.SUBCODE03 = STOCKTRANSACTIONIMPORT.DECOSUBCODE03
WHERE
    STOCKTRANSACTIONIMPORT.ITEMTYPECODE = 'DYC'
    AND STOCKTRANSACTIONIMPORT.TEMPLATECODE = '120'
    AND STOCKTRANSACTIONIMPORT.IMPORTSTATUS = '2'
GROUP BY
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    PRODUCTIONRESERVATION.GROUPLINE,
    RECIPECOMPONENT.ITEMTYPEAFICODE,
    RECIPECOMPONENT.SUBCODE01,
    RECIPECOMPONENT.SUBCODE02,
    RECIPECOMPONENT.SUBCODE03,
    STOCKTRANSACTIONIMPORT.TRANSACTIONDATE,
    STOCKTRANSACTIONIMPORT.USERPRIMARYQUANTITY,
    STOCKTRANSACTIONIMPORT.USERPRIMARYUOMCODE,
    STOCKTRANSACTIONIMPORT.USERSECONDARYQUANTITY,
    STOCKTRANSACTIONIMPORT.USERSECONDARYUOMCODE,
    STOCKTRANSACTIONIMPORT.LOTCODE;


-- DB2ADMIN.ITXVIEWSTOCK_MUTASIKAINJADI source

CREATE VIEW ITXVIEWSTOCK_MUTASIKAINJADI AS
SELECT
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.TRANSACTIONDETAILNUMBER,
    STOCKTRANSACTION.DECOSUBCODE01,
    STOCKTRANSACTION.DECOSUBCODE02,
    STOCKTRANSACTION.DECOSUBCODE03,
    STOCKTRANSACTION.DECOSUBCODE04,
    STOCKTRANSACTION.DECOSUBCODE05,
    STOCKTRANSACTION.DECOSUBCODE06,
    STOCKTRANSACTION.DECOSUBCODE07,
    STOCKTRANSACTION.DECOSUBCODE08,
    STOCKTRANSACTION.DECOSUBCODE09,
    STOCKTRANSACTION.DECOSUBCODE10,
    STOCKTRANSACTION.BASEPRIMARYQUANTITY,
    STOCKTRANSACTION.BASESECONDARYUOMCODE,
    STOCKTRANSACTION.BASESECONDARYQUANTITY,
    STOCKTRANSACTION.QUALITYLEVELCODE,
    STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.PROJECTCODE,
    SALESORDER.EXTERNALREFERENCE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    LOGICALWAREHOUSE.LONGDESCRIPTION
FROM
    (
        (
            (
                DB2ADMIN.STOCKTRANSACTION STOCKTRANSACTION
            LEFT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
                STOCKTRANSACTION.PROJECTCODE = SALESORDER.CODE
            )
        LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
            STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
        )
    LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
        STOCKTRANSACTION.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
    )
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT OUTER JOIN DB2ADMIN.LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    STOCKTRANSACTION.LOGICALWAREHOUSECODE = LOGICALWAREHOUSE.CODE
    --ORDER BY STOCKTRANSACTION.TRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEWSTOCTRNKNK source

CREATE VIEW ITXVIEWSTOCTRNKNK AS
SELECT
    *
FROM
    STOCKTRANSACTION
WHERE
    TOKENCODE = 'RECEIPT'
    AND TEMPLATECODE = '110';


-- DB2ADMIN.ITXVIEWTESTQUALITY source

CREATE VIEW ITXVIEWTESTQUALITY AS
SELECT
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME,
    LISTAGG(
        TRIM(B.CHARACTERISTICCODE),
        ','
    ) AS CHARACTERISTICCODE,
    LISTAGG(
        CAST(
            B.TESTLINESTATUS AS VARCHAR(10000)
        ),
        ','
    ) AS TESTLINESTATUS,
    LISTAGG(
        CAST(
            B.VALUEBOOLEAN AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEBOOLEAN,
    LISTAGG(
        CAST(
            B.VALUESTRING AS VARCHAR(10000)
        ),
        ','
    ) AS VALUESTRING,
    LISTAGG(
        CAST(
            B.VALUEQUANTITY AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEQUANTITY,
    LISTAGG(
        CAST(
            B.VALUEGROUPCODE AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEGROUPCODE
FROM
    QUALITYDOCUMENT A
LEFT JOIN QUALITYDOCLINE B 
   ON
    A.HEADERLINE = B.QUALITYDOCUMENTHEADERLINE
    AND A.HEADERNUMBERID = B.QUALITYDOCUMENTHEADERNUMBERID
GROUP BY
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME;


-- DB2ADMIN.ITXVIEWTGLBAGIKAINGKG source

CREATE VIEW ITXVIEWTGLBAGIKAINGKG AS 
SELECT
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ORDERCODE
FROM
    STOCKTRANSACTION STOCKTRANSACTION
WHERE
    STOCKTRANSACTION.TEMPLATECODE = '120'
GROUP BY
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.ORDERCODE;


-- DB2ADMIN.ITXVIEWTGLDELIVGREIGE source

CREATE VIEW ITXVIEWTGLDELIVGREIGE AS
SELECT
    LISTAGG(
        TRIM(PRODUCTIONDEMAND.FINALPLANNEDDATE),
        ','
    ) AS FINALPLANNEDDATE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.PROJECTCODE
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
WHERE
    ITEMTYPEAFICODE = 'KGF'
GROUP BY
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.PROJECTCODE;


-- DB2ADMIN.ITXVIEWTGLKIRIMLOSSORDER source

CREATE VIEW ITXVIEWTGLKIRIMLOSSORDER AS
SELECT
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    LISTAGG(
        TRIM(SALESDOCUMENT.DEFINITIVEDOCUMENTDATE),
        ','
    ) AS TGL_KIRIM
FROM
    SALESDOCUMENTLINE SALESDOCUMENTLINE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
GROUP BY
    SALESDOCUMENTLINE.PROJECTCODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10;


-- DB2ADMIN.ITXVIEWTGLPRODKNT source

CREATE VIEW ITXVIEWTGLPRODKNT AS
SELECT
    i.ABSUNIQUEID,
    i.INTDOCPROVISIONALCOUNTERCODE,
    i.INTDOCUMENTPROVISIONALCODE,
    i.ORDERLINE,
    a.VALUESTRING
FROM
    (
        SELECT
            i2.*,
            i.ORDPRNCUSTOMERSUPPLIERCODE
        FROM
            INTERNALDOCUMENT i
        LEFT OUTER JOIN INTERNALDOCUMENTLINE i2 ON
            i.PROVISIONALCODE = i2.INTDOCUMENTPROVISIONALCODE
            AND i.PROVISIONALCOUNTERCODE = i2.INTDOCPROVISIONALCOUNTERCODE
    ) i
LEFT OUTER JOIN ADSTORAGE a ON
    a.UNIQUEID = i.ABSUNIQUEID
    AND a.NAMENAME = 'TglProduksiB'
WHERE
    i.ORDPRNCUSTOMERSUPPLIERCODE = 'M011';


-- DB2ADMIN.ITXVIEWTQADIDAS source

CREATE VIEW ITXVIEWTQADIDAS AS
SELECT
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME,
    LISTAGG(
        TRIM(CAST(B.CHARACTERISTICCODE AS VARCHAR(20000))),
        ','
    ) AS CHARACTERISTICCODE,
    LISTAGG(
        CAST(
            B.VALUEBOOLEAN AS VARCHAR(20000)
        ),
        ','
    ) AS VALUEBOOLEAN,
    LISTAGG(
        CAST(
            B.VALUESTRING AS VARCHAR(20000)
        ),
        ','
    ) AS VALUESTRING,
    LISTAGG(
        CAST(
            B.VALUEQUANTITY AS VARCHAR(20000)
        ),
        ','
    ) AS VALUEQUANTITY,
    LISTAGG(
        CAST(
            B.VALUEGROUPCODE AS VARCHAR(20000)
        ),
        ','
    ) AS VALUEGROUPCODE
FROM
    QUALITYDOCUMENT A
LEFT JOIN QUALITYDOCLINE B ON
    A.HEADERLINE = B.QUALITYDOCUMENTHEADERLINE
    AND A.HEADERNUMBERID = B.QUALITYDOCUMENTHEADERNUMBERID
GROUP BY
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME;


-- DB2ADMIN.ITXVIEWTQATHLETA source

CREATE VIEW ITXVIEWTQATHLETA AS
SELECT
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME,
    LISTAGG(
        TRIM(B.CHARACTERISTICCODE),
        ','
    ) AS CHARACTERISTICCODE,
    LISTAGG(
        CAST(
            B.VALUEBOOLEAN AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEBOOLEAN,
    LISTAGG(
        CAST(
            B.VALUESTRING AS VARCHAR(10000)
        ),
        ','
    ) AS VALUESTRING,
    LISTAGG(
        CAST(
            B.VALUEQUANTITY AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEQUANTITY,
    LISTAGG(
        CAST(
            B.VALUEGROUPCODE AS VARCHAR(10000)
        ),
        ','
    ) AS VALUEGROUPCODE
FROM
    QUALITYDOCUMENT A
LEFT JOIN QUALITYDOCLINE B 
   ON
    A.HEADERLINE = B.QUALITYDOCUMENTHEADERLINE
    AND A.HEADERNUMBERID = B.QUALITYDOCUMENTHEADERNUMBERID
GROUP BY
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME;


-- DB2ADMIN.ITXVIEWUSERMTC1 source

CREATE VIEW ITXVIEWUSERMTC1 AS
SELECT
    u.LONGDESCRIPTION,
    a.UNIQUEID
FROM
    ADSTORAGE a
LEFT OUTER JOIN USERGENERICGROUP u ON
    u.CODE = a.VALUESTRING
    AND u.USERGENERICGROUPTYPECODE = 'UMT'
WHERE
    a.NAMENAME = 'AssignedToUserId1';


-- DB2ADMIN.ITXVIEWUSERMTC2 source

CREATE VIEW ITXVIEWUSERMTC2 AS
SELECT
    u.LONGDESCRIPTION,
    a.UNIQUEID
FROM
    ADSTORAGE a
LEFT OUTER JOIN USERGENERICGROUP u ON
    u.CODE = a.VALUESTRING
    AND u.USERGENERICGROUPTYPECODE = 'UMT'
WHERE
    a.NAMENAME = 'AssignedToUserId2';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM AS
SELECT
    no_suratjalan,
    --    VALUEDATE,
    BLAWB,
    port,
    status_meas,
    ETA,
    note,
    terimadok_khusus,
    penyerahan_dok,
    tgl_terimadok,
    tgl_lamapenyerahan_doc,
    tgl_kemkt,
    no_peb,
    lcnumber,
    tgl_peb,
    NPE,
    AWB,
    NO_CONTAINER,
    Tagihan_noinv,
    Tagihan_nilai,
    inv_actual,
    keterangan,
    no_shipping,
    ket_rmkShipment
FROM
    (
        SELECT
            SD.PROVISIONALCODE AS no_suratjalan,
            --        EXIM_TRANSPORT_DATE.VALUEDATE,
            EXIM_PORT.VALUESTRING AS port,
            EXIM_BLAWB.VALUESTRING AS BLAWB,
            EXIM_STATUSMEAS.VALUESTRING AS status_meas,
            EXIM_ESTIMATETIME.VALUEDATE AS ETA,
            EXIM_NOTE.VALUESTRING AS note,
            EXIM_DATEDOK_KHUSUS.VALUEDATE AS terimadok_khusus,
            EXIM_DATEPENYERAHAN_DOK.VALUEDATE AS penyerahan_dok,
            EXIM_DATETERIMA_DOK.VALUEDATE AS tgl_terimadok,
            EXIM_DATEPENYERAHAN_DOK.VALUEDATE - EXIM_DATEDOK_KHUSUS.VALUEDATE AS tgl_lamapenyerahan_doc,
            EXIM_DATEKE_MKT.VALUEDATE AS tgl_kemkt,
            EXIM_NO_PEB.VALUEINT AS no_peb,
            EXIM_LCNUMBER.VALUESTRING AS LCNUMBER,
            EXIM_TGL_PEB.VALUEDATE AS tgl_peb,
            EXIM_NPE.VALUEINT AS NPE,
            EXIM_AWB.VALUESTRING AS AWB,
            EXIM_CONTAINER.NO_CONTAINER AS NO_CONTAINER,
            EXIM_TAGIHAN_NOINV.VALUESTRING AS Tagihan_noinv,
            EXIM_TAGIHAN_NILAI.VALUEINT AS Tagihan_nilai,
            EXIM_INV_ACTUAL.VALUEINT AS inv_actual,
            EXIM_KETERANGAN.VALUESTRING AS keterangan,
            EXIM_NO_SHIPPING.VALUESTRING AS no_shipping,
            EXIM_KITE.VALUESTRING AS ket_rmkShipment
        FROM
            SALESDOCUMENT SD
            --    LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_TRANSPORT_DATE EXIM_TRANSPORT_DATE ON
            --        SD.ABSUNIQUEID = EXIM_TRANSPORT_DATE.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_PORT EXIM_PORT ON
            SD.ABSUNIQUEID = EXIM_PORT.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_BLAWB EXIM_BLAWB ON
            SD.ABSUNIQUEID = EXIM_BLAWB.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_STATUSMEAS EXIM_STATUSMEAS ON
            SD.ABSUNIQUEID = EXIM_STATUSMEAS.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_ESTIMATETIME EXIM_ESTIMATETIME ON
            SD.ABSUNIQUEID = EXIM_ESTIMATETIME.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_NOTE EXIM_NOTE ON
            SD.ABSUNIQUEID = EXIM_NOTE.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_DATEDOK_KHUSUS EXIM_DATEDOK_KHUSUS ON
            SD.ABSUNIQUEID = EXIM_DATEDOK_KHUSUS.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_DATEPENYERAHAN_DOK EXIM_DATEPENYERAHAN_DOK ON
            SD.ABSUNIQUEID = EXIM_DATEPENYERAHAN_DOK.UNIQUEID
        LEFT JOIN LEGALDOCUMENTTYPE LEGALDOCUMENTTYPE ON
            SD.LEGALDOCUMENTTYPECODE = LEGALDOCUMENTTYPE.CODE
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_DATETERIMA_DOK EXIM_DATETERIMA_DOK ON
            SD.ABSUNIQUEID = EXIM_DATETERIMA_DOK.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_DATEKE_MKT EXIM_DATEKE_MKT ON
            SD.ABSUNIQUEID = EXIM_DATEKE_MKT.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_NO_PEB EXIM_NO_PEB ON
            SD.ABSUNIQUEID = EXIM_NO_PEB.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_TGL_PEB EXIM_TGL_PEB ON
            SD.ABSUNIQUEID = EXIM_TGL_PEB.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_NPE EXIM_NPE ON
            SD.ABSUNIQUEID = EXIM_NPE.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_AWB EXIM_AWB ON
            SD.ABSUNIQUEID = EXIM_AWB.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NOINV EXIM_TAGIHAN_NOINV ON
            SD.ABSUNIQUEID = EXIM_TAGIHAN_NOINV.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NILAI EXIM_TAGIHAN_NILAI ON
            SD.ABSUNIQUEID = EXIM_TAGIHAN_NILAI.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_INV_ACTUAL EXIM_INV_ACTUAL ON
            SD.ABSUNIQUEID = EXIM_INV_ACTUAL.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_KETERANGAN EXIM_KETERANGAN ON
            SD.ABSUNIQUEID = EXIM_KETERANGAN.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_CONTAINER EXIM_CONTAINER ON
            SD.ABSUNIQUEID = EXIM_CONTAINER.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER EXIM_LCNUMBER ON
            SD.ABSUNIQUEID = EXIM_LCNUMBER.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_NO_SHIPPING EXIM_NO_SHIPPING ON
            SD.ABSUNIQUEID = EXIM_NO_SHIPPING.UNIQUEID
        LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_KITE EXIM_KITE ON
            SD.ABSUNIQUEID = EXIM_KITE.UNIQUEID
    )
    --            WHERE
    --            	no_suratjalan IN ('SRE2200231','SRE2200223');
    --        no_suratjalan = 'SRE2200008' --noshipping;


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_AWB source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_AWB AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'AWB';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_BLAWB source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_BLAWB AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'BLAWB';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_CONTAINER source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_CONTAINER AS
SELECT
    ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER.UNIQUEID,
    LISTAGG(
        DISTINCT(
            TRIM(ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER.VALUESTRING)
        ),
        ', '
    ) AS NO_CONTAINER
FROM
    ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER
    --    WHERE UNIQUEID = 2992335
GROUP BY
    ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER.UNIQUEID;


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_DATEDOK_KHUSUS source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_DATEDOK_KHUSUS AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'TerimaDok';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_DATEKE_MKT source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_DATEKE_MKT AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'KeMKT';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_DATEPENYERAHAN_DOK source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_DATEPENYERAHAN_DOK AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'SerahDok';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_DATETERIMA_DOK source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_DATETERIMA_DOK AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'TglTerima';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_ESTIMATETIME source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_ESTIMATETIME AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'ETA';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_INV_ACTUAL source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_INV_ACTUAL AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'InvoiceUSD';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_KETERANGAN source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_KETERANGAN AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'Keterangan';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_KITE source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_KITE AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'KITE'
    AND FIELDNAME = 'KITE';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'LCNumber';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_NOTE source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_NOTE AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'Note';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_NO_PEB source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_NO_PEB AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'PEB';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_NO_SHIPPING source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_NO_SHIPPING AS
SELECT
    UNIQUEID,
    NAMENAME,
    VALUESTRING
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'shipping'
    --    AND
    --    UNIQUEID = '3519289';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_NPE source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_NPE AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'NPE';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_PORT source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_PORT AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'Port';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_STATUSMEAS source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_STATUSMEAS AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'StatusMeasurement';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_SUBCONTAINER AS
SELECT
    UNIQUEID,
    VALUESTRING
FROM
    ADSTORAGE
WHERE
    NAMENAME IN (
        'Container1', 'Container2', 'Container3', 'Container4', 'Container5'
    );


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NILAI source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NILAI AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'TagihanNilai';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NOINV source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_TAGIHAN_NOINV AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'TagihanInvoice';


-- DB2ADMIN.ITXVIEW_ADITIONALDATA_EXIM_TGL_PEB source

CREATE VIEW ITXVIEW_ADITIONALDATA_EXIM_TGL_PEB AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'TglPEB ';


-- DB2ADMIN.ITXVIEW_ADSTORAGE_BONORDER source

CREATE VIEW ITXVIEW_ADSTORAGE_BonOrder AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'BonOrder'
        AND ADSTORAGE.FIELDNAME = 'BonOrder' THEN 
   ADSTORAGE.VALUESTRING
    END AS BonOrder
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'BonOrder'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUESTRING;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_DATEBOSENTRMP source

CREATE VIEW ITXVIEW_ADSTORAGE_DATEBOSENTRMP AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'DateBOSentRMP'
        AND ADSTORAGE.FIELDNAME = 'DateBOSentRMP' THEN 
   ADSTORAGE.VALUEDATE
    END AS DATEBOSENTRMP
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'DateBOSentRMP'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUEDATE;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_DATECOPYPORMP source

CREATE VIEW ITXVIEW_ADSTORAGE_DATECOPYPORMP AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'DateCopyPORMP'
        AND ADSTORAGE.FIELDNAME = 'DateCopyPORMP' THEN 
   ADSTORAGE.VALUEDATE
    END AS DATECOPYPORMP
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'DateCopyPORMP'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUEDATE;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_DATEPORECEIVEDFACTORY source

CREATE VIEW ITXVIEW_ADSTORAGE_DATEPORECEIVEDFACTORY AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'DatePOReceivedFactory'
        AND ADSTORAGE.FIELDNAME = 'DatePOReceivedFactory' THEN 
   ADSTORAGE.VALUEDATE
    END AS DATEPORECEIVEDFACTORY
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'DatePOReceivedFactory'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUEDATE;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_DATERECEIVEDKNTRMP source

CREATE VIEW ITXVIEW_ADSTORAGE_DATERECEIVEDKNTRMP AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'DateReceivedKNTRMP'
        AND ADSTORAGE.FIELDNAME = 'DateReceivedKNTRMP' THEN 
   ADSTORAGE.VALUEDATE
    END AS DATERECEIVEDKNTRMP
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'DateReceivedKNTRMP'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUEDATE;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_KAINAKJ source

CREATE VIEW ITXVIEW_ADSTORAGE_KainAKJ AS
SELECT
    PROJECTCODE,
    UOMCODE,
    SUM(TAKEN_STOCK) AS TEKENSTOCK,
    VALUESTRING,
    TGLRENCANA_AKJ
FROM
    (
        SELECT
            SALESORDERLINE.SALESORDERCODE AS PROJECTCODE,
            SALESORDERLINE.USERPRIMARYUOMCODE AS UOMCODE,
            CASE
                WHEN NAMENAME = 'KainAKJ'
                AND ADSTORAGE.VALUESTRING = 1
	    	THEN SUM(SALESORDERLINE.USERPRIMARYQUANTITY)
                ELSE 0
            END   
	    AS TAKEN_STOCK,
            ADSTORAGE.VALUESTRING,
            CASE
                WHEN ADSTORAGE.VALUESTRING = 1 THEN d.DATEPORECEIVEDFACTORY
            END AS TGLRENCANA_AKJ
        FROM
            ADSTORAGE ADSTORAGE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        LEFT JOIN ITXVIEW_ADSTORAGE_DATEPORECEIVEDFACTORY d ON
            d.CODE = SALESORDERLINE.SALESORDERCODE
        WHERE
            NAMENAME = 'KainAKJ'
            AND ADSTORAGE.VALUESTRING = 1
            AND SALESORDERLINE.LINETEMPLATECODE NOT IN (
                'STO', 'TAS', 'LAB', 'ENQ', 'CWE', 'CWD', 'CAP'
            )
        GROUP BY
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.USERPRIMARYQUANTITY,
            SALESORDERLINE.USERPRIMARYUOMCODE,
            SALESORDERLINE.LINETEMPLATECODE,
            ADSTORAGE.NAMENAME,
            ADSTORAGE.VALUESTRING,
            d.DATEPORECEIVEDFACTORY
    )
WHERE 
      PROJECTCODE IN (
        'DOM2300222', 'DOM2300227'
    )
GROUP BY
    PROJECTCODE,
    UOMCODE,
    VALUESTRING,
    TGLRENCANA_AKJ;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_KNT_TGLRENCANA source

CREATE VIEW ITXVIEW_ADSTORAGE_KNT_TGLRENCANA AS  
SELECT
    *
FROM
    (
        SELECT
            DISTINCT 
    CASE
                WHEN p.ORIGDLVSALORDLINESALORDERCODE IS NULL THEN p.PROJECTCODE
                ELSE p.ORIGDLVSALORDLINESALORDERCODE
            END AS SALESORDERCODE,
            p.SUBCODE01,
            p.SUBCODE02,
            p.SUBCODE03,
            a.TGLRENCANA
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN 
			(
                SELECT
                    DISTINCT 
			a.UNIQUEID,
                    CASE
                        WHEN a.NAMENAME = 'TglRencana'
                        AND a.FIELDNAME = 'TglRencana' THEN a.VALUEDATE
                    END AS TGLRENCANA
                FROM
                    ADSTORAGE a
                WHERE
                    a.NAMENAME = 'TglRencana'
                GROUP BY
                    a.UNIQUEID,
                    a.NAMENAME,
                    a.FIELDNAME,
                    a.VALUEDATE
            ) a ON
            a.UNIQUEID = p.ABSUNIQUEID
    );


-- DB2ADMIN.ITXVIEW_ADSTORAGE_REMARKS source

CREATE VIEW ITXVIEW_ADSTORAGE_Remarks AS
SELECT
    UNIQUEID,
    SALESORDER.CODE,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'Remarks'
        AND ADSTORAGE.FIELDNAME = 'Remarks' THEN 
   ADSTORAGE.VALUESTRING
    END AS Remarks
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'Remarks'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUESTRING;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_SALESORDER source

CREATE VIEW ITXVIEW_ADSTORAGE_SalesOrder AS
SELECT
    UNIQUEID,
    salesorder.code,
    CASE
        WHEN ADSTORAGE.NAMENAME = 'SalesOrder'
        AND ADSTORAGE.FIELDNAME = 'SalesOrder' THEN 
   ADSTORAGE.VALUESTRING
    END AS SalesOrder
FROM
    ADSTORAGE ADSTORAGE
LEFT JOIN SALESORDER SALESORDER ON
    SALESORDER .ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    NAMENAME = 'SalesOrder'
GROUP BY
    UNIQUEID,
    SALESORDER.CODE,
    NAMENAME,
    FIELDNAME,
    VALUESTRING;


-- DB2ADMIN.ITXVIEW_ADSTORAGE_TGL_KNT source

CREATE VIEW ITXVIEW_ADSTORAGE_TGL_KNT AS
SELECT
    DISTINCT 
SALESORDERCODE,
    TGLRENCANA
FROM
    (
        SELECT
            a.CODE AS ALLOCATION_CODE,
            a.ORDERCODE AS DEMAND_KFF,
            a2.LOTCODE AS DEMAND_KGF,
            p2.PRODUCTIONORDERCODE,
            CASE
                WHEN a2.PROJECTCODE IS NULL THEN a2.LOTCODE
                ELSE a2.PROJECTCODE
            END AS PROJECTCODE,
            p.DLVSALORDERLINESALESORDERCODE AS SALESORDERCODE,
            a3.VALUEDATE AS TGLRENCANA
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN ALLOCATION a ON
            a.ORDERCODE = p.CODE
            AND a.DETAILTYPE = 1
        LEFT JOIN ALLOCATION a2 ON
            a2.CODE = a.CODE
            AND a2.DETAILTYPE = 0
        LEFT JOIN PRODUCTIONRESERVATION p3 ON
            p3.ORDERCODE = a2.LOTCODE
        LEFT JOIN PRODUCTIONDEMAND p5 ON
            p5.CODE = a2.LOTCODE
        LEFT JOIN ADSTORAGE a3 ON
            a3.UNIQUEID = p5.ABSUNIQUEID
            AND a3.FIELDNAME = 'TglRencana'
        WHERE
            --	a.ORDERCODE = '00140184' AND 
            p2.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            a.CODE,
            a.ORDERCODE,
            a2.LOTCODE,
            p2.PRODUCTIONORDERCODE,
            p.DLVSALORDERLINESALESORDERCODE,
            a3.VALUEDATE,
            a2.PROJECTCODE
    );


-- DB2ADMIN.ITXVIEW_ADS_NO_ORDER_LEGACY source

CREATE VIEW ITXVIEW_ADS_NO_ORDER_LEGACY AS
SELECT
    s.ABSUNIQUEID,
    s.CODE,
    a.VALUESTRING AS BonOrderLegacy,
    a1.VALUESTRING AS salesorderLegacy
FROM
    SALESORDER s
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s.ABSUNIQUEID
    AND a.FIELDNAME = 'BonOrder'
LEFT JOIN ADSTORAGE a1 ON
    a1.UNIQUEID = s.ABSUNIQUEID
    AND a1.FIELDNAME = 'SalesOrder'
GROUP BY
    s.ABSUNIQUEID,
    s.CODE,
    a.VALUESTRING,
    a1.VALUESTRING;


-- DB2ADMIN.ITXVIEW_ALAMATSJ_PPC source

CREATE VIEW ITXVIEW_ALAMATSJ_PPC AS
SELECT
    SALESORDER.CODE,
    SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.POSTALCODE,
    ADDRESS.ADDRESSPHONENUMBER,
    ADDRESS.ADDRESSFAXNUMBER
FROM
    SALESORDER SALESORDER
LEFT JOIN DB2ADMIN.ADDRESS ADDRESS ON
    SALESORDER.DELIVERYPOINTCODE = ADDRESS.CODE
    AND SALESORDER.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID;


-- DB2ADMIN.ITXVIEW_ALLOCATION_1 source

CREATE VIEW ITXVIEW_ALLOCATION_1 AS
SELECT
    DISTINCT UTAMA.CODE,
    iasp.LOTCODE,
    UTAMA.USERPRIMARYQUANTITY_NON_FOC,
    UTAMA.USERPRIMARYQUANTITY_NON_FOC - FOC_KG AS USERPRIMARYQUANTITY,
    UTAMA.USERSECONDARYQUANTITY_NON_FOC,
    UTAMA.USERSECONDARYQUANTITY_NON_FOC - FOC_YARD AS USERSECONDARYUSEDQUANTITY,
    UTAMA.QUALITYREASON,
    UTAMA.JML_FOC_KG,
    UTAMA.JML_FOC_YARD,
    UTAMA.ORDERCODE,
    UTAMA.ORDERLINE,
    UTAMA.PROJECTCODE,
    UTAMA.ALLOCATIONDATE,
    UTAMA.DECOSUBCODE01,
    UTAMA.DECOSUBCODE02,
    UTAMA.DECOSUBCODE03,
    UTAMA.DECOSUBCODE04,
    UTAMA.DECOSUBCODE05,
    UTAMA.DECOSUBCODE06,
    UTAMA.JENIS_KAIN,
    UTAMA.NO_ITEM,
    UTAMA.EXTERNALREFERENCE
FROM
    (
        SELECT
            ALLOCATION.CODE AS CODE,
            ALLOCATION.USERPRIMARYQUANTITY AS USERPRIMARYQUANTITY_NON_FOC,
            ALLOCATION.USERSECONDARYUSEDQUANTITY AS USERSECONDARYQUANTITY_NON_FOC,
            CASE
                WHEN (ITXVIEW_DETAIL_FOC_INVOICE.FOC_KG) IS NULL THEN 0
                ELSE (ITXVIEW_DETAIL_FOC_INVOICE.FOC_KG)
            END AS FOC_KG,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_KG AS JML_FOC_KG,
            CASE
                WHEN (ITXVIEW_DETAIL_FOC_INVOICE.FOC_YARD) IS NULL THEN 0
                ELSE (ITXVIEW_DETAIL_FOC_INVOICE.FOC_YARD)
            END AS FOC_YARD,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_YARD AS JML_FOC_YARD,
            ITXVIEW_DETAIL_FOC_INVOICE.QUALITYREASON AS QUALITYREASON,
            ALLOCATION.ORDERCODE AS ORDERCODE,
            ALLOCATION.ORDERLINE AS ORDERLINE,
            ALLOCATION.PROJECTCODE AS PROJECTCODE,
            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
            a.EXTERNALITEMCODE AS NO_ITEM,
            a.EXTERNALREFERENCE AS EXTERNALREFERENCE
        FROM
            ALLOCATION ALLOCATION
        LEFT JOIN ITXVIEW_DETAIL_FOC_INVOICE ITXVIEW_DETAIL_FOC_INVOICE ON
            ALLOCATION.CODE = ITXVIEW_DETAIL_FOC_INVOICE.CODE
        LEFT JOIN PRODUCT PRODUCT ON
            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND ALLOCATION.DESTINATIONTYPE = '7'
    )UTAMA
LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
    iasp.CODE = UTAMA.CODE
    AND iasp.DECOSUBCODE01 = UTAMA.DECOSUBCODE01
    AND iasp.DECOSUBCODE02 = UTAMA.DECOSUBCODE02
    AND iasp.DECOSUBCODE03 = UTAMA.DECOSUBCODE03
    AND iasp.DECOSUBCODE04 = UTAMA.DECOSUBCODE04
    AND iasp.DECOSUBCODE05 = UTAMA.DECOSUBCODE05
    AND iasp.DECOSUBCODE06 = UTAMA.DECOSUBCODE06;


-- DB2ADMIN.ITXVIEW_ALLOCATION_2 source

CREATE VIEW ITXVIEW_ALLOCATION_2 AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    --CODE,
    LOTCODE,
    SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
    SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
    SUM(qty_pcs) AS qty_pcs,
    PRICE,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_YD,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        ELSE 0
    END jml_harga_kg,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_m,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN ROUND((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        ELSE 0
    END jml_harga_un,
    --    QUALITYREASONCODE,
    ORDERCODE,
    --        ORDERLINE,    
    trim(PRICEUNITOFMEASURECODE) AS PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    trim(SALDOCPROVISIONALCOUNTERCODE) AS SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA
FROM
    (
        SELECT
            DISTINCT 
    SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERPRIMARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                )THEN SUM(USERPRIMARYQUANTITY)
                ELSE SUM(USERPRIMARYQUANTITY)
            END USERPRIMARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
                ELSE SUM(USERSECONDARYQUANTITY)
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
                ELSE SUM(BASESECONDARYQUANTITY)
            END AS BASESECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(qty_pcs)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(qty_pcs)
                ELSE SUM(qty_pcs)
            END AS qty_pcs,
            PRICE,
            QUALITYREASONCODE,
            ORDERCODE,
            ORDERLINE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            --    PROJECTCODE,
            ITEMTYPECODE,
            CURR,
            ALLOCATIONDATE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            JENIS_KAIN,
            NO_ITEM,
            EXTERNALREFERENCE,
            WARNA
        FROM
            (
                SELECT
                    DISTINCT
        	ALLOCATION.ORDERCODE AS SALESDOCUMENTPROVISIONALCODE,
                    s.DLVSALORDERLINESALESORDERCODE,
                    ALLOCATION.CODE AS CODE,
                    iasp.itemelementcode,
                    iasp.LOTCODE,
                    CURR.CURR,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERSECONDARYQUANTITY
                    END USERSECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.BASEPRIMARYQUANTITY
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                        AND iasp.BASESECONDARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN iasp.ITEMTYPECODE = 'CAP'
                        AND iasp.BASEPRIMARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE 0
                    END qty_pcs,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY * 0.9144
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.BASESECONDARYQUANTITY * 0.9144
                    END BASESECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.BASEPRIMARYQUANTITY
                        ELSE 0
                    END AS FOC_KG,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                        ELSE 0
                    END AS FOC_YARD,
                    CASE
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE s.PRICE
                    END AS PRICE,
                    s.PRICEUNITOFMEASURECODE,
                    e.QUALITYREASONCODE,
                    s.PREVIOUSCODE,
                    s.SALDOCPROVISIONALCOUNTERCODE,
                    ALLOCATION.ORDERCODE AS ORDERCODE,
                    ALLOCATION.ORDERLINE AS ORDERLINE,
                    --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
                    ALLOCATION.ITEMTYPECODE,
                    ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                    ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                    ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                    CASE
                        WHEN ALLOCATION.ITEMTYPECODE = 'GYR' THEN s.ITEMDESCRIPTION
                        ELSE PRODUCT.LONGDESCRIPTION
                    END AS JENIS_KAIN,
                    a.EXTERNALITEMCODE AS NO_ITEM,
                    a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                    UPPER(i.WARNA)AS WARNA
                FROM
                    ALLOCATION ALLOCATION
                LEFT JOIN PRODUCT PRODUCT ON
                    ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
                LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                    ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                    AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                    AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                    iasp.CODE = ALLOCATION.CODE
                    AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                    AND iasp.DECOSUBCODE08 = ALLOCATION.DECOSUBCODE08
                    AND iasp.DECOSUBCODE09 = ALLOCATION.DECOSUBCODE09
                    AND iasp.DECOSUBCODE10 = ALLOCATION.DECOSUBCODE10
                LEFT JOIN ELEMENTS e ON
                    iasp.itemelementcode = e.CODE
                LEFT JOIN SALESDOCUMENTLINE s ON
                    ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = s.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = s.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = s.SUBCODE10
                    AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                    AND ALLOCATION.ORDERLINE = s.ORDERLINE
                    --            AND ALLOCATION.ORDERCODE = s.PREVIOUSCODE
                    --            AND ALLOCATION.ORDERLINE = s.PREVIOUSORDERLINE
                LEFT JOIN ITXVIEWCOLOR i ON
                    ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                    CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                    --	    		AND e.CODE ='0009497300101'
                    --	    	and	ALLOCATION.ORDERCODE='ESP2300279'
                    ----	    	AND iasp.LOTCODE = '00060032'
                    --                                                                                	        AND ALLOCATION.ORDERCODE IN ('ESP2300844')
            )
        WHERE
            USERPRIMARYQUANTITY <> 0
            --            AND SALESDOCUMENTPROVISIONALCODE='CWP2200010'
            --    AND WARNA = 'BLACK 095A'
            --            AND price like '%47926%'
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            ORDERCODE,
            ORDERLINE,
            --    PROJECTCODE,
            PRICE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            ALLOCATIONDATE,
            ITEMTYPECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            QUALITYREASONCODE,
            JENIS_KAIN,
            NO_ITEM,
            CURR,
            EXTERNALREFERENCE,
            WARNA
    )
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    --CODE,
    LOTCODE,
    --    QUALITYREASONCODE,
    ORDERCODE,
    --        ORDERLINE,    
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    CURR,
    PRICE,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_2B source

CREATE VIEW ITXVIEW_ALLOCATION_2B AS
SELECT
    DISTINCT 
    SALESDOCUMENTPROVISIONALCODE,
    --    DLVSALORDERLINESALESORDERCODE,
    CODE,
    LOTCODE,   
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(USERPRIMARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        )THEN SUM(round(USERPRIMARYQUANTITY, 2))
        ELSE SUM(USERPRIMARYQUANTITY)
    END USERPRIMARYQUANTITY,
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(USERSECONDARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(USERSECONDARYQUANTITY)
        ELSE SUM(USERSECONDARYQUANTITY)
    END AS USERSECONDARYQUANTITY,
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(BASESECONDARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(BASESECONDARYQUANTITY)
        ELSE SUM(BASESECONDARYQUANTITY)
    END AS BASESECONDARYQUANTITY,
       CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(qty_pcs)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(qty_pcs)
        ELSE SUM(qty_pcs)
    END AS qty_pcs,
        CASE
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_YD,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        ELSE 0
    END jml_harga_kg,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_m,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN ROUND((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        ELSE 0
    END jml_harga_un,
    PRICE,
    --    QUALITYREASONCODE,
    ORDERCODE,
    --    ORDERLINE,    
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    CURR,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA
FROM
    (
        SELECT
            DISTINCT
        s.SALESDOCUMENTPROVISIONALCODE,
            s.DLVSALORDERLINESALESORDERCODE,
            ALLOCATION.CODE AS CODE,
            iasp.itemelementcode,
            iasp.LOTCODE,
            CURR.CURR,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERSECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERSECONDARYQUANTITY
            END USERSECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERPRIMARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERPRIMARYQUANTITY
            END USERPRIMARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                AND iasp.BASESECONDARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN round(iasp.BASESECONDARYQUANTITY , 2)
                WHEN iasp.ITEMTYPECODE = 'CAP'
                AND iasp.BASEPRIMARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASEPRIMARYQUANTITY
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE 0
            END qty_pcs,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YARD,
            CASE
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE s.PRICE
            END AS PRICE,
            s.PRICEUNITOFMEASURECODE,
            e.QUALITYREASONCODE,
            s.PREVIOUSCODE,
            s.SALDOCPROVISIONALCOUNTERCODE,
            ALLOCATION.ORDERCODE AS ORDERCODE,
            ALLOCATION.ORDERLINE AS ORDERLINE,
            --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
            a.EXTERNALITEMCODE AS NO_ITEM,
            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            UPPER(i.WARNA)AS WARNA
        FROM
            ALLOCATION ALLOCATION
        LEFT JOIN PRODUCT PRODUCT ON
            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
            iasp.CODE = ALLOCATION.CODE
            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
        LEFT JOIN ELEMENTS e ON
            iasp.itemelementcode = e.CODE
        LEFT JOIN SALESDOCUMENTLINE s ON
            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
            AND ALLOCATION.ORDERLINE = s.ORDERLINE
        LEFT JOIN ITXVIEWCOLOR i ON
            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
        LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
            --	    AND  s.SALESDOCUMENTPROVISIONALCODE  ='POD2308412'
    )
WHERE
    USERPRIMARYQUANTITY <> 0
    --        AND SALESDOCUMENTPROVISIONALCODE='POD2307522'
    --    AND WARNA = 'BLACK 095A'
    --    AND LOTCODE = '00109262'
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    --    DLVSALORDERLINESALESORDERCODE,
    CODE,
    LOTCODE,
    ORDERCODE,
    ORDERLINE,
    --    PROJECTCODE,
    PRICE,
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    ALLOCATIONDATE,
    ITEMTYPECODE,
    SALDOCPROVISIONALCOUNTERCODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    QUALITYREASONCODE,
    JENIS_KAIN,
    NO_ITEM,
    CURR,
    EXTERNALREFERENCE,
    WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_2_A source

CREATE VIEW ITXVIEW_ALLOCATION_2_a AS
SELECT
    DISTINCT 
    SALESDOCUMENTPROVISIONALCODE,
    DLVSALORDERLINESALESORDERCODE,
    ALLOCATIONCODE,
    LOTCODE,   
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(USERPRIMARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        )THEN SUM(round(USERPRIMARYQUANTITY, 2))
        ELSE SUM(USERPRIMARYQUANTITY)
    END USERPRIMARYQUANTITY,
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(USERSECONDARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(USERSECONDARYQUANTITY)
        ELSE SUM(USERSECONDARYQUANTITY)
    END AS USERSECONDARYQUANTITY,
    CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(BASESECONDARYQUANTITY)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(BASESECONDARYQUANTITY)
        ELSE SUM(BASESECONDARYQUANTITY)
    END AS BASESECONDARYQUANTITY,
       CASE
        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
        ) THEN SUM(qty_pcs)
        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN SUM(qty_pcs)
        ELSE SUM(qty_pcs)
    END AS qty_pcs,
    PRICE,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_YD,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        ELSE 0
    END jml_harga_kg,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_m,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN ROUND((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        ELSE 0
    END jml_harga_un,
    QUALITYREASONCODE,
    ORDERCODE,
    ORDERLINE,    
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA
FROM
    (
        SELECT
            DISTINCT
        s.SALESDOCUMENTPROVISIONALCODE,
            s.DLVSALORDERLINESALESORDERCODE,
            ALLOCATION.CODE AS ALLOCATIONCODE,
            iasp.itemelementcode,
            iasp.LOTCODE,
            CURR.CURR,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERSECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERSECONDARYQUANTITY
            END USERSECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERPRIMARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERPRIMARYQUANTITY
            END USERPRIMARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                AND iasp.BASESECONDARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN round(iasp.BASESECONDARYQUANTITY , 2)
                WHEN iasp.ITEMTYPECODE = 'CAP'
                AND iasp.BASEPRIMARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASEPRIMARYQUANTITY
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE 0
            END qty_pcs,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YARD,
            CASE
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE s.PRICE
            END AS PRICE,
            s.PRICEUNITOFMEASURECODE,
            e.QUALITYREASONCODE,
            s.PREVIOUSCODE,
            s.SALDOCPROVISIONALCOUNTERCODE,
            ALLOCATION.ORDERCODE AS ORDERCODE,
            ALLOCATION.ORDERLINE AS ORDERLINE,
            --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
            a.EXTERNALITEMCODE AS NO_ITEM,
            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            UPPER(i.WARNA)AS WARNA
        FROM
            ALLOCATION ALLOCATION
        LEFT JOIN PRODUCT PRODUCT ON
            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
            iasp.CODE = ALLOCATION.CODE
            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
        LEFT JOIN ELEMENTS e ON
            iasp.itemelementcode = e.CODE
        LEFT JOIN SALESDOCUMENTLINE s ON
            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
            AND ALLOCATION.ORDERLINE = s.ORDERLINE
        LEFT JOIN ITXVIEWCOLOR i ON
            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
        LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND ALLOCATION.DESTINATIONTYPE = '7'
            --	    AND ALLOCATION.ITEMTYPECODE = 'FKF'
            --                                                                                	        AND ALLOCATION.ORDERCODE IN ('POD2308042')/
            --	        AND ALLOCATION.CODE IN ('000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048')
            --              	AND ITXVIEW_DETAIL_FOC_INVOICE.QUALITYREASON = 'FOC'
            --        	    		 AND ALLOCATION.ORDERCODE LIKE '%POD2305%'
    )
WHERE
    USERPRIMARYQUANTITY <> 0
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    DLVSALORDERLINESALESORDERCODE,
    ALLOCATIONCODE,
    LOTCODE,
    ORDERCODE,
    ORDERLINE,
    --    PROJECTCODE,
    PRICE,
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    ALLOCATIONDATE,
    ITEMTYPECODE,
    SALDOCPROVISIONALCOUNTERCODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    QUALITYREASONCODE,
    JENIS_KAIN,
    NO_ITEM,
    CURR,
    EXTERNALREFERENCE,
    WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_2_FKF source

CREATE VIEW ITXVIEW_ALLOCATION_2_FKF AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    --DLVSALORDERLINESALESORDERCODE,
    CODE,
    LOTCODE,
    SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
    SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
    SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
    SUM(qty_pcs) AS qty_pcs,
    PRICE,
    sum(jml_harga_kg) AS jml_harga_kg,
    sum(jml_harga_YD) AS jml_harga_YD,
    sum(jml_harga_m) AS jml_harga_m,
    sum(jml_harga_un) AS jml_harga_un,
    --    QUALITYREASONCODE,
    ORDERCODE,
    --    ORDERLINE,    
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA
FROM
    (
        SELECT
            DISTINCT 
    SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERPRIMARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                )THEN SUM(round(USERPRIMARYQUANTITY, 2))
                ELSE SUM(USERPRIMARYQUANTITY)
            END USERPRIMARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
                ELSE SUM(USERSECONDARYQUANTITY)
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
                ELSE SUM(BASESECONDARYQUANTITY)
            END AS BASESECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(qty_pcs)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(qty_pcs)
                ELSE SUM(qty_pcs)
            END AS qty_pcs,
            PRICE,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un,
            QUALITYREASONCODE,
            ORDERCODE,
            ORDERLINE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            --    PROJECTCODE,
            ITEMTYPECODE,
            ALLOCATIONDATE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            JENIS_KAIN,
            NO_ITEM,
            EXTERNALREFERENCE,
            WARNA
        FROM
            (
                SELECT
                    DISTINCT
        s.SALESDOCUMENTPROVISIONALCODE,
                    s.DLVSALORDERLINESALESORDERCODE,
                    ALLOCATION.CODE AS CODE,
                    iasp.itemelementcode,
                    iasp.LOTCODE,
                    CURR.CURR,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERSECONDARYQUANTITY
                    END USERSECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERPRIMARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERPRIMARYQUANTITY
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                        AND iasp.BASESECONDARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN round(iasp.BASESECONDARYQUANTITY , 2)
                        WHEN iasp.ITEMTYPECODE = 'CAP'
                        AND iasp.BASEPRIMARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE 0
                    END qty_pcs,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                    END BASESECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS FOC_KG,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                        ELSE 0
                    END AS FOC_YARD,
                    CASE
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE s.PRICE
                    END AS PRICE,
                    s.PRICEUNITOFMEASURECODE,
                    e.QUALITYREASONCODE,
                    s.PREVIOUSCODE,
                    s.SALDOCPROVISIONALCOUNTERCODE,
                    ALLOCATION.ORDERCODE AS ORDERCODE,
                    ALLOCATION.ORDERLINE AS ORDERLINE,
                    --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
                    ALLOCATION.ITEMTYPECODE,
                    ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                    ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                    ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                    a.EXTERNALITEMCODE AS NO_ITEM,
                    a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                    UPPER(i.WARNA)AS WARNA
                FROM
                    ALLOCATION ALLOCATION
                LEFT JOIN PRODUCT PRODUCT ON
                    ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
                LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                    ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                    AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                    AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                    iasp.CODE = ALLOCATION.CODE
                    AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                LEFT JOIN ELEMENTS e ON
                    iasp.itemelementcode = e.CODE
                LEFT JOIN SALESDOCUMENTLINE s ON
                    ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                    AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                    AND ALLOCATION.ORDERLINE = s.ORDERLINE
                LEFT JOIN ITXVIEWCOLOR i ON
                    ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                    CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
                    AND ALLOCATION.ITEMTYPECODE IN (
                        'FKF', 'CAP'
                    )
                    --                                                                                	        AND ALLOCATION.ORDERCODE IN ('POD2308042')
                    --	        AND ALLOCATION.CODE IN ('000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048')
                    --              	AND ITXVIEW_DETAIL_FOC_INVOICE.QUALITYREASON = 'FOC'
                    --        	    		 AND ALLOCATION.ORDERCODE LIKE '%POD2305%'
                ORDER BY
                    ALLOCATION.CODE ASC
            )
        WHERE
            USERPRIMARYQUANTITY <> 0
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            ORDERCODE,
            ORDERLINE,
            --    PROJECTCODE,
            PRICE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            ALLOCATIONDATE,
            ITEMTYPECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            QUALITYREASONCODE,
            JENIS_KAIN,
            NO_ITEM,
            CURR,
            EXTERNALREFERENCE,
            WARNA
    )
    --            WHERE SALESDOCUMENTPROVISIONALCODE = 'PCA2300036'
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    --	DLVSALORDERLINESALESORDERCODE,
    CODE,
    LOTCODE,
    --    QUALITYREASONCODE,
    ORDERCODE,
    --    ORDERLINE,    
    PRICEUNITOFMEASURECODE,
    PREVIOUSCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
    PRICE,
    ALLOCATIONDATE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    CUSTOMERCODE,
    JENIS_KAIN,
    NO_ITEM,
    EXTERNALREFERENCE,
    WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_3 source

CREATE VIEW ITXVIEW_ALLOCATION_3 AS
SELECT
    INVOICE,
    	SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
    --        CODE,
    LOTCODE,
        SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
        SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
        SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
        SUM(qty_pcs) AS qty_pcs,
        SUM(USERPRIMARYQUANTITY) * PRICE AS harga,
        PRICE,
    --        QUALITYREASONCODE,
    ORDERCODE,
    --        ORDERLINE,
    PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
        CURR,
        ALLOCATIONDATE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
        JENIS_KAIN,
        NO_ITEM,
        EXTERNALREFERENCE,
        WARNA
FROM
    (
        SELECT
            INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                )THEN SUM(USERPRIMARYQUANTITY)
                ELSE SUM(USERPRIMARYQUANTITY)
            END USERPRIMARYQUANTITY,
            SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
            SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
            SUM(qty_pcs) AS qty_pcs,
            PRICE,
            --        QUALITYREASONCODE,
            ORDERCODE,
            ORDERLINE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            --    PROJECTCODE,
            ITEMTYPECODE,
            CURR,
            ALLOCATIONDATE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            JENIS_KAIN,
            NO_ITEM,
            EXTERNALREFERENCE,
            WARNA
        FROM
            (
                SELECT
                    DISTINCT
            P.CODE AS INVOICE,
                    s.SALESDOCUMENTPROVISIONALCODE,
                    s.DLVSALORDERLINESALESORDERCODE,
                    ALLOCATION.CODE AS CODE,
                    iasp.itemelementcode,
                    iasp.LOTCODE,
                    p.ORDERCURRENCYCODE AS CURR,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERSECONDARYQUANTITY
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERPRIMARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERPRIMARYQUANTITY
                    END AS USERPRIMARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                        AND iasp.BASESECONDARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN iasp.ITEMTYPECODE = 'CAP'
                        AND iasp.BASEPRIMARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE 0
                    END AS qty_pcs,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN (
                            iasp.BASESECONDARYQUANTITY * 0.9144
                        )
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE (
                            iasp.BASESECONDARYQUANTITY * 0.9144
                        )
                    END BASESECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS FOC_KG,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                        ELSE 0
                    END AS FOC_YARD,
                    CASE
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE s.PRICE
                    END AS PRICE,
                    s.PRICEUNITOFMEASURECODE,
                    --            e.QUALITYREASONCODE,
                    s.PREVIOUSCODE,
                    s.SALDOCPROVISIONALCOUNTERCODE,
                    ALLOCATION.ORDERCODE AS ORDERCODE,
                    ALLOCATION.ORDERLINE AS ORDERLINE,
                    --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
                    ALLOCATION.ITEMTYPECODE,
                    ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                    ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                    ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                    a.EXTERNALITEMCODE AS NO_ITEM,
                    a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                    UPPER(i.WARNA)AS WARNA
                FROM
                    PLANTINVOICE p
                LEFT JOIN SALESDOCUMENTLINE s3 ON
                    p.CODE = s3.SALESDOCUMENTPROVISIONALCODE
                LEFT JOIN SALESDOCUMENTLINE s ON
                    s.ITEMTYPEAFICODE = s3.ITEMTYPEAFICODE
                    AND s.SALESDOCUMENTPROVISIONALCODE = s3.PREVIOUSCODE
                    AND s.ORDERLINE = s3.PREVIOUSORDERLINE
                    AND s.SUBCODE01 = s3.SUBCODE01
                    AND s.SUBCODE02 = s3.SUBCODE02
                    AND s.SUBCODE03 = s3.SUBCODE03
                    AND s.SUBCODE04 = s3.SUBCODE04
                    AND s.SUBCODE05 = s3.SUBCODE05
                    AND s.SUBCODE06 = s3.SUBCODE06
                    AND s.SUBCODE07 = s3.SUBCODE07
                    AND s.SUBCODE08 = s3.SUBCODE08
                    AND s.SUBCODE09 = s3.SUBCODE09
                    AND s.SUBCODE10 = s3.SUBCODE10
                LEFT JOIN ALLOCATION ALLOCATION ON
                    ALLOCATION.ITEMTYPECODE = s.ITEMTYPEAFICODE
                    AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                    AND ALLOCATION.ORDERLINE = s.ORDERLINE
                    AND ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = s.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = s.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = s.SUBCODE10
                LEFT JOIN PRODUCT PRODUCT ON
                    ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
                LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                    ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                    AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                    AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                    iasp.CODE = ALLOCATION.CODE
                    AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                LEFT JOIN ELEMENTS e ON
                    iasp.itemelementcode = e.CODE
                LEFT JOIN ITXVIEWCOLOR i ON
                    ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
                    --	    		        AND s.PRICEUNITOFMEASURECODE =  'kg'
                    --        	    		AND P.CODE LIKE '%M230%'      
                    --        	    		AND CURR.CURR = 'IDR'
                    --        AND p.CODE IN ('EX23110006')
            )
        WHERE
            USERPRIMARYQUANTITY <> 0
            --              AND INVOICE ='EX23110006'
            --            AND SALESDOCUMENTPROVISIONALCODE ='PED2400034' 
            --        AND WARNA = 'TAUPETASTIC'
            --        AND LOTCODE = '00085357'
        GROUP BY
            INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            CODE,
            LOTCODE,
            ORDERCODE,
            ORDERLINE,
            --    PROJECTCODE,
            PRICE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            ALLOCATIONDATE,
            ITEMTYPECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            --        QUALITYREASONCODE,
            JENIS_KAIN,
            NO_ITEM,
            CURR,
            EXTERNALREFERENCE,
            WARNA
        ORDER BY
            CODE ASC
    )
GROUP BY
    INVOICE,
        SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
    --        CODE,
    LOTCODE,
        ORDERCODE,
    --        ORDERLINE,
    --    PROJECTCODE,
    PRICE,
        PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        ALLOCATIONDATE,
        ITEMTYPECODE,
        SALDOCPROVISIONALCOUNTERCODE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
    --        QUALITYREASONCODE,
    JENIS_KAIN,
        NO_ITEM,
        CURR,
        EXTERNALREFERENCE,
        WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_CI source

CREATE VIEW ITXVIEW_ALLOCATION_CI AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    DLVSALORDERLINESALESORDERCODE,
    EXTERNALITEM,
    no_po,
    EXTERNALREFERENCE,
    PRICEUNITOFMEASURECODE,
    WARNA,
    SUM(USERPRIMARYQUANTITY) AS QTY_KG,
    SUM(USERSECONDARYQUANTITY) AS QTY_YD,
    SUM(BASESECONDARYQUANTITY) AS QTY_Meter,
    SUM(QTY_PCS) AS QTY_PCS,
        CASE
            WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'yd'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_YD,
        CASE
            WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'kg'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
        ELSE 0
    END jml_harga_kg,
        CASE
            WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        WHEN PRICEUNITOFMEASURECODE = 'm'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
        ELSE 0
    END jml_harga_m,
        CASE
            WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN ROUND((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'USD'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN round((SUM(qty_pcs)* price), 2)
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'un'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        WHEN PRICEUNITOFMEASURECODE = 'Lot'
        AND CURR = 'IDR'
        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
        ) THEN FLOOR((SUM(qty_pcs)* price))
        ELSE 0
    END jml_harga_un,
    PRICE,
    KAIN_AKJ
FROM
    (
        SELECT
            DISTINCT 
    	SALESDOCUMENTPROVISIONALCODE,
            EXTERNALITEM,
            PRICEUNITOFMEASURECODE,
            DLVSALORDERLINESALESORDERCODE,
            no_po,
            CURR,
            SALDOCPROVISIONALCOUNTERCODE,
            SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
            SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
            SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
            SUM(QTY_PCS) AS QTY_PCS,
            LOTCODE,
            EXTERNALREFERENCE,
            upper(WARNA) AS WARNA,
            PRICE,
            KAIN_AKJ
        FROM
            (
                SELECT
                    DISTINCT
        s.SALESDOCUMENTPROVISIONALCODE,
                    s.DLVSALORDERLINESALESORDERCODE,
                    CASE
                        WHEN s.EXTERNALITEM IS NULL THEN trim(s.SUBCODE02) || trim(s.SUBCODE03)
                        ELSE s.EXTERNALITEM
                    END EXTERNALITEM,
                    ALLOCATION.CODE AS CODE,
                    iasp.itemelementcode,
                    iasp.LOTCODE,
                    CURR.CURR,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERSECONDARYQUANTITY
                    END USERSECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERPRIMARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE iasp.USERPRIMARYQUANTITY
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                        AND iasp.BASESECONDARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN round(iasp.BASESECONDARYQUANTITY , 2)
                        WHEN iasp.ITEMTYPECODE = 'CAP'
                        AND iasp.BASEPRIMARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE 0
                    END qty_pcs,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                    END BASESECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS FOC_KG,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                        ELSE 0
                    END AS FOC_YARD,
                    CASE
                        WHEN ALLOCATION.CODE IN (
                            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                        ) THEN 0
                        ELSE s.PRICE
                    END AS PRICE,
                    s.PRICEUNITOFMEASURECODE,
                    e.QUALITYREASONCODE,
                    s.PREVIOUSCODE,
                    s.SALDOCPROVISIONALCOUNTERCODE,
                    ALLOCATION.ORDERCODE AS ORDERCODE,
                    ALLOCATION.ORDERLINE AS ORDERLINE,
                    --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
                    ALLOCATION.ITEMTYPECODE,
                    ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                    ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                    ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                    a.EXTERNALITEMCODE AS NO_ITEM,
                    a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                    CASE
                        WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
                        ELSE s2.EXTERNALREFERENCE
                    END AS no_po,
                    UPPER(i.WARNA)AS WARNA,
                    CASE
                        WHEN a2.VALUESTRING = 1 THEN 'AKJ'
                        ELSE 'NON-AKJ'
                    END KAIN_AKJ
                FROM
                    ALLOCATION ALLOCATION
                LEFT JOIN PRODUCT PRODUCT ON
                    ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
                LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                    ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                    AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                    AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                    iasp.CODE = ALLOCATION.CODE
                    AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                LEFT JOIN ELEMENTS e ON
                    iasp.itemelementcode = e.CODE
                LEFT JOIN SALESDOCUMENTLINE s ON
                    ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                    AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                    AND ALLOCATION.ORDERLINE = s.ORDERLINE
                LEFT JOIN ITXVIEWCOLOR i ON
                    ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                LEFT JOIN SALESDOCUMENTLINE s2 ON
                    s2.ITEMTYPEAFICODE = ALLOCATION.ITEMTYPECODE
                    AND s2.SALESDOCUMENTPROVISIONALCODE = ALLOCATION.ORDERCODE
                    AND s2.ORDERLINE = ALLOCATION.ORDERLINE
                    AND s2.SUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND s2.SUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND s2.SUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND s2.SUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND s2.SUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND s2.SUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND s2.SUBCODE07 = ALLOCATION.DECOSUBCODE07
                    AND s2.SUBCODE08 = ALLOCATION.DECOSUBCODE08
                    AND s2.SUBCODE09 = ALLOCATION.DECOSUBCODE09
                    AND s2.SUBCODE10 = ALLOCATION.DECOSUBCODE10
                LEFT JOIN SALESORDERLINE s3 ON
                    s3.SALESORDERCODE = s2.DLVSALORDERLINESALESORDERCODE
                    AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
                    AND s3.SUBCODE02 = s2.SUBCODE02
                    AND s3.SUBCODE03 = s2.SUBCODE03
                    AND s3.SUBCODE04 = s2.SUBCODE04
                    AND s3.SUBCODE05 = s2.SUBCODE05
                    AND s3.SUBCODE06 = s2.SUBCODE06
                    AND s3.SUBCODE07 = s2.SUBCODE07
                LEFT JOIN ADSTORAGE a2 ON
                    a2.UNIQUEID = s3.ABSUNIQUEID
                    AND a2.FIELDNAME = 'KainAKJ'
                LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                    CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
            )
        WHERE
            USERPRIMARYQUANTITY <> 0
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            EXTERNALITEM,
            SALDOCPROVISIONALCOUNTERCODE,
            --    CODE,
            LOTCODE,
            PRICE,
            PRICEUNITOFMEASURECODE,
            EXTERNALREFERENCE,
            no_po,
            CURR,
            WARNA,
            KAIN_AKJ
    )
    --                WHERE SALESDOCUMENTPROVISIONALCODE = 'ESP2400219'
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    DLVSALORDERLINESALESORDERCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    EXTERNALITEM,
    EXTERNALREFERENCE,
    no_po,
    PRICEUNITOFMEASURECODE,
    WARNA,
    CURR,
    PRICE,
    KAIN_AKJ;


-- DB2ADMIN.ITXVIEW_ALLOCATION_EXIM_FKF source

CREATE VIEW ITXVIEW_ALLOCATION_EXIM_FKF AS
	SELECT
    ITXVIEWALLOCATION0_SJEXIM.code,
    ITXVIEWALLOCATION0_SJEXIM.ITEMTYPECODE,
    ITXVIEWALLOCATION0_SJEXIM.BASEPRIMARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.BASESECONDARYQUANTITY,
    ROUND(ITXVIEWALLOCATION0_SJEXIM.USERSECONDARYQUANTITY, 2) AS USERSECONDARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.USERPRIMARYQUANTITY
FROM
    ITXVIEWALLOCATION0_SJEXIM ITXVIEWALLOCATION0_SJEXIM
WHERE
    ITXVIEWALLOCATION0_SJEXIM.ITEMTYPECODE = 'FKF'
    --a.code = '000000091112'
    --and
    --sjexm.PROVISIONALCODE = 'ESP2200335'
    --000000086055   ,000000065131(nonfoc)
    -- 000000091112    fkf
    -- 000000091107    kff;
    --a.code = '000000091112'
    --and
    --sjexm.PROVISIONALCODE = 'ESP2200335'
    --000000086055   ,000000065131(nonfoc)
    -- 000000091112    fkf
    -- 000000091107    kff;


-- DB2ADMIN.ITXVIEW_ALLOCATION_EXIM_NONFKF source

CREATE VIEW ITXVIEW_ALLOCATION_EXIM_NONFKF AS
	SELECT
    ITXVIEWALLOCATION0_SJEXIM.code,
    ITXVIEWALLOCATION0_SJEXIM.ITEMTYPECODE,
    ITXVIEWALLOCATION0_SJEXIM.BASEPRIMARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.BASESECONDARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.USERPRIMARYQUANTITY,
    round(ITXVIEWALLOCATION0_SJEXIM.USERSECONDARYQUANTITY , 2) AS USERSECONDARYQUANTITY
    --    ITXVIEWALLOCATION0_SJEXIM.BASEPRIMARYQUANTITY
FROM
    ITXVIEWALLOCATION0_SJEXIM ITXVIEWALLOCATION0_SJEXIM
WHERE
    ITXVIEWALLOCATION0_SJEXIM.ITEMTYPECODE <> 'FKF'
    --a.code = '000000091112'
    --and
    --sjexm.PROVISIONALCODE = 'ESP2200335'
    --000000086055   ,000000065131(nonfoc)
    -- 000000091112    fkf
    -- 000000091107    kff;    
    --AND ITXVIEWALLOCATION0_SJEXIM.code IN ('000000398914','000000398914','000000398919');


-- DB2ADMIN.ITXVIEW_ALLOCATION_INSPECT source

CREATE VIEW ITXVIEW_ALLOCATION_INSPECT AS
SELECT
    COMPANYCODE,
    DIVISIONCODE,
    ALLOWEDDIVISIONS,
    STATUS,
    ALLOCATIONDATE,
    CODE,
    LINENUMBER,
    COMPONENTLINENUMBER,
    TEMPLATECOMPANYCODE,
    TEMPLATECODE,
    EXPIRATIONDATE,
    THEORETICISSUEDATE,
    DETAILTYPE,
    ORIGINTYPE,
    DESTINATIONTYPE,
    PROGRESSSTATUS,
    LOGICALWAREHOUSECOMPANYCODE,
    LOGICALWAREHOUSECODE,
    ITEMTYPECOMPANYCODE,
    ITEMTYPECODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    DECOSUBCODE09,
    DECOSUBCODE10,
    ITEMDESCRIPTION,
    STOCKTYPECODE,
    QUALITYLEVELCODE,
    PHYSICALWAREHOUSECOMPANYCODE,
    PHYSICALWAREHOUSECODE,
    WHSLOCWHSZONEPHYWHSCMYCODE,
    WHSLOCATIONWAREHOUSEZONECODE,
    WAREHOUSELOCATIONCODE,
    CONTAINERCOMPANYCODE,
    CONTAINERITEMTYPECODE,
    CONTAINERSUBCODE01,
    CONTAINERELEMENTCOMPANYCODE,
    CONTAINERELEMENTCODE,
    LOTCOMPANYCODE,
    LOTCODE,
    ITEMELEMENTSUBCODEKEY,
    ITEMELEMENTCODE,
    PROJECTCODE,
    STATISTICALGROUPCOMPANYCODE,
    STATISTICALGROUPCODE,
    ORIGINTRNTRANSACTIONNUMBER,
    ORIGINTRNTRNDETAILNUMBER,
    USERPRIMARYUOMCODE,
    USERPRIMARYQUANTITY,
    BASEPRIMARYUOMCODE,
    BASEPRIMARYQUANTITY,
    USERPRIMARYUSEDQUANTITY,
    BASEPRIMARYUSEDQUANTITY,
    USERSECONDARYUOMCODE,
    USERSECONDARYQUANTITY,
    BASESECONDARYUOMCODE,
    BASESECONDARYQUANTITY,
    BASESECONDARYUSEDQUANTITY,
    USERSECONDARYUSEDQUANTITY,
    USERPACKAGINGUOMCODE,
    USERPACKAGINGQUANTITY,
    USERPACKAGINGUSEDQUANTITY,
    WEIGHTUNITOFMEASURECODE,
    WEIGHTGROSS,
    WEIGHTNET,
    WEIGHTREALNET,
    SUPPLIERTYPE,
    SUPPLIERCODE,
    CUSTOMERTYPE,
    CUSTOMERCODE,
    COUNTERCOMPANYCODE,
    COUNTERCODE,
    ORDERCODE,
    ORDERLINE,
    ORDERSUBLINENUMBER,
    ORDERCOMPONENTLINENUMBER,
    DELIVERYLINENUMBER,
    RESERVATIONLINENUMBER,
    REPLENISHMENTREQUISITIONTMPCOD,
    REPLENISHMENTCODE,
    PICKINGCOUNTERCOMPANYCODE,
    PICKINGCOUNTERCODE,
    PICKINGCODE,
    DERIVATIONCODE,
    DERIVATIONLINENUMBER,
    DERIVATIONCOMPONENTLINENUMBER,
    INTERNALGROUPINGNUMBER,
    INTERNALGROUPINGLINENUMBER,
    FULLITEMIDENTIFIER,
    CREATIONDATETIME,
    CREATIONUSER,
    LASTUPDATEDATETIME,
    LASTUPDATEUSER,
    CREATIONDATETIMEUTC,
    LASTUPDATEDATETIMEUTC,
    TOKENCODE,
    ABSUNIQUEID
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
WHERE
    ALLOCATION.DETAILTYPE = '0'
    AND ALLOCATION.PICKINGCODE IS NOT NULL;


-- DB2ADMIN.ITXVIEW_ALLOCATION_INVOICE source

CREATE VIEW ITXVIEW_ALLOCATION_INVOICE AS
SELECT
    	INVOICE,
    	SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
        CODE,
        LOTCODE,
    	SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
        SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
        SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
        SUM(qty_pcs) AS qty_pcs,
        PRICE,
    --        QUALITYREASONCODE,
    ORDERCODE,
        ORDERLINE,
        PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        SALDOCPROVISIONALCOUNTERCODE,
    --    PROJECTCODE,
    ITEMTYPECODE,
        CURR,
        ALLOCATIONDATE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
        JENIS_KAIN,
        NO_ITEM,
        EXTERNALREFERENCE,
        NO_SAP_CODE,
        CUSTOMER_CODE,
        WARNA
FROM
        (
        SELECT
            DISTINCT
            P.CODE AS INVOICE,
            s.SALESDOCUMENTPROVISIONALCODE,
            s.DLVSALORDERLINESALESORDERCODE,
            ALLOCATION.CODE AS CODE,
            iasp.itemelementcode,
            iasp.LOTCODE,
            p.ORDERCURRENCYCODE AS CURR,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERSECONDARYUSEDQUANTITY
            END USERSECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERPRIMARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERPRIMARYQUANTITY
            END USERPRIMARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                AND iasp.BASESECONDARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN iasp.ITEMTYPECODE = 'CAP'
                AND iasp.BASEPRIMARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASEPRIMARYQUANTITY
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE 0
            END qty_pcs,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN round(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE round(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YARD,
            CASE
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE s.PRICE
            END AS PRICE,
            s.PRICEUNITOFMEASURECODE,
            e.QUALITYREASONCODE,
            s.PREVIOUSCODE,
            s.SALDOCPROVISIONALCOUNTERCODE,
            ALLOCATION.ORDERCODE AS ORDERCODE,
            ALLOCATION.ORDERLINE AS ORDERLINE,
            --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
              CASE
                WHEN ALLOCATION.ITEMTYPECODE = 'GYR' THEN s.ITEMDESCRIPTION
                ELSE PRODUCT.LONGDESCRIPTION
            END AS JENIS_KAIN,
            a.EXTERNALITEMCODE AS NO_ITEM,
            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            a.EXTERNALDRAWINGNUMBER AS NO_SAP_CODE,
            p.CONSIGNEECUSTOMERSUPPLIERCODE AS CUSTOMER_CODE,
            UPPER(i.WARNA)AS WARNA
        FROM
            PLANTINVOICE p
        LEFT JOIN SALESDOCUMENTLINE s3 ON
            p.CODE = s3.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN SALESDOCUMENTLINE s ON
            s.ITEMTYPEAFICODE = s3.ITEMTYPEAFICODE
            AND s.SALESDOCUMENTPROVISIONALCODE = s3.PREVIOUSCODE
            AND s.ORDERLINE = s3.PREVIOUSORDERLINE
            AND s.SUBCODE01 = s3.SUBCODE01
            AND s.SUBCODE02 = s3.SUBCODE02
            AND s.SUBCODE03 = s3.SUBCODE03
            AND s.SUBCODE04 = s3.SUBCODE04
            AND s.SUBCODE05 = s3.SUBCODE05
            AND s.SUBCODE06 = s3.SUBCODE06
            AND s.SUBCODE07 = s3.SUBCODE07
            AND s.SUBCODE08 = s3.SUBCODE08
            AND s.SUBCODE09 = s3.SUBCODE09
            AND s.SUBCODE10 = s3.SUBCODE10
        LEFT JOIN ALLOCATION ALLOCATION ON
            ALLOCATION.ITEMTYPECODE = s.ITEMTYPEAFICODE
            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
            AND ALLOCATION.ORDERLINE = s.ORDERLINE
            AND ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = s.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = s.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = s.SUBCODE10
        LEFT JOIN PRODUCT PRODUCT ON
            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
            iasp.CODE = ALLOCATION.CODE
            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
        LEFT JOIN ELEMENTS e ON
            iasp.itemelementcode = e.CODE
        LEFT JOIN ITXVIEWCOLOR i ON
            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
            --                	    		AND p.CONSIGNEECUSTOMERSUPPLIERCODE ='C0001208'  
            --                	    		AND a.EXTERNALDRAWINGNUMBER IS NOT NULL
    )
WHERE
        USERPRIMARYQUANTITY <> 0
GROUP BY
    	INVOICE,
        SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
        CODE,
        LOTCODE,
        ORDERCODE,
        ORDERLINE,
    --    PROJECTCODE,
    PRICE,
        PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        ALLOCATIONDATE,
        ITEMTYPECODE,
        SALDOCPROVISIONALCOUNTERCODE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
    --        QUALITYREASONCODE,
    JENIS_KAIN,
        NO_ITEM,
        CURR,
        EXTERNALREFERENCE,
        NO_SAP_CODE,
        CUSTOMER_CODE,
        WARNA;


-- DB2ADMIN.ITXVIEW_ALLOCATION_LAPKIRIMGKJ source

CREATE VIEW ITXVIEW_ALLOCATION_LAPKIRIMGKJ AS
SELECT
    ALLOCATION.CODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.LOTCODE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.ORDERLINE
FROM
    ALLOCATION ALLOCATION
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL;


-- DB2ADMIN.ITXVIEW_ALLOCATION_SURATJALAN_PPC source

CREATE VIEW ITXVIEW_ALLOCATION_SURATJALAN_PPC AS
SELECT
    COMPANYCODE,
    DIVISIONCODE,
    ALLOWEDDIVISIONS,
    STATUS,
    ALLOCATIONDATE,
    CODE,
    LINENUMBER,
    COMPONENTLINENUMBER,
    TEMPLATECOMPANYCODE,
    TEMPLATECODE,
    EXPIRATIONDATE,
    THEORETICISSUEDATE,
    DETAILTYPE,
    ORIGINTYPE,
    DESTINATIONTYPE,
    PROGRESSSTATUS,
    LOGICALWAREHOUSECOMPANYCODE,
    LOGICALWAREHOUSECODE,
    ITEMTYPECOMPANYCODE,
    ITEMTYPECODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    DECOSUBCODE09,
    DECOSUBCODE10,
    ITEMDESCRIPTION,
    STOCKTYPECODE,
    QUALITYLEVELCODE,
    PHYSICALWAREHOUSECOMPANYCODE,
    PHYSICALWAREHOUSECODE,
    WHSLOCWHSZONEPHYWHSCMYCODE,
    WHSLOCATIONWAREHOUSEZONECODE,
    WAREHOUSELOCATIONCODE,
    CONTAINERCOMPANYCODE,
    CONTAINERITEMTYPECODE,
    CONTAINERSUBCODE01,
    CONTAINERELEMENTCOMPANYCODE,
    CONTAINERELEMENTCODE,
    LOTCOMPANYCODE,
    LOTCODE,
    ITEMELEMENTSUBCODEKEY,
    ITEMELEMENTCODE,
    PROJECTCODE,
    STATISTICALGROUPCOMPANYCODE,
    STATISTICALGROUPCODE,
    ORIGINTRNTRANSACTIONNUMBER,
    ORIGINTRNTRNDETAILNUMBER,
    USERPRIMARYUOMCODE,
    USERPRIMARYQUANTITY,
    BASEPRIMARYUOMCODE,
    BASEPRIMARYQUANTITY,
    USERPRIMARYUSEDQUANTITY,
    BASEPRIMARYUSEDQUANTITY,
    USERSECONDARYUOMCODE,
    USERSECONDARYQUANTITY,
    BASESECONDARYUOMCODE,
    BASESECONDARYQUANTITY,
    BASESECONDARYUSEDQUANTITY,
    USERSECONDARYUSEDQUANTITY,
    USERPACKAGINGUOMCODE,
    USERPACKAGINGQUANTITY,
    USERPACKAGINGUSEDQUANTITY,
    WEIGHTUNITOFMEASURECODE,
    WEIGHTGROSS,
    WEIGHTNET,
    WEIGHTREALNET,
    SUPPLIERTYPE,
    SUPPLIERCODE,
    CUSTOMERTYPE,
    CUSTOMERCODE,
    COUNTERCOMPANYCODE,
    COUNTERCODE,
    ORDERCODE,
    ORDERLINE,
    ORDERSUBLINENUMBER,
    ORDERCOMPONENTLINENUMBER,
    DELIVERYLINENUMBER,
    RESERVATIONLINENUMBER,
    REPLENISHMENTREQUISITIONTMPCOD,
    REPLENISHMENTCODE,
    PICKINGCOUNTERCOMPANYCODE,
    PICKINGCOUNTERCODE,
    PICKINGCODE,
    DERIVATIONCODE,
    DERIVATIONLINENUMBER,
    DERIVATIONCOMPONENTLINENUMBER,
    INTERNALGROUPINGNUMBER,
    INTERNALGROUPINGLINENUMBER,
    FULLITEMIDENTIFIER,
    CREATIONDATETIME,
    CREATIONUSER,
    LASTUPDATEDATETIME,
    LASTUPDATEUSER,
    CREATIONDATETIMEUTC,
    LASTUPDATEDATETIMEUTC,
    TOKENCODE,
    ABSUNIQUEID
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
WHERE
    ALLOCATION.DETAILTYPE = '0';


-- DB2ADMIN.ITXVIEW_ALLOCATION_SURATJALAN_PPC2 source

CREATE VIEW ITXVIEW_ALLOCATION_SURATJALAN_PPC2 AS
	SELECT
    DISTINCT 
    COMPANYCODE,
    DIVISIONCODE,
    ALLOWEDDIVISIONS,
    STATUS,
    ALLOCATIONDATE,
    CODE,
    LINENUMBER,
    COMPONENTLINENUMBER,
    TEMPLATECOMPANYCODE,
    TEMPLATECODE,
    EXPIRATIONDATE,
    THEORETICISSUEDATE,
    DETAILTYPE,
    ORIGINTYPE,
    DESTINATIONTYPE,
    PROGRESSSTATUS,
    LOGICALWAREHOUSECOMPANYCODE,
    LOGICALWAREHOUSECODE,
    ITEMTYPECOMPANYCODE,
    ITEMTYPECODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    DECOSUBCODE09,
    DECOSUBCODE10,
    ITEMDESCRIPTION,
    STOCKTYPECODE,
    QUALITYLEVELCODE,
    PHYSICALWAREHOUSECOMPANYCODE,
    PHYSICALWAREHOUSECODE,
    WHSLOCWHSZONEPHYWHSCMYCODE,
    WHSLOCATIONWAREHOUSEZONECODE,
    WAREHOUSELOCATIONCODE,
    CONTAINERCOMPANYCODE,
    CONTAINERITEMTYPECODE,
    CONTAINERSUBCODE01,
    CONTAINERELEMENTCOMPANYCODE,
    CONTAINERELEMENTCODE,
    LOTCOMPANYCODE,
    LOTCODE,
    ITEMELEMENTSUBCODEKEY,
    ITEMELEMENTCODE,
    PROJECTCODE,
    STATISTICALGROUPCOMPANYCODE,
    STATISTICALGROUPCODE,
    ORIGINTRNTRANSACTIONNUMBER,
    ORIGINTRNTRNDETAILNUMBER,
    USERPRIMARYUOMCODE,
    USERPRIMARYQUANTITY,
    BASEPRIMARYUOMCODE,
    BASEPRIMARYQUANTITY,
    USERPRIMARYUSEDQUANTITY,
    BASEPRIMARYUSEDQUANTITY,
    USERSECONDARYUOMCODE,
    USERSECONDARYQUANTITY,
    BASESECONDARYUOMCODE,
    BASESECONDARYQUANTITY,
    BASESECONDARYUSEDQUANTITY,
    USERSECONDARYUSEDQUANTITY,
    USERPACKAGINGUOMCODE,
    USERPACKAGINGQUANTITY,
    USERPACKAGINGUSEDQUANTITY,
    WEIGHTUNITOFMEASURECODE,
    WEIGHTGROSS,
    WEIGHTNET,
    WEIGHTREALNET,
    SUPPLIERTYPE,
    SUPPLIERCODE,
    CUSTOMERTYPE,
    CUSTOMERCODE,
    COUNTERCOMPANYCODE,
    COUNTERCODE,
    ORDERCODE,
    ORDERLINE,
    ORDERSUBLINENUMBER,
    ORDERCOMPONENTLINENUMBER,
    DELIVERYLINENUMBER,
    RESERVATIONLINENUMBER,
    REPLENISHMENTREQUISITIONTMPCOD,
    REPLENISHMENTCODE,
    PICKINGCOUNTERCOMPANYCODE,
    PICKINGCOUNTERCODE,
    PICKINGCODE,
    DERIVATIONCODE,
    DERIVATIONLINENUMBER,
    DERIVATIONCOMPONENTLINENUMBER,
    INTERNALGROUPINGNUMBER,
    INTERNALGROUPINGLINENUMBER,
    FULLITEMIDENTIFIER,
    CREATIONDATETIME,
    CREATIONUSER,
    LASTUPDATEDATETIME,
    LASTUPDATEUSER,
    CREATIONDATETIMEUTC,
    LASTUPDATEDATETIMEUTC,
    TOKENCODE,
    ABSUNIQUEID
FROM
     ALLOCATION a
WHERE
    a.DETAILTYPE = '0';


-- DB2ADMIN.ITXVIEW_ALLOCATION_SURATJALAN_PPC3 source

CREATE VIEW ITXVIEW_ALLOCATION_SURATJALAN_PPC3 AS
	SELECT
    DISTINCT 
    a.ALLOCATIONDATE,
    a.CODE,
    a.LINENUMBER,
    a.THEORETICISSUEDATE,
    a.DETAILTYPE,
    a.DESTINATIONTYPE,
    a.ITEMTYPECODE,
    a.ORIGINTRNTRANSACTIONNUMBER,
    a.DECOSUBCODE01,
    a.DECOSUBCODE02,
    a.DECOSUBCODE03,
    a.DECOSUBCODE04,
    a.DECOSUBCODE05,
    a.DECOSUBCODE06,
    a.DECOSUBCODE07,
    a.DECOSUBCODE08,
    a.DECOSUBCODE09,
    a.DECOSUBCODE10,
    a.LOTCODE,
    a.ITEMELEMENTCODE,  
    a.PROJECTCODE,
    a.USERPRIMARYUOMCODE,
     CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.USERPRIMARYQUANTITY
    END AS USERPRIMARYQUANTITY,
    a.BASEPRIMARYUOMCODE,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.BASEPRIMARYQUANTITY
    END AS BASEPRIMARYQUANTITY,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.USERPRIMARYUSEDQUANTITY
    END AS USERPRIMARYUSEDQUANTITY,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.BASEPRIMARYUSEDQUANTITY
    END AS BASEPRIMARYUSEDQUANTITY,
    a.USERSECONDARYUOMCODE,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.USERSECONDARYQUANTITY
    END AS USERSECONDARYQUANTITY,
    a.BASESECONDARYUOMCODE,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.BASESECONDARYQUANTITY
    END AS BASESECONDARYQUANTITY,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.BASESECONDARYUSEDQUANTITY
    END AS BASESECONDARYUSEDQUANTITY,
    CASE
        WHEN TRIM(e.QUALITYREASONCODE) = 'FOC' THEN 0
        ELSE a.USERSECONDARYUSEDQUANTITY
    END AS USERSECONDARYUSEDQUANTITY,
    a.COUNTERCOMPANYCODE,
    a.ORDERCODE,
    a.ORDERLINE,
    a.ORDERCOMPONENTLINENUMBER,
    a.PICKINGCOUNTERCOMPANYCODE,
    a.PICKINGCOUNTERCODE,
    a.PICKINGCODE,
    a.DERIVATIONCODE,
    e.QUALITYREASONCODE AS QUALITYREASON
FROM
     ALLOCATION a
LEFT JOIN ELEMENTSINSPECTION e ON
    e.ELEMENTCODE = a.ITEMELEMENTCODE
    AND e.ELEMENTITEMTYPECODE = a.ITEMTYPECODE
WHERE
    a.DETAILTYPE = '0'
    --    AND a.CODE IN ('000000390667', '000000390588', '000000390589', '000000390590', '000000390591', '000000390592', '000000390593', '000000390594', '000000390595', '000000390597', '000000390598', '000000390599', '000000390600', '000000390601', '000000390602', '000000390603', '000000390604', '000000390605', '000000390606', '000000390607', '000000390608', '000000390609', '000000390610', '000000390611', '000000390612', '000000390613', '000000390614', '000000390615', '000000390616', '000000390617', '000000390618', '000000390619', '000000390620', '000000390621', '000000390622', '000000390623', '000000390624', '000000390625', '000000390626', '000000390627', '000000390628', '000000390629', '000000390630', '000000390631', '000000390632', '000000390633', '000000390634', '000000390635', '000000390636', '000000390637', '000000390638', '000000390639', '000000390640', '000000390641', '000000390642', '000000390643', '000000390644', '000000390645', '000000390646', '000000390647', '000000390648', '000000390649', '000000390650', '000000390651', '000000390652', '000000390653', '000000390654', '000000390655', '000000390656', '000000390657', '000000390658', '000000390659', '000000390660', '000000390661', '000000390662', '000000390663', '000000390664', '000000390665', '000000390666', '000000390668', '000000390669', '000000390670', '000000390671', '000000390672', '000000390673', '000000390674', '000000390676', '000000390677', '000000390678', '000000390679', '000000390680', '000000390681', '000000390682', '000000390683', '000000390684', '000000390685', '000000390686', '000000390687', '000000390688', '000000390689', '000000390690', '000000390691', '000000390692', '000000390693', '000000390694', '000000390695', '000000390696', '000000390697', '000000390698', '000000390699', '000000390700', '000000390701', '000000390702', '000000390703', '000000390704', '000000390705', '000000390706', '000000390707', '000000390708', '000000390709', '000000390710', '000000390711', '000000390712', '000000390713', '000000390714', '000000390715', '000000390716', '000000390717', '000000390718', '
    --000000390719', '000000390720', '000000390721', '000000390722', '000000390723', '000000390724', '000000390725', '000000390726', '000000390727', '000000390728', '000000390729', '000000390730', '000000390731', '000000390732', '000000390733', '000000390734');


-- DB2ADMIN.ITXVIEW_APPROVE_PO source

CREATE VIEW ITXVIEW_APPROVE_PO AS 
SELECT
    ACT_HI_PROCINST.BUSINESS_KEY_,
    SUBSTR(SUBSTR(ACT_HI_PROCINST.BUSINESS_KEY_, LOCATE('|', ACT_HI_PROCINST.BUSINESS_KEY_)+ 1), LOCATE('|', SUBSTR(ACT_HI_PROCINST.BUSINESS_KEY_, LOCATE('|', ACT_HI_PROCINST.BUSINESS_KEY_)+ 1))+ 1) AS no_order,
    ACT_HI_TASKINST.ID_,
       WFMLINKEDENTITY.REASONCODE
FROM
    (
        ACT_HI_PROCINST ACT_HI_PROCINST
    LEFT OUTER JOIN 
       ACT_HI_TASKINST ACT_HI_TASKINST ON
        ACT_HI_PROCINST.PROC_INST_ID_ = ACT_HI_TASKINST.PROC_INST_ID_
    )
LEFT OUTER JOIN 
      WFMLINKEDENTITY WFMLINKEDENTITY ON 
       ACT_HI_TASKINST.PROC_INST_ID_ = WFMLINKEDENTITY.WFMPROCESSID
WHERE
    WFMLINKEDENTITY.REASONCODE IS NOT NULL;


-- DB2ADMIN.ITXVIEW_BENANGAKTUAL1 source

CREATE VIEW ITXVIEW_BENANGAKTUAL1 AS
SELECT
    DISTINCT
    TRIM(p.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(s.ORDERCODE) AS ORDERCODE
FROM  
    STOCKTRANSACTION s
LEFT JOIN STOCKTRANSACTION s2 ON
    s2.ITEMELEMENTCODE = s.ITEMELEMENTCODE
    AND s2.TEMPLATECODE = '204'
LEFT JOIN PRODUCTIONRESERVATION p ON
    p.ORDERCODE = s2.LOTCODE
WHERE
    s.TEMPLATECODE = '120'
    --    AND 
    --    s.ORDERCODE = '00102963' -- PRODUCTION ORDER 
    AND SUBSTR(s.ITEMELEMENTCODE, 1, 1) = '0';


-- DB2ADMIN.ITXVIEW_BOOKING source

-- BOOKING READY
CREATE VIEW ITXVIEW_BOOKING AS	
SELECT
    ALLOCATION_CODE,
    DEMAND_KFF,
    DEMAND_KGF,
    PRODUCTIONORDERCODE,
    ONLY_PROJECTCODE,
    PROJECTCODE,
    DATE(TGLRENCANA) AS TGLRENCANA,
    NULL AS TGLPOGREIGE,
    LISTAGG(
        SUMMARIZEDDESCRIPTION,
        ', '
    ) || '-' || TRIM(ONLY_PROJECTCODE) AS SUMMARIZEDDESCRIPTION
FROM
    (
        SELECT
            a.CODE AS ALLOCATION_CODE,
            a.ORDERCODE AS DEMAND_KFF,
            a2.LOTCODE AS DEMAND_KGF,
            p2.PRODUCTIONORDERCODE,
            CASE
                WHEN a2.PROJECTCODE IS NULL THEN TRIM(a2.LOTCODE)
                ELSE TRIM(a2.PROJECTCODE)
            END AS ONLY_PROJECTCODE,
            CASE
                WHEN a2.PROJECTCODE IS NULL THEN TRIM(a2.LOTCODE) || ' - ' || round(TRIM(a2.USERPRIMARYQUANTITY), 2) || ' ' || TRIM(a2.USERPRIMARYUOMCODE)
                ELSE TRIM(a2.LOTCODE) || ' - ' || round(TRIM(a2.USERPRIMARYQUANTITY), 2) || ' ' || TRIM(a2.USERPRIMARYUOMCODE)
            END AS PROJECTCODE,
            --	a3.VALUEDATE AS TGLRENCANA,
            --		a4.VALUEDATE AS TGLPOGREIGE,
		NULL AS TGLPOGREIGE,
            a2.CREATIONDATETIME AS TGLRENCANA,
            LISTAGG(
                TRIM(p4.LONGDESCRIPTION) || '(' || CASE
                    WHEN TRIM(CAST(p4.COMMENTTEXT AS VARCHAR(1000))) IS NULL THEN '()'
                    ELSE TRIM(CAST(p4.COMMENTTEXT AS VARCHAR(1000)))
                END || ')',
                ', '
            ) AS SUMMARIZEDDESCRIPTION,
            TRIM(a2.LOTCODE) AS LOTCODE
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN ALLOCATION a ON
            a.ORDERCODE = p.CODE
            AND a.DETAILTYPE = 1
        LEFT JOIN ALLOCATION a2 ON
            a2.CODE = a.CODE
            AND a2.DETAILTYPE = 0
        LEFT JOIN PRODUCTIONRESERVATION p3 ON
            p3.ORDERCODE = a2.LOTCODE
        LEFT JOIN PRODUCT p4 ON
            p4.ITEMTYPECODE = p3.ITEMTYPEAFICODE
            AND
							p4.SUBCODE01 = p3.SUBCODE01
            AND 
							p4.SUBCODE02 = p3.SUBCODE02
            AND
							p4.SUBCODE03 = p3.SUBCODE03
            AND 
							p4.SUBCODE04 = p3.SUBCODE04
            AND
							p4.SUBCODE05 = p3.SUBCODE05
            AND 
							p4.SUBCODE06 = p3.SUBCODE06
            AND
							p4.SUBCODE07 = p3.SUBCODE07
        LEFT JOIN PRODUCTIONRESERVATIONCOMMENT p4 ON
            p4.PRODUCTIONRESERVATIONORDERCODE = p3.ORDERCODE
            AND p4.PRORESERVATIONRESERVATIONLINE = p3.RESERVATIONLINE
        LEFT JOIN PRODUCTIONDEMAND p5 ON
            p5.CODE = a2.LOTCODE
        LEFT JOIN ADSTORAGE a3 ON
            a3.UNIQUEID = p5.ABSUNIQUEID
            AND a3.FIELDNAME = 'RMPReqDate'
        LEFT JOIN ADSTORAGE a4 ON
            a4.UNIQUEID = p5.ABSUNIQUEID
            AND a4.FIELDNAME = 'RMPGreigeReqDateTo'
        WHERE
            --		a.ORDERCODE = '00142171' AND 
            p2.ITEMTYPEAFICODE = 'KGF'
        GROUP BY
            a.CODE,
            a.ORDERCODE,
            a2.LOTCODE,
            p2.PRODUCTIONORDERCODE,
            --	a3.VALUEDATE,
            --	a4.VALUEDATE,
            a2.CREATIONDATETIME,
            a2.PROJECTCODE,
            p3.RESERVATIONLINE,
            a2.USERPRIMARYQUANTITY,
            a2.USERPRIMARYUOMCODE
        ORDER BY
            p3.RESERVATIONLINE ASC
    )
GROUP BY
    ALLOCATION_CODE,
    DEMAND_KFF,
    DEMAND_KGF,
    PRODUCTIONORDERCODE,
    ONLY_PROJECTCODE,
    PROJECTCODE,
    TGLRENCANA,
    TGLPOGREIGE,
    LOTCODE;


-- DB2ADMIN.ITXVIEW_BOOKING_BLM_READY source

-- BOOKING BELUM READY
CREATE VIEW ITXVIEW_BOOKING_BLM_READY AS
SELECT
    DISTINCT
	ORIGDLVSALORDLINESALORDERCODE,
    ITEMTYPEAFICODE,
    LISTAGG(
        TRIM(LONGDESCRIPTION) || ' (' || 
			CASE
            WHEN TRIM(BUYER) IS NULL THEN '()'
            ELSE TRIM(BUYER)
        END || '), '
    ) AS SUMMARIZEDDESCRIPTION,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    TGLRENCANA,
    TGLPOGREIGE
FROM
    (
        SELECT
            DISTINCT 
			p.ORIGDLVSALORDLINESALORDERCODE,
            --			p.CODE,
            p2.RESERVATIONLINE AS NO_URUT_BENANG,
            CASE
                WHEN p2.ITEMTYPEAFICODE = 'DYR'
                OR p2.ITEMTYPEAFICODE = 'GYR' THEN TRIM(f.SUMMARIZEDDESCRIPTION)
                ELSE TRIM(p4.LONGDESCRIPTION)
            END AS LONGDESCRIPTION,
            --			TRIM(CAST(p3.COMMENTTEXT AS VARCHAR(1000))) AS BUYER,
			CASE
                WHEN TRIM(CAST(p3.COMMENTTEXT AS VARCHAR(500))) IS NULL THEN TRIM(CAST(p5.COMMENTTEXT AS VARCHAR(500)))
                ELSE TRIM(CAST(p3.COMMENTTEXT AS VARCHAR(500)))
            END AS BUYER,
            p.SUBCODE01,
            p.SUBCODE02,
            p.SUBCODE03,
            p.SUBCODE04,
            p.ITEMTYPEAFICODE,
            a7.VALUEDATE AS TGLRENCANA,
            a8.VALUEDATE AS TGLPOGREIGE
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN PRODUCT p4 ON
            p4.ITEMTYPECODE = p2.ITEMTYPEAFICODE
            AND
								p4.SUBCODE01 = p2.SUBCODE01
            AND 
								p4.SUBCODE02 = p2.SUBCODE02
            AND
								p4.SUBCODE03 = p2.SUBCODE03
            AND 
								p4.SUBCODE04 = p2.SUBCODE04
            AND
								p4.SUBCODE05 = p2.SUBCODE05
            AND 
								p4.SUBCODE06 = p2.SUBCODE06
            AND
								p4.SUBCODE07 = p2.SUBCODE07
        LEFT JOIN FULLITEMKEYDECODER f ON
            f.ITEMTYPECODE = p2.ITEMTYPEAFICODE
            AND 
								f.SUBCODE01 = p2.SUBCODE01
            AND f.SUBCODE02 = p2.SUBCODE02
            AND
								f.SUBCODE03 = p2.SUBCODE03
            AND f.SUBCODE04 = p2.SUBCODE04
            AND
								f.SUBCODE05 = p2.SUBCODE05
            AND f.SUBCODE06 = p2.SUBCODE06
            AND
								f.SUBCODE07 = p2.SUBCODE07
            AND f.SUBCODE07 = p2.SUBCODE07
            AND 
								f.SUBCODE08 = p2.SUBCODE08
        LEFT JOIN PRODUCTIONRESERVATIONCOMMENT p3 ON
            p3.PRODUCTIONRESERVATIONORDERCODE = p2.ORDERCODE
            AND p2.RESERVATIONLINE = p3.PRORESERVATIONRESERVATIONLINE
        LEFT JOIN PRODUCTIONDEMANDCOMMENT p5 ON
            p5.PRODUCTIONDEMANDCODE = p2.ORDERCODE
        LEFT JOIN ADSTORAGE a2 ON
            a2.UNIQUEID = p.ABSUNIQUEID
            AND a2.FIELDNAME = 'ProAllow'
        LEFT JOIN ADSTORAGE a3 ON
            a3.UNIQUEID = p.ABSUNIQUEID
            AND a3.FIELDNAME = 'ProAllow2'
        LEFT JOIN ADSTORAGE a4 ON
            a4.UNIQUEID = p.ABSUNIQUEID
            AND a4.FIELDNAME = 'ProAllow3'
        LEFT JOIN ADSTORAGE a5 ON
            a5.UNIQUEID = p.ABSUNIQUEID
            AND a5.FIELDNAME = 'ProAllow4'
        LEFT JOIN ADSTORAGE a6 ON
            a6.UNIQUEID = p.ABSUNIQUEID
            AND a6.FIELDNAME = 'ProAllow5'
        LEFT JOIN ADSTORAGE a7 ON
            a7.UNIQUEID = p.ABSUNIQUEID
            AND a7.FIELDNAME = 'RMPReqDate'
        LEFT JOIN ADSTORAGE a8 ON
            a8.UNIQUEID = p.ABSUNIQUEID
            AND a8.FIELDNAME = 'RMPGreigeReqDateTo'
            --		WHERE 
            --			p.SUBCODE01 = 'CVCX' 
            --			AND p.SUBCODE02 = 'MTR' 
            --			AND p.SUBCODE03 = '22023'
            --			AND p.SUBCODE04 = 'H04'
            --			AND p.ORIGDLVSALORDLINESALORDERCODE = 'DOM2301110' -- NGAMBIL DARI ADDITIONAL DATA 
            --			AND (p.ITEMTYPEAFICODE ='KGF' OR p.ITEMTYPEAFICODE ='FKG')
        ORDER BY
            p2.RESERVATIONLINE ASC
    )
GROUP BY
    ORIGDLVSALORDLINESALORDERCODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    --	ORIGDLVSALORDERLINEORDERLINE,
    TGLRENCANA,
    TGLPOGREIGE,
    ITEMTYPEAFICODE;


-- DB2ADMIN.ITXVIEW_BOOKING_NEW source

-- BOOKING READY NEW
CREATE VIEW ITXVIEW_BOOKING_NEW AS
SELECT
    DEMAND,
    SALESORDERCODE,
    ORDERLINE,
    LOTCODE,
    CODE,
    ONLY_PROJECTCODE,
    QTY_ALOKASI_BRUTO,
    PROJECTCODE,
    TGLPOGREIGE,
    TGLRENCANA,
    LISTAGG(
        CASE
            WHEN SUMMARIZEDDESCRIPTION IS NULL THEN ''
            ELSE SUMMARIZEDDESCRIPTION
        END,
        ', '
    ) || '-' || TRIM(ONLY_PROJECTCODE) AS SUMMARIZEDDESCRIPTION
FROM
    (
        SELECT
            DISTINCT 
		p3.RESERVATIONLINE AS NO_URUT_BENANG,
            i.DEMAND,
            i.SALESORDERCODE,
            i.ORDERLINE,
            i.SUBCODE03,
            a2.LOTCODE,
            a2.CODE,
            CASE
                WHEN a2.PROJECTCODE IS NULL THEN TRIM(a2.LOTCODE)
                ELSE TRIM(a2.PROJECTCODE)
            END AS ONLY_PROJECTCODE,
            NULL AS TGLPOGREIGE,
            a2.CREATIONDATETIME AS TGLRENCANA,
            CASE
                WHEN a2.PROJECTCODE IS NULL THEN TRIM(a2.LOTCODE) || ' - ' || round(TRIM(a2.USERPRIMARYQUANTITY), 2) || ' ' || TRIM(a2.USERPRIMARYUOMCODE)
                ELSE TRIM(a2.LOTCODE) || ' - ' || round(TRIM(a2.USERPRIMARYQUANTITY), 2) || ' ' || TRIM(a2.USERPRIMARYUOMCODE)
            END AS PROJECTCODE,
            round(a2.USERPRIMARYQUANTITY, 2) AS QTY_ALOKASI_BRUTO,
            LISTAGG(
                CASE
                    WHEN p3.ITEMTYPEAFICODE = 'DYR'
                    OR p3.ITEMTYPEAFICODE = 'GYR' THEN TRIM(f.SUMMARIZEDDESCRIPTION)
                    ELSE TRIM(p4.LONGDESCRIPTION)
                END || '(' || 
				CASE
                    WHEN TRIM(CAST(p4.COMMENTTEXT AS VARCHAR(1000))) IS NULL THEN '()'
                    ELSE TRIM(CAST(p4.COMMENTTEXT AS VARCHAR(1000)))
                END || ')' || '(' || TRIM(a2.LOTCODE) || ')',
                ', '
            ) AS SUMMARIZEDDESCRIPTION
        FROM
            ITXVIEWBONORDER i
        RIGHT JOIN ALLOCATION a ON
            a.ORDERCODE = i.DEMAND
            AND a.DETAILTYPE = 1
        RIGHT JOIN ALLOCATION a2 ON
            a2.CODE = a.CODE
            AND a2.DETAILTYPE = 0
        LEFT JOIN PRODUCTIONRESERVATION p3 ON
            p3.ORDERCODE = a2.LOTCODE
        LEFT JOIN PRODUCT p4 ON
            p4.ITEMTYPECODE = p3.ITEMTYPEAFICODE
            AND NOT p4.ITEMTYPECODE = 'DYC'
            AND NOT p4.ITEMTYPECODE = 'WTR'
            AND
            --							NOT p4.ITEMTYPECODE = 'KFF' AND
            p4.SUBCODE01 = p3.SUBCODE01
            AND 
							p4.SUBCODE02 = p3.SUBCODE02
            AND
							p4.SUBCODE03 = p3.SUBCODE03
            AND 
							p4.SUBCODE04 = p3.SUBCODE04
            AND
							p4.SUBCODE05 = p3.SUBCODE05
            AND 
							p4.SUBCODE06 = p3.SUBCODE06
            AND
							p4.SUBCODE07 = p3.SUBCODE07
        LEFT JOIN FULLITEMKEYDECODER f ON
            f.ITEMTYPECODE = p3.ITEMTYPEAFICODE
            AND 
								f.SUBCODE01 = p3.SUBCODE01
            AND f.SUBCODE02 = p3.SUBCODE02
            AND
								f.SUBCODE03 = p3.SUBCODE03
            AND f.SUBCODE04 = p3.SUBCODE04
            AND
								f.SUBCODE05 = p3.SUBCODE05
            AND f.SUBCODE06 = p3.SUBCODE06
            AND
								f.SUBCODE07 = p3.SUBCODE07
            AND f.SUBCODE07 = p3.SUBCODE07
            AND 
								f.SUBCODE08 = p3.SUBCODE08
        LEFT JOIN PRODUCTIONRESERVATIONCOMMENT p4 ON
            p4.PRODUCTIONRESERVATIONORDERCODE = p3.ORDERCODE
            AND p4.PRORESERVATIONRESERVATIONLINE = p3.RESERVATIONLINE
        LEFT JOIN PRODUCTIONDEMAND p5 ON
            p5.CODE = a2.LOTCODE
        LEFT JOIN ADSTORAGE a3 ON
            a3.UNIQUEID = p5.ABSUNIQUEID
            AND a3.FIELDNAME = 'RMPReqDate'
        LEFT JOIN ADSTORAGE a4 ON
            a4.UNIQUEID = p5.ABSUNIQUEID
            AND a4.FIELDNAME = 'RMPGreigeReqDateTo'
            --	WHERE 
            --		SALESORDERCODE = 'OPN2300580' 
            --		AND i.ORDERLINE = 30
        GROUP BY
            i.DEMAND,
            p3.RESERVATIONLINE,
            i.SALESORDERCODE,
            i.ORDERLINE,
            i.SUBCODE03,
            a2.CREATIONDATETIME,
            a2.LOTCODE,
            a2.CODE,
            a2.PROJECTCODE,
            a2.USERPRIMARYQUANTITY,
            a2.USERPRIMARYUOMCODE
        ORDER BY
            p3.RESERVATIONLINE ASC
    )
GROUP BY
    DEMAND,
    SALESORDERCODE,
    ORDERLINE,
    LOTCODE,
    CODE,
    ONLY_PROJECTCODE,
    PROJECTCODE,
    QTY_ALOKASI_BRUTO,
    TGLPOGREIGE,
    TGLRENCANA;


-- DB2ADMIN.ITXVIEW_BUKTIMUTASI_KNT source

CREATE VIEW ITXVIEW_BUKTIMUTASI_KNT AS
SELECT
    BALANCE.ITEMTYPECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.PHYSICALWAREHOUSECODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.LOTCODE AS BALANCE_LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION
FROM
    BALANCE BALANCE
RIGHT OUTER JOIN DB2ADMIN.STOCKTRANSACTION STOCKTRANSACTION ON
    BALANCE.ELEMENTSCODE = STOCKTRANSACTION.ITEMELEMENTCODE
    AND BALANCE.PHYSICALWAREHOUSECODE = STOCKTRANSACTION.PHYSICALWAREHOUSECODE
    AND BALANCE.WHSLOCATIONWAREHOUSEZONECODE = STOCKTRANSACTION.WHSLOCATIONWAREHOUSEZONECODE
    AND BALANCE.WAREHOUSELOCATIONCODE = STOCKTRANSACTION.WAREHOUSELOCATIONCODE
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    STOCKTRANSACTION.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
WHERE
    BALANCE.ITEMTYPECODE = 'KGF'
GROUP BY
    BALANCE.ITEMTYPECODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    BALANCE.WHSLOCATIONWAREHOUSEZONECODE,
    BALANCE.PHYSICALWAREHOUSECODE,
    BALANCE.LOGICALWAREHOUSECODE,
    BALANCE.DECOSUBCODE01,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BALANCE.DECOSUBCODE04,
    BALANCE.DECOSUBCODE05,
    BALANCE.DECOSUBCODE06,
    BALANCE.DECOSUBCODE07,
    BALANCE.DECOSUBCODE08,
    BALANCE.DECOSUBCODE09,
    BALANCE.DECOSUBCODE10,
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.ITEMELEMENTCODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION;


-- DB2ADMIN.ITXVIEW_CHECK_ALOKASI_QTYBRUTO source

CREATE VIEW ITXVIEW_CHECK_ALOKASI_QTYBRUTO AS
SELECT
    DISTINCT ibn.SALESORDERCODE,
    ibn.ORDERLINE,
    CASE
        WHEN SUM(ibn.QTY_ALOKASI_BRUTO) = i.QTY_BRUTO_SALESORDER THEN 'SAMA'
        WHEN SUM(ibn.QTY_ALOKASI_BRUTO) > i.QTY_BRUTO_SALESORDER THEN 'LEBIH BESAR'
        ELSE 'KURANG DARI'
    END AS KET_BRUTO
FROM
    ITXVIEW_BOOKING_NEW ibn
LEFT JOIN (
        SELECT
            i.ORIGDLVSALORDLINESALORDERCODE,
            i.ORIGDLVSALORDERLINEORDERLINE,
            SUM(i.USERPRIMARYQUANTITY) AS QTY_BRUTO_SALESORDER
        FROM
            ITXVIEWKGBRUTOBONORDER2 i
        GROUP BY
            i.ORIGDLVSALORDLINESALORDERCODE,
            i.ORIGDLVSALORDERLINEORDERLINE
    ) i ON
    i.ORIGDLVSALORDLINESALORDERCODE = ibn.SALESORDERCODE
    AND i.ORIGDLVSALORDERLINEORDERLINE = ibn.ORDERLINE
GROUP BY
    ibn.SALESORDERCODE,
    ibn.ORDERLINE,
    i.QTY_BRUTO_SALESORDER;


-- DB2ADMIN.ITXVIEW_COLORREMARKS source

CREATE VIEW ITXVIEW_COLORREMARKS AS
SELECT
    a.UNIQUEID,
    s.CODE,
    a.NAMENAME,
    a.VALUESTRING
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s.CODE = s2.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s2.ABSUNIQUEID
WHERE
    a.NAMENAME = 'ColorRemarks';


-- DB2ADMIN.ITXVIEW_COLORSTANDARD source

CREATE VIEW ITXVIEW_COLORSTANDARD AS
SELECT
    a.UNIQUEID,
    s.CODE,
    a.NAMENAME,
    a.VALUESTRING
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s.CODE = s2.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s2.ABSUNIQUEID
    AND a.NAMENAME = 'ColorStandard';


-- DB2ADMIN.ITXVIEW_COMMERCIALINVOICE_EXIM3 source

CREATE VIEW ITXVIEW_COMMERCIALINVOICE_EXIM3 AS
SELECT
    DISTINCT 
	PROVISIONALCODE,
    PROVISIONALCOUNTERCODE,
    COMPANYCODE,
    PROVISIONALDOCUMENTDATE,
    PROJECTCODE,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    VESSEL_NM,
    TRANSPORTSTARTDATE,
    TERMSOFSHIPPINGCODE,
    PAYMENTCUSTOMERCODE,
    TERMSOFDELIVERYCODE,
    PAYMENTMETHODCODE,
    TermOrLC,
    IssuingBank,
    UNIT_JUAL,
    CONSIGNEE_ID,
    ADDRESSEE,
    ADDRESSLINE1,
    ADDRESSLINE2,
    ADDRESSLINE3,
    ADDRESSLINE4,
    TOWN,
    DISTRICT,
    ADDRESSPHONENUMBER,
    PARTNER_COUNTRYCODE,
    MESSRS_ID,
    LEGALNAME1,
    PARTNER_ADDRES1,
    PARTNER_ADDRES2,
    PARTNER_ADDRES3,
    PARTNER_ADDRES4,
    PARTNER_TOWN,
    PARTNER_DISTRICT,
    PARTNER_PHONE,
    COUNTRY_NM,
    SHIPPING_FROM,
    DESCRIPTION,
    upper(WARNA) AS WARNA,
    Payment_code,
    PRICEUNITOFMEASURECODE,
    HS_CODE,
    KAIN_AKJ
FROM
    (
        SELECT
            DISTINCT 
        s.PROVISIONALCODE,
            s.PROVISIONALDOCUMENTDATE,
            s.PROVISIONALCOUNTERCODE,
            s.COMPANYCODE,
            s2.DLVSALORDERLINESALESORDERCODE AS PROJECTCODE,
            s2.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            CASE
                WHEN s2.EXTERNALITEM IS NULL THEN trim(s2.SUBCODE02) || trim(s2.SUBCODE03)
                ELSE s2.EXTERNALITEM
            END EXTERNALITEM,
            CASE
                WHEN s.NUMBERPLATE IS NULL THEN a3.VALUESTRING
            END AS VESSEL_NM,
            CASE
                WHEN s.TRANSPORTSTARTDATE IS NULL THEN a4.VALUEDATE
            END AS TRANSPORTSTARTDATE,
            s.TERMSOFSHIPPINGCODE,
            s.PAYMENTCUSTOMERCODE,
            s.TERMSOFDELIVERYCODE,
            s.PAYMENTMETHODCODE,
            CASE
                WHEN s.PAYMENTMETHODCODE IN(
                    'LC1', 'LC2', 'LC9', 'LCB', 'LCS', 'NLC'
                ) THEN a.VALUESTRING
                WHEN s.PAYMENTMETHODCODE NOT IN(
                    'LC1', 'LC2', 'LC9', 'LCB', 'LCS', 'NLC'
                )
                AND p2.SHORTDESCRIPTION LIKE '%TT%' THEN 'T/T'
                ELSE s.PAYMENTMETHODCODE
            END AS TermOrLC,
            s2.PRICEUNITOFMEASURECODE,
            ADDRESS.CODE AS CONSIGNEE_ID,
            ADDRESS.ADDRESSEE,
            ADDRESS.ADDRESSLINE1,
            ADDRESS.ADDRESSLINE2,
            ADDRESS.ADDRESSLINE3,
            ADDRESS.ADDRESSLINE4,
            ADDRESS.TOWN,
            ADDRESS.DISTRICT,
            ADDRESS.ADDRESSPHONENUMBER,
            BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
            BUSINESSPARTNER.NUMBERID AS MESSRS_ID,
            BUSINESSPARTNER.LEGALNAME1,
            BUSINESSPARTNER.ADDRESSLINE1 AS PARTNER_ADDRES1,
            BUSINESSPARTNER.ADDRESSLINE2 AS PARTNER_ADDRES2,
            BUSINESSPARTNER.ADDRESSLINE3 AS PARTNER_ADDRES3,
            BUSINESSPARTNER.ADDRESSLINE4 AS PARTNER_ADDRES4,
            BUSINESSPARTNER.TOWN AS PARTNER_TOWN,
            BUSINESSPARTNER.DISTRICT AS PARTNER_DISTRICT,
            BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
            COUNTRY.LONGDESCRIPTION AS COUNTRY_NM,
            CASE
                WHEN s.TERMSOFSHIPPINGCODE IN(
                    'SE', 'AS'
                ) THEN 'TG.PRIOK - JAKARTA, INDONESIA'
                ELSE 'JAKARTA, INDONESIA'
            END AS SHIPPING_FROM,
            u.LONGDESCRIPTION AS IssuingBank,
            CASE
                WHEN trim(s2.EXTERNALITEM) IS NOT NULL
                AND s2.USERSECONDARYUOMCODE = 'yd' THEN trim(s2.EXTERNALITEM) || '  ' || s2.ITEMDESCRIPTION || ' ' || FLOOR(ADS_GSM.VALUEDECIMAL) || 'GR/M2' || ' ' || FLOOR(ADS_WIDTH.VALUEDECIMAL) || '"'
                WHEN trim(s2.EXTERNALITEM) IS NOT NULL
                AND s2.USERSECONDARYUOMCODE = 'un' THEN trim(s2.EXTERNALITEM) || '  ' || s2.ITEMDESCRIPTION || ' ' || FLOOR(ADS_GSM.VALUEDECIMAL) || 'GR/M2'
                ELSE trim(s2.SUBCODE02) || trim(s2.SUBCODE03) || ' ' || s2.ITEMDESCRIPTION || ' ' || FLOOR(ADS_GSM.VALUEDECIMAL) || 'GR/M2' || ' ' || FLOOR(ADS_WIDTH.VALUEDECIMAL) || '"'
            END AS DESCRIPTION,
            CASE
                WHEN s2.USERSECONDARYUOMCODE = 'un' THEN TRIM(ITXVIEWCOLOR.WARNA)|| ' ' || FLOOR(ADS_WIDTH.VALUEDECIMAL) || '"'
                ELSE TRIM(ITXVIEWCOLOR.WARNA)
            END AS WARNA,
            CASE
                WHEN TRIM(s.PAYMENTMETHODCODE) IN (
                    'LC1', 'LC2', 'LC9', 'LCB', 'LCS', 'NLC'
                ) THEN 'PAYMENT CODE : 1011//' || TRIM(s.PROVISIONALCODE)
                ELSE 'PAYMENT CODE : 1011//' || TRIM(s.PROVISIONALCODE)
            END AS Payment_code,
            s2.PRICEUNITOFMEASURECODE AS UNIT_JUAL,
            a.EXTERNALREFERENCE AS HS_CODE,
            CASE
                WHEN a5.VALUESTRING = 1 THEN 'AKJ'
                ELSE 'NON-AKJ'
            END KAIN_AKJ
        FROM
            SALESDOCUMENT s
        LEFT JOIN SALESDOCUMENTLINE s2 ON
            s.PROVISIONALCODE = s2.SALESDOCUMENTPROVISIONALCODE
            AND s.PROVISIONALCOUNTERCODE = s2.SALDOCPROVISIONALCOUNTERCODE
            AND s.COMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
            s2.SUBCODE01 = ITXVIEWCOLOR.SUBCODE01
            AND s2.SUBCODE02 = ITXVIEWCOLOR.SUBCODE02
            AND s2.SUBCODE03 = ITXVIEWCOLOR.SUBCODE03
            AND s2.SUBCODE04 = ITXVIEWCOLOR.SUBCODE04
            AND s2.SUBCODE05 = ITXVIEWCOLOR.SUBCODE05
            AND s2.SUBCODE06 = ITXVIEWCOLOR.SUBCODE06
            AND s2.SUBCODE07 = ITXVIEWCOLOR.SUBCODE07
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            s.ORDPRNCUSTOMERSUPPLIERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND s2.SUBCODE01 = a.SUBCODE01
            AND s2.SUBCODE02 = a.SUBCODE02
            AND s2.SUBCODE03 = a.SUBCODE03
            AND s2.SUBCODE04 = a.SUBCODE04
            AND s2.SUBCODE05 = a.SUBCODE05
            AND s2.SUBCODE06 = a.SUBCODE06
        LEFT JOIN PRODUCT P ON
            s2.ITEMTYPEAFICODE = P.ITEMTYPECODE
            AND s2.SUBCODE01 = P.SUBCODE01
            AND s2.SUBCODE02 = P.SUBCODE02
            AND s2.SUBCODE03 = P.SUBCODE03
            AND s2.SUBCODE04 = P.SUBCODE04
            AND s2.SUBCODE05 = P.SUBCODE05
            AND s2.SUBCODE06 = P.SUBCODE06
        LEFT JOIN SALESORDERLINE s3 ON
            s3.SALESORDERCODE = s2.DLVSALORDERLINESALESORDERCODE
            AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
            AND s3.SUBCODE02 = s2.SUBCODE02
            AND s3.SUBCODE03 = s2.SUBCODE03
            AND s3.SUBCODE04 = s2.SUBCODE04
            AND s3.SUBCODE05 = s2.SUBCODE05
            AND s3.SUBCODE06 = s2.SUBCODE06
            AND s3.SUBCODE07 = s2.SUBCODE07
        LEFT JOIN ADSTORAGE a5 ON
            a5.UNIQUEID = s3.ABSUNIQUEID
            AND a5.FIELDNAME = 'KainAKJ'
        LEFT JOIN ADSTORAGE ads_gsm ON
            p.ABSUNIQUEID = ads_gsm.UNIQUEID
            AND ads_gsm.FIELDNAME = 'GSM'
        LEFT JOIN ADSTORAGE ads_width ON
            p.ABSUNIQUEID = ads_width.UNIQUEID
            AND ads_width.FIELDNAME = 'Width'
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = s.DELIVERYPOINTUNIQUEID
            AND ADDRESS.CODE = s.DELIVERYPOINTCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            s.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        LEFT JOIN COUNTRY COUNTRY ON
            ADDRESS.COUNTRYCODE = COUNTRY.CODE
        LEFT JOIN ADSTORAGE a ON
            s.ABSUNIQUEID = a.UNIQUEID
            AND a.FIELDNAME = 'LCNumber'
        LEFT JOIN ADSTORAGE a2 ON
            s.ABSUNIQUEID = a2.UNIQUEID
            AND a2.NAMENAME = 'IssuingBank'
        LEFT JOIN ADSTORAGE a3 ON
            s.ABSUNIQUEID = a3.UNIQUEID
            AND a3.NAMENAME = 'vesselname'
        LEFT JOIN ADSTORAGE a4 ON
            s.ABSUNIQUEID = a4.UNIQUEID
            AND a4.NAMENAME = 'TransportDate'
        LEFT JOIN USERGENERICGROUP u ON
            a2.VALUESTRING = u.CODE
            AND s.COMPANYCODE = u.USERGENGROUPTYPECOMPANYCODE
        LEFT JOIN PAYMENTMETHOD p2 ON
            p2.CODE = s.PAYMENTMETHODCODE
            --                WHERE s.PROVISIONALCODE ='ESP2400219'
        GROUP BY
            s.PROVISIONALCODE,
            s.PROVISIONALDOCUMENTDATE,
            s.COMPANYCODE,
            s.PROVISIONALCOUNTERCODE,
            s2.DLVSALORDERLINESALESORDERCODE,
            s2.EXTERNALREFERENCE,
            s2.EXTERNALITEM,
            s.NUMBERPLATE ,
            a3.VALUESTRING ,
            s.TRANSPORTSTARTDATE,
            a4.VALUEDATE ,
            s.TERMSOFSHIPPINGCODE,
            s.PAYMENTCUSTOMERCODE,
            s.TERMSOFDELIVERYCODE,
            s.PAYMENTMETHODCODE,
            a.VALUESTRING ,
            s2.PRICEUNITOFMEASURECODE,
            ADDRESS.CODE ,
            ADDRESS.ADDRESSEE,
            ADDRESS.ADDRESSLINE1,
            ADDRESS.ADDRESSLINE2,
            ADDRESS.ADDRESSLINE3,
            ADDRESS.ADDRESSLINE4,
            ADDRESS.TOWN,
            ADDRESS.DISTRICT,
            ADDRESS.ADDRESSPHONENUMBER,
            BUSINESSPARTNER.COUNTRYCODE ,
            BUSINESSPARTNER.NUMBERID ,
            BUSINESSPARTNER.LEGALNAME1,
            BUSINESSPARTNER.ADDRESSLINE1 ,
            BUSINESSPARTNER.ADDRESSLINE2 ,
            BUSINESSPARTNER.ADDRESSLINE3 ,
            BUSINESSPARTNER.ADDRESSLINE4 ,
            BUSINESSPARTNER.TOWN ,
            BUSINESSPARTNER.DISTRICT ,
            BUSINESSPARTNER.ADDRESSPHONENUMBER ,
            COUNTRY.LONGDESCRIPTION ,
            s.TERMSOFSHIPPINGCODE ,
            u.LONGDESCRIPTION ,
            s2.SUBCODE02,
            s2.SUBCODE03,
            s2.ITEMDESCRIPTION,
            ADS_GSM.VALUEDECIMAL,
            s2.USERSECONDARYUOMCODE,
            ADS_WIDTH.VALUEDECIMAL,
            ITXVIEWCOLOR.WARNA ,
            p2.SHORTDESCRIPTION,
            a.EXTERNALREFERENCE,
            a5.VALUESTRING
    );


-- DB2ADMIN.ITXVIEW_COMMERCIALINVOICE_NO_PI_EXIM source

CREATE VIEW ITXVIEW_COMMERCIALINVOICE_NO_PI_EXIM AS
SELECT
    TRIM(s.SALESDOCUMENTPROVISIONALCODE) AS SALESDOCUMENTPROVISIONALCODE,
    s.SALESDOCUMENTCOMPANYCODE,
    LISTAGG(
        DISTINCT(
            TRIM(s.DLVSALORDERLINESALESORDERCODE)
        ),
        ', '
    ) AS PROJECT,
    LISTAGG(
        DISTINCT(
            TRIM(s.EXTERNALREFERENCE)
        ),
        ', '
    ) AS NO_PO,    
     LISTAGG(
        DISTINCT(
            TRIM(s.DLVSALORDERLINESALESORDERCODE)|| ' DTD ' || TO_CHAR(s.EXTERNALREFERENCEDATE, 'MM/DD/YY')
        ),
        ', '
    ) AS NOPI_TGL_PROJECT
FROM
    SALESDOCUMENTLINE s
    --            WHERE s.SALESDOCUMENTPROVISIONALCODE = 'ESP2300501'
GROUP BY
    s.SALESDOCUMENTPROVISIONALCODE,
    s.SALESDOCUMENTCOMPANYCODE;


-- DB2ADMIN.ITXVIEW_COMMERCIALINV_DETAIL source

CREATE VIEW ITXVIEW_COMMERCIALINV_DETAIL AS
SELECT
    *
FROM
    (
        SELECT
            DISTINCT TRIM(SDL.SALESDOCUMENTPROVISIONALCODE) AS NO_SALES,
            SDL.EXTERNALREFERENCE AS NO_PO,
            SDL.DLVSALORDERLINESALESORDERCODE AS NO_PI,
            SDL.EXTERNALITEM AS NO_ITEM,
            SDL.PRICEUNITOFMEASURECODE,
            SDL.ITEMTYPEAFICODE,
            TRIM(ITXVIEWCOLOR.WARNA) AS WARNA,
            SDL.USERPRIMARYQUANTITY AS QTY_KGS,
            SDL.USERPRIMARYUOMCODE,
            CASE
                WHEN SDL.USERSECONDARYUOMCODE = 'yd' THEN SDL.USERSECONDARYQUANTITY
                ELSE 0
            END AS QTY_YDS,
            CASE
                WHEN SDL.USERSECONDARYUOMCODE = 'un' THEN floor(SDL.USERSECONDARYQUANTITY)
                ELSE 0
            END AS QTY_PCS,
            SDL.USERSECONDARYUOMCODE,
            SDL.PRICE AS PRICE,
            CASE
                WHEN SDL.PRICEUNITOFMEASURECODE = 'yd' THEN ROUND(SDL.USERSECONDARYQUANTITY * SDL.PRICE, 2)
                WHEN SDL.PRICEUNITOFMEASURECODE = 'kg' THEN ROUND(SDL.USERPRIMARYQUANTITY * SDL.PRICE, 2)
            END AS JML_AMOUNT
        FROM
            SALESDOCUMENTLINE SDL
        LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
            SDL.SUBCODE01 = ITXVIEWCOLOR.SUBCODE01
            AND SDL.SUBCODE02 = ITXVIEWCOLOR.SUBCODE02
            AND SDL.SUBCODE03 = ITXVIEWCOLOR.SUBCODE03
            AND SDL.SUBCODE04 = ITXVIEWCOLOR.SUBCODE04
            AND SDL.SUBCODE05 = ITXVIEWCOLOR.SUBCODE05
            AND SDL.SUBCODE06 = ITXVIEWCOLOR.SUBCODE06
            AND SDL.SUBCODE07 = ITXVIEWCOLOR.SUBCODE07
        LEFT JOIN PRODUCT P ON
            SDL.ITEMTYPEAFICODE = P.ITEMTYPECODE
            AND SDL.SUBCODE01 = P.SUBCODE01
            AND SDL.SUBCODE02 = P.SUBCODE02
            AND SDL.SUBCODE03 = P.SUBCODE03
            AND SDL.SUBCODE04 = P.SUBCODE04
            AND SDL.SUBCODE05 = P.SUBCODE05
            AND SDL.SUBCODE06 = P.SUBCODE06
        LEFT JOIN ADSTORAGE ads_gsm ON
            p.ABSUNIQUEID = ads_gsm.UNIQUEID
            AND ads_gsm.NAMENAME = 'GSM'
        LEFT JOIN ADSTORAGE ads_width ON
            p.ABSUNIQUEID = ads_width.UNIQUEID
            AND ads_width.NAMENAME = 'Width'
        GROUP BY
            SDL.SALESDOCUMENTPROVISIONALCODE,
            SDL.DLVSALORDERLINESALESORDERCODE,
            SDL.SUBCODE02,
            SDL.SUBCODE03,
            SDL.EXTERNALITEM,
            SDL.ITEMDESCRIPTION,
            SDL.EXTERNALREFERENCE,
            SDL.USERPRIMARYUOMCODE,
            SDL.USERSECONDARYUOMCODE,
            SDL.USERPRIMARYQUANTITY,
            SDL.USERSECONDARYQUANTITY,
            SDL.PRICE,
            SDL.PRICEUNITOFMEASURECODE,
            ADS_GSM.VALUEDECIMAL,
            ADS_WIDTH.VALUEDECIMAL,
            SDL.ITEMTYPEAFICODE,
            ITXVIEWCOLOR.WARNA
        ORDER BY
            SDL.EXTERNALREFERENCE ASC,
            SDL.DLVSALORDERLINESALESORDERCODE ASC,
            SDL.EXTERNALITEM ASC
    );


-- DB2ADMIN.ITXVIEW_COMMERCIALINV_EXIM source

CREATE VIEW ITXVIEW_COMMERCIALINV_EXIM AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.NUMBERPLATE AS VESSEL_NM,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.ABSUNIQUEID,
    SALESORDER.PROJECTCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    LOGICALWAREHOUSE.CODE AS LOGICALWAREHOUSE_CODE,
    LOGICALWAREHOUSE.LONGDESCRIPTION,
    ALLOCATION.CODE,
    ALLOCATION.LOTCODE,
    ALLOCATION.DESTINATIONTYPE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE,
    ALLOCATION.ITEMELEMENTCODE,
    BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1 AS PARTNER_ADDRES1,
    BUSINESSPARTNER.ADDRESSLINE2 AS PARTNER_ADDRES2,
    BUSINESSPARTNER.ADDRESSLINE3 AS PARTNER_ADDRES3,
    BUSINESSPARTNER.ADDRESSLINE4 AS PARTNER_ADDRES4,
    BUSINESSPARTNER.TOWN AS PARTNER_TOWN,
    BUSINESSPARTNER.DISTRICT AS PARTNER_DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERM_DESC,
    USERGENERICGROUP.LONGDESCRIPTION AS COLOR_DESC,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESORDER.CODE = SALESDOCUMENTLINE.PROJECTCODE
    AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
WHERE
    ALLOCATION.ORDERCODE IS NOT NULL;


-- DB2ADMIN.ITXVIEW_COUNTER source

CREATE VIEW ITXVIEW_COUNTER AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'Counter';


-- DB2ADMIN.ITXVIEW_COUNT_FABRICTYPE source

CREATE VIEW ITXVIEW_COUNT_FABRICTYPE AS	
SELECT
    s.CODE,
    s.ABSUNIQUEID,
    COUNT(s2.SUBCODE01) AS COUNTSUBCODE,
    s2.ITEMDESCRIPTION,
    s2.SUBCODE01 AS SHORT_FABRIC,
    s2.USERPRIMARYQUANTITY,
    s2.ITEMTYPEAFICODE
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s.CODE
WHERE
    s.TEMPLATECODE NOT IN (
        'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
    )
    --    AND s.CODE LIKE '%DOM23%'
GROUP BY
    s.CODE,
    s.ABSUNIQUEID,
    s2.SUBCODE01,
    s2.ITEMDESCRIPTION,
    s2.USERPRIMARYQUANTITY,
    s2.ITEMTYPEAFICODE;


-- DB2ADMIN.ITXVIEW_DEFECT_TYPE source

CREATE VIEW ITXVIEW_DEFECT_TYPE AS
SELECT
    DISTINCT 
	SUBSTR(e.ELEMENTSINSPECTIONELEMENTCODE, 1, 8) AS DEMANDNO,
    e.CODEEVENTCODE,
    i.LONGDESCRIPTION
FROM
    ELEMENTSINSPECTIONEVENT e
LEFT JOIN INSPECTIONEVENTTEMPLATE i ON
    i.EVENTCODE = e.CODEEVENTCODE
WHERE
    NOT e.CODEEVENTCODE = '001'
    --	AND SUBSTR(e.ELEMENTSINSPECTIONELEMENTCODE, 1,8) = '00000505';


-- DB2ADMIN.ITXVIEW_DEMANDBYLOTCODE source

CREATE VIEW ITXVIEW_DEMANDBYLOTCODE AS 
SELECT
    DISTINCT 
	LISTAGG(
        PRODUCTIONDEMANDCODE,
        ', '
    ) AS PRODUCTIONDEMANDCODE,
    PRODUCTIONORDERCODE,
    DLVSALESORDERLINEORDERLINE
FROM
    (
        SELECT
            DISTINCT
            --	LISTAGG(TRIM(PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE), ', ')  AS PRODUCTIONDEMANDCODE,
            TRIM(PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE) AS PRODUCTIONDEMANDCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        LEFT JOIN DB2ADMIN.PRODUCTIONDEMAND PRODUCTIONDEMAND ON
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = PRODUCTIONDEMAND.CODE
    )
GROUP BY
    PRODUCTIONORDERCODE,
    DLVSALESORDERLINEORDERLINE;


-- DB2ADMIN.ITXVIEW_DEMANDNO_LOSSORDER source

CREATE VIEW ITXVIEW_DEMANDNO_LOSSORDER AS
SELECT
    LISTAGG (
        TRIM(PRODUCTIONDEMAND.CODE),
        ','
    ) AS CODE,
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE
FROM
    DB2ADMIN.PRODUCTIONDEMAND PRODUCTIONDEMAND
GROUP BY
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE;


-- DB2ADMIN.ITXVIEW_DEMAND_DETAIL_REPORTHEADER source

CREATE VIEW ITXVIEW_DEMAND_DETAIL_REPORTHEADER AS
SELECT
    DISTINCT 
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.GROUPSTEPNUMBER,
    PRODUCTIONDEMANDSTEP.STEPNUMBER,
    CASE 
        WHEN PRODUCTIONDEMANDSTEP.STEPTYPE = '0' THEN 'Normal'
        WHEN PRODUCTIONDEMANDSTEP.STEPTYPE = '1' THEN 'Re-Operation'
        WHEN PRODUCTIONDEMANDSTEP.STEPTYPE = '2' THEN 'Unscheduled'
        WHEN PRODUCTIONDEMANDSTEP.STEPTYPE = '3' THEN 'Additional'
        ELSE ''
    END AS STEPTYPE,
    PRODUCTIONDEMANDSTEP.WORKCENTERCODE,
    PRODUCTIONDEMANDSTEP.OPERATIONCODE,
    OPERATION.LONGDESCRIPTION AS DESKRIPSI,
    ds.MULAI,
    de.SELESAI,
    CASE
        WHEN PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'CNP1' THEN p.ENTEREDUSERPRIMARYQUANTITY
    END AS QTY_PACKING,
    CASE
        WHEN PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'BAT1' THEN irk.USERPRIMARYQUANTITY
    END AS QTY_BAGIKAIN
FROM
    PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
LEFT JOIN OPERATION OPERATION ON 
                PRODUCTIONDEMANDSTEP.OPERATIONCODE = OPERATION.CODE
LEFT JOIN QUALITYDOCUMENT QUALITYDOCUMENT ON 
                PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = QUALITYDOCUMENT.PRODUCTIONORDERCODE
    AND PRODUCTIONDEMANDSTEP.WORKCENTERCODE = QUALITYDOCUMENT.WORKCENTERCODE
    AND PRODUCTIONDEMANDSTEP.OPERATIONCODE = QUALITYDOCUMENT.OPERATIONCODE
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE ON
    QUALITYDOCUMENT.HEADERLINE = QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE
LEFT JOIN PRODUCTIONDEMAND p ON
    p.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
LEFT JOIN ITXVIEW_RESERVATION_KK irk ON
    irk.ORDERCODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
LEFT JOIN ITXVIEW_DEMAND_TGL_END de ON 
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = de.DEMANDSTEPPRODUCTIONDEMANDCODE
    AND PRODUCTIONDEMANDSTEP .STEPNUMBER = de.DEMANDSTEPSTEPNUMBER
LEFT JOIN ITXVIEW_DEMAND_TGL_START ds ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = ds.DEMANDSTEPPRODUCTIONDEMANDCODE
    AND PRODUCTIONDEMANDSTEP .STEPNUMBER = ds.DEMANDSTEPSTEPNUMBER
    --        WHERE PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE ='00092794'
GROUP BY 
                PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
                PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
                PRODUCTIONDEMANDSTEP.GROUPSTEPNUMBER,
                PRODUCTIONDEMANDSTEP.STEPNUMBER,
                PRODUCTIONDEMANDSTEP.STEPTYPE,
                PRODUCTIONDEMANDSTEP.WORKCENTERCODE,
                PRODUCTIONDEMANDSTEP.OPERATIONCODE,
                OPERATION.LONGDESCRIPTION,
                PRODUCTIONDEMANDSTEP.PROGRESSSTATUS,
                p.ENTEREDUSERPRIMARYQUANTITY,
                irk.USERPRIMARYQUANTITY,
                ds.MULAI,
                de.SELESAI;


-- DB2ADMIN.ITXVIEW_DEMAND_REPORTHEADER source

CREATE VIEW ITXVIEW_DEMAND_REPORTHEADER AS
SELECT 
          PRODUCTIONDEMAND.CODE, 
          PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
          PRODUCTIONDEMAND.FINALPLANNEDDATE, 
          PRODUCTIONDEMAND.ITEMTYPEAFICODE,
          TRIM(PRODUCTIONDEMAND.SUBCODE01) AS SUBCODE01,
    TRIM(PRODUCTIONDEMAND.SUBCODE02) AS SUBCODE02,
    TRIM(PRODUCTIONDEMAND.SUBCODE03) AS SUBCODE03,
          TRIM(PRODUCTIONDEMAND.SUBCODE04) AS SUBCODE04,
    TRIM(PRODUCTIONDEMAND.SUBCODE05) AS SUBCODE05,
    TRIM(PRODUCTIONDEMAND.SUBCODE06) AS SUBCODE06,
          TRIM(PRODUCTIONDEMAND.SUBCODE07) AS SUBCODE07,
    TRIM(PRODUCTIONDEMAND.SUBCODE08) AS SUBCODE08,
    TRIM(PRODUCTIONDEMAND.SUBCODE09) AS SUBCODE09,
          TRIM(PRODUCTIONDEMAND.SUBCODE10) AS SUBCODE10, 
          PRODUCT.LONGDESCRIPTION, 
          A.WARNA, 
          PRODUCTIONDEMAND.PROJECTCODE,
          PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
          PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE, 
          PRODUCTIONDEMAND.USERPRIMARYQUANTITY,
          PRODUCTIONDEMAND.USERPRIMARYUOMCODE,
          PRODUCTIONDEMAND.USERSECONDARYQUANTITY, 
          PRODUCTIONDEMAND.USERSECONDARYUOMCODE, 
          SALESORDERDELIVERY.DELIVERYDATE,
          BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
          ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER
FROM 
          PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT JOIN PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
          ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
LEFT JOIN PRODUCT PRODUCT ON
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
    AND 
          PRODUCTIONDEMAND.SUBCODE01 = PRODUCT.SUBCODE01
    AND 
          PRODUCTIONDEMAND.SUBCODE02 = PRODUCT.SUBCODE02
    AND 
          PRODUCTIONDEMAND.SUBCODE03 = PRODUCT.SUBCODE03
    AND 
          PRODUCTIONDEMAND.SUBCODE04 = PRODUCT.SUBCODE04
    AND 
          PRODUCTIONDEMAND.SUBCODE05 = PRODUCT.SUBCODE05
    AND 
          PRODUCTIONDEMAND.SUBCODE06 = PRODUCT.SUBCODE06
    AND 
          PRODUCTIONDEMAND.SUBCODE07 = PRODUCT.SUBCODE07
    AND 
          PRODUCTIONDEMAND.SUBCODE08 = PRODUCT.SUBCODE08
    AND 
          PRODUCTIONDEMAND.SUBCODE09 = PRODUCT.SUBCODE09
    AND 
          PRODUCTIONDEMAND.SUBCODE10 = PRODUCT.SUBCODE10
LEFT JOIN ITXVIEWCOLOR A ON
    PRODUCTIONDEMAND.ITEMTYPEAFICODE = A.ITEMTYPECODE
    AND 
          PRODUCTIONDEMAND.SUBCODE01 = A.SUBCODE01
    AND 
          PRODUCTIONDEMAND.SUBCODE02 = A.SUBCODE02
    AND 
          PRODUCTIONDEMAND.SUBCODE03 = A.SUBCODE03
    AND 
          PRODUCTIONDEMAND.SUBCODE04 = A.SUBCODE04
    AND 
          PRODUCTIONDEMAND.SUBCODE05 = A.SUBCODE05
    AND 
          PRODUCTIONDEMAND.SUBCODE06 = A.SUBCODE06
    AND 
          PRODUCTIONDEMAND.SUBCODE07 = A.SUBCODE07
    AND 
          PRODUCTIONDEMAND.SUBCODE08 = A.SUBCODE08
    AND 
          PRODUCTIONDEMAND.SUBCODE09 = A.SUBCODE09
    AND 
          PRODUCTIONDEMAND.SUBCODE10 = A.SUBCODE10
LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
    AND 
          PRODUCTIONDEMAND.ORIGDLVSALORDERLINEORDERLINE = SALESORDERDELIVERY.SALESORDERLINEORDERLINE
LEFT JOIN ORDERPARTNER ORDERPARTNER 
          ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER 
          ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESORDER SALESORDER ON 
          PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE = SALESORDER.CODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON 
          SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'BAT1';


-- DB2ADMIN.ITXVIEW_DEMAND_RESERVATION source

CREATE VIEW ITXVIEW_DEMAND_RESERVATION AS 
SELECT
    LISTAGG(
        TRIM(PRODUCTIONRESERVATION.ORDERCODE),
        ','
    ) AS DEMAND,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
FROM
    PRODUCTIONRESERVATION PRODUCTIONRESERVATION
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONRESERVATION.ORDERCODE = PRODUCTIONDEMAND.CODE
WHERE
    (
        PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
            OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
    )
GROUP BY
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE;


-- DB2ADMIN.ITXVIEW_DEMAND_TGL_END source

CREATE VIEW ITXVIEW_DEMAND_TGL_END AS
SELECT
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
          p.PROPROGRESSPROGRESSNUMBER,
          p.DEMANDSTEPSTEPNUMBER,
          LISTAGG(
        p2.PROGRESSENDDATE || ' ' || PROGRESSENDTIME ,
        ','
    ) AS SELESAI
FROM
    PRODUCTIONPROGRESSSTEPUPDATED p
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'E01'
    --      WHERE p.DEMANDSTEPPRODUCTIONDEMANDCODE ='00092794'
GROUP BY 
          p.DEMANDSTEPPRODUCTIONDEMANDCODE,
          p.PROPROGRESSPROGRESSNUMBER,
          p.DEMANDSTEPSTEPNUMBER;


-- DB2ADMIN.ITXVIEW_DEMAND_TGL_REPORTHEADER source

CREATE VIEW ITXVIEW_DEMAND_TGL_REPORTHEADER AS
SELECT
    ds.DEMANDSTEPPRODUCTIONDEMANDCODE,
    ds.DEMANDSTEPSTEPNUMBER,
    ds.MULAI,
    de.SELESAI
FROM
    ITXVIEW_DEMAND_TGL_START ds
LEFT JOIN ITXVIEW_DEMAND_TGL_END de ON
    ds.DEMANDSTEPPRODUCTIONDEMANDCODE = de.DEMANDSTEPPRODUCTIONDEMANDCODE
    AND 
ds.DEMANDSTEPSTEPNUMBER = de.DEMANDSTEPSTEPNUMBER
    --WHERE ds.DEMANDSTEPPRODUCTIONDEMANDCODE ='00092794';


-- DB2ADMIN.ITXVIEW_DEMAND_TGL_START source

CREATE VIEW ITXVIEW_DEMAND_TGL_START AS
SELECT
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
          p.PROPROGRESSPROGRESSNUMBER,
          p.DEMANDSTEPSTEPNUMBER,
         LISTAGG(
        p2.PROGRESSSTARTPROCESSDATE || ' ' || PROGRESSSTARTPROCESSTIME ,
        ','
    ) AS MULAI
FROM
    PRODUCTIONPROGRESSSTEPUPDATED p
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'S01'
    --      WHERE p.DEMANDSTEPPRODUCTIONDEMANDCODE ='00092794'
GROUP BY 
          p.DEMANDSTEPPRODUCTIONDEMANDCODE,
          p.PROPROGRESSPROGRESSNUMBER,
          p.DEMANDSTEPSTEPNUMBER;


-- DB2ADMIN.ITXVIEW_DENSITY source

CREATE VIEW ITXVIEW_DENSITY AS
SELECT
    p2.CODE,
    p2.SUBCODE02 AS SUBCODE02_DEMAND,
    p.SUBCODE02 AS SUBCODE02_SPECS,
    a.VALUEDECIMAL
FROM
    PRODUCTIONSPECS p
LEFT JOIN PRODUCTIONDEMAND p2 ON
    p2.SUBCODE02 = p.SUBCODE02
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.FIELDNAME = 'Density'
WHERE
    p.OPERATIONCODE = 'SWN1'
    AND p.ITEMTYPEAFICODE = 'DYR';


-- DB2ADMIN.ITXVIEW_DESIGN_SCREENS source

CREATE VIEW ITXVIEW_DESIGN_SCREENS AS
SELECT
    DISTINCT 
    r.NUMBERID,
    --    r.SUBCODE01,
    d3.DESIGNSUBCODE01,
    d3.DESIGNCOMPONENTVARIANTCODE,
    t.LONGDESCRIPTION AS MESH,
    r.LONGDESCRIPTION AS RECIPEDESCRIPTION
FROM
    DESIGN d
LEFT JOIN DESIGNCOMPONENT d2 ON
    d2.DESIGNNUMBERID = d.NUMBERID
LEFT JOIN DESIGNSCREENS d3 ON
    d3.DESIGNCOMPONENTDESIGNNUMBERID = d2.DESIGNNUMBERID
    AND d3.DESIGNSUBCODE01 = d2.DESIGNSUBCODE01
LEFT JOIN RECIPE r ON
    r.SUBCODE01 = d3.RECIPEDESCRIPTION
LEFT JOIN TOOL t ON
    t.SUBCODE01 = SUBSTR(r.SUBCODE01, 1, 5) || '/' || SUBSTR(r.SUBCODE01, 12)
    --WHERE 
    --	d3.DESIGNSUBCODE01 = 'R1173' AND d3.DESIGNCOMPONENTVARIANTCODE = 'PI0F'
    --ORDER BY
    --	r.NUMBERID ASC;


-- DB2ADMIN.ITXVIEW_DETAILBPP source

CREATE VIEW ITXVIEW_DETAILBPP AS
SELECT
    REPLENISHMENTREQUISITION.HEADERCODE,
    REPLENISHMENTREQUISITION.CODE AS REP_CODE,
    CUSTOMERSUPPLIERDATA.CODE,
    TRIM(BUSINESSPARTNER.LEGALNAME1) AS NM_SUPPLIER,
    PURCHASEORDERLINE.PRICE
FROM
    REPLENISHMENTREQUISITION REPLENISHMENTREQUISITION
LEFT JOIN PURCHASEORDER PURCHASEORDER ON
    REPLENISHMENTREQUISITION.LINEPURCHASEORDERCODE = PURCHASEORDER.CODE
LEFT JOIN PURCHASEORDERLINE PURCHASEORDERLINE ON
    REPLENISHMENTREQUISITION.LINEPURCHASEORDERCODE = PURCHASEORDERLINE.PURCHASEORDERCODE
    AND REPLENISHMENTREQUISITION.LINEORDERLINE = PURCHASEORDERLINE.ORDERLINE
LEFT JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    PURCHASEORDER.ORDPRNCUSTOMERSUPPLIERCODE = CUSTOMERSUPPLIERDATA.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
GROUP BY
    REPLENISHMENTREQUISITION.HEADERCODE,
    REPLENISHMENTREQUISITION.CODE,
    CUSTOMERSUPPLIERDATA.CODE,
    BUSINESSPARTNER.LEGALNAME1,
    PURCHASEORDERLINE.PRICE;


-- DB2ADMIN.ITXVIEW_DETAILCOMMERCIALINV_EXIM source

CREATE VIEW ITXVIEW_DETAILCOMMERCIALINV_EXIM AS
SELECT
    ITXVIEWALLOCATION0.LOTCODE,
    ITXVIEWALLOCATION0.CODE,
    ITXVIEWALLOCATION0.USERPRIMARYQUANTITY,
    ITXVIEWALLOCATION0.USERSECONDARYQUANTITY,
    ITXVIEWALLOCATION0.ITEMELEMENTCODE,
    ITXVIEWPACKINGLIST_EXIM.PRICE,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALITEM,
    ITXVIEWPACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEWPACKINGLIST_EXIM.PROJECTCODE,
    ITXVIEWPACKINGLIST_EXIM.ORDERLINE
FROM
    ITXVIEWPACKINGLIST_EXIM ITXVIEWPACKINGLIST_EXIM
LEFT JOIN ITXVIEWALLOCATION0 ITXVIEWALLOCATION0 ON
    ITXVIEWPACKINGLIST_EXIM.CODE = ITXVIEWALLOCATION0.CODE;


-- DB2ADMIN.ITXVIEW_DETAILINVOICE source

CREATE VIEW ITXVIEW_DETAILINVOICE AS
SELECT
    s2.INTERNALREFERENCEDATE AS TGL_SJ,
    trim(p.CODE) AS NO_INVOICE,
    trim(s.PROJECTCODE) AS BON_ORDER,
    trim(s2.PREVIOUSCODE) AS NO_SJ,
    trim(s2.SUBCODE03) AS ITEM1,
    trim(s2.SUBCODE05) AS ITEM2,
    trim(s2.SUBCODE01) || ' ' || trim(s2.SUBCODE02) || ' - ' || trim(s2.ITEMDESCRIPTION) AS JENIS_KAIN,
    trim(s2.USERPRIMARYUOMCODE) AS UOM_PRIMARY,
    trim(s2.USERPRIMARYQUANTITY) AS QTY_PRIMARY,
    trim(s2.USERSECONDARYUOMCODE) AS UOM_SECOND,
    trim(s2.USERSECONDARYQUANTITY) AS QTY_SECOND,
    trim(s2.price) AS Harga
FROM
    PLANTINVOICE p
LEFT JOIN SALESDOCUMENT s ON
    s.PROVISIONALCODE = p.CODE
LEFT JOIN SALESDOCUMENTLINE s2 ON
    s2.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_DETAIL_COMMRECIAL_INV source

CREATE VIEW ITXVIEW_DETAIL_COMMRECIAL_INV AS
SELECT
    LOTCODE,
    PROVISIONALCODE,
    PROVISIONALDOCUMENTDATE,
    PROJECTCODE,
    EXTERNALITEM,
    EXTERNALREFERENCE,
    USERPRIMARYUOMCODE,
    SUM(USERPRIMARYQUANTITY) AS QTY_KG,
    USERSECONDARYUOMCODE,
    CASE
        WHEN USERSECONDARYUOMCODE = 'yd' THEN SUM(USERSECONDARYQUANTITY)
        ELSE 0
    END QTY_YD,
    CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN SUM(qty_meter)
        ELSE 0
    END QTY_M,
    CASE
        WHEN USERSECONDARYUOMCODE = 'un' THEN FLOOR(USERSECONDARYQUANTITY)
        ELSE 0
    END QTY_PCS,
    WARNA,
    PRICE,
    PRICEUNITOFMEASURECODE,
    CASE
        WHEN PRICEUNITOFMEASURECODE IN(
            'kg', 'un'
        ) THEN SUM(USERPRIMARYQUANTITY)* PRICE
        WHEN PRICEUNITOFMEASURECODE = 'yd' THEN SUM(USERSECONDARYQUANTITY) * PRICE
        WHEN PRICEUNITOFMEASURECODE = 'm' THEN SUM(qty_meter) * PRICE
    END AS JML_AMOUNT
FROM
    (
        SELECT
            LOTCODE,
            PROVISIONALCODE,
            PROVISIONALDOCUMENTDATE,
            PROJECTCODE,
            EXTERNALREFERENCE,
            EXTERNALITEM,
            USERPRIMARYUOMCODE,
            CASE
                WHEN QUALITYREASONCODE = 'FOC' THEN 0
                ELSE SUM(USERPRIMARYQUANTITY)
            END AS USERPRIMARYQUANTITY,
            USERSECONDARYUOMCODE,
            CASE
                WHEN QUALITYREASONCODE = 'FOC' THEN 0
                ELSE SUM(USERSECONDARYQUANTITY)
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN QUALITYREASONCODE = 'FOC' THEN 0
                ELSE SUM(qty_meter)
            END AS qty_meter,
            WARNA,
            CASE
                WHEN QUALITYREASONCODE = 'FOC' THEN SUM(USERPRIMARYQUANTITY)
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN QUALITYREASONCODE = 'FOC' THEN SUM(USERSECONDARYQUANTITY)
                ELSE 0
            END AS FOC_YARD,
            PRICE,
            PRICEUNITOFMEASURECODE
        FROM
            (
                SELECT
                    DISTINCT ALLOCATION.LOTCODE,
                    ALLOCATION.CODE,
                    ALLOCATION.USERPRIMARYUOMCODE,
                    ALLOCATION.USERPRIMARYQUANTITY,
                    ALLOCATION.USERSECONDARYUOMCODE,
                    ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2)AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN ALLOCATION.USERSECONDARYUOMCODE = 'm' THEN ROUND(ALLOCATION.USERSECONDARYQUANTITY , 2)
                        WHEN ALLOCATION.USERSECONDARYUOMCODE = 'yd' THEN ROUND((ALLOCATION.USERSECONDARYQUANTITY * 0.9144), 2)
                        ELSE 0
                    END AS qty_meter,
                    ALLOCATION.ITEMELEMENTCODE,
                    ITXVIEW_PACKINGLIST_EXIM.EXTERNALREFERENCE,
                    ITXVIEW_PACKINGLIST_EXIM.EXTERNALITEM,
                    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
                    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
                    ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE,
                    ITXVIEW_PACKINGLIST_EXIM.MESSRS_ID,
                    ITXVIEW_PACKINGLIST_EXIM.CONSIGNEE_ID,
                    ITXVIEW_PACKINGLIST_EXIM.ORDERLINE,
                    ITXVIEW_PACKINGLIST_EXIM.ITEMTYPEAFICODE,
                    ITXVIEW_PACKINGLIST_EXIM.PRICE,
                    ITXVIEW_PACKINGLIST_EXIM.PRICEUNITOFMEASURECODE,
                    ALLOCATION.DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08,
                    ITXVIEW_PACKINGLIST_EXIM.ITEMDESCRIPTION,
                    ITXVIEWCOLOR.WARNA,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN ALLOCATION.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS QTY_FOC,
                    e.QUALITYREASONCODE
                FROM
                    ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM
                LEFT JOIN (
                        SELECT
                            *
                        FROM
                            ALLOCATION ALLOCATION
                        WHERE
                            ALLOCATION.DETAILTYPE = '0'
                    )ALLOCATION ON
                    ITXVIEW_PACKINGLIST_EXIM.CODE = ALLOCATION.CODE
                LEFT JOIN ELEMENTS e ON
                    e.CODE = ALLOCATION.ITEMELEMENTCODE
                LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
                    ALLOCATION.DECOSUBCODE01 = ITXVIEWCOLOR.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = ITXVIEWCOLOR.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = ITXVIEWCOLOR.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = ITXVIEWCOLOR.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = ITXVIEWCOLOR.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = ITXVIEWCOLOR.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = ITXVIEWCOLOR.SUBCODE07
                WHERE
                    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            )
        GROUP BY
            LOTCODE,
            PROVISIONALCODE,
            PROVISIONALDOCUMENTDATE,
            PROJECTCODE,
            EXTERNALREFERENCE,
            EXTERNALITEM,
            QUALITYREASONCODE,
            WARNA,
            PRICE,
            USERPRIMARYUOMCODE,
            USERSECONDARYUOMCODE,
            PRICEUNITOFMEASURECODE
    )
GROUP BY
    LOTCODE,
    PROVISIONALCODE,
    PROVISIONALDOCUMENTDATE,
    EXTERNALITEM,
    PROJECTCODE,
    USERPRIMARYUOMCODE,
    USERSECONDARYQUANTITY,
    USERSECONDARYUOMCODE,
    EXTERNALREFERENCE,
    WARNA,
    PRICE,
    PRICEUNITOFMEASURECODE;


-- DB2ADMIN.ITXVIEW_DETAIL_EXIM source

CREATE VIEW ITXVIEW_DETAIL_EXIM AS
SELECT
    ALLOCATION.LOTCODE,
    ALLOCATION.CODE,
    ALLOCATION.USERPRIMARYQUANTITY,
    ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2)AS USERSECONDARYQUANTITY,
    ALLOCATION.ITEMELEMENTCODE,
    ITXVIEW_PACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEW_PACKINGLIST_EXIM.EXTERNALITEM,
    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEW_PACKINGLIST_EXIM.SALDOCPROVISIONALCOUNTERCODE,
    ITXVIEW_PACKINGLIST_EXIM.COMPANYCODE,
    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
    ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE,
    ITXVIEW_PACKINGLIST_EXIM.MESSRS_ID,
    ITXVIEW_PACKINGLIST_EXIM.CONSIGNEE_ID,
    ITXVIEW_PACKINGLIST_EXIM.ORDERLINE,
    ITXVIEW_PACKINGLIST_EXIM.ITEMTYPEAFICODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ITXVIEW_PACKINGLIST_EXIM.ITEMDESCRIPTION,
    CASE
        WHEN idfi.QUALITYREASON = 'FOC' THEN ALLOCATION.USERPRIMARYQUANTITY
        ELSE 0
    END AS QTY_FOC,    
    idfi.QUALITYREASON
FROM
    ALLOCATION ALLOCATION
LEFT JOIN ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM ON 
    ITXVIEW_PACKINGLIST_EXIM.CODE = ALLOCATION.CODE
    AND ITXVIEW_PACKINGLIST_EXIM.COMPANYCODE = ALLOCATION.COMPANYCODE
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND ITXVIEW_PACKINGLIST_EXIM.SUBCODE08 = ALLOCATION.DECOSUBCODE08
LEFT JOIN ITXVIEW_DETAIL_FOC_INVOICE idfi ON
    idfi.code = ITXVIEW_PACKINGLIST_EXIM.CODE
    AND idfi.ELEMENTCODE = ALLOCATION.ITEMELEMENTCODE
    AND idfi.LOTCODE = ALLOCATION.LOTCODE
    AND idfi.PROJECTCODE = ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE
    AND idfi.NO_SJ = ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    AND ALLOCATION.DETAILTYPE = '0'
    --            AND  ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE = 'ESP2300772' ;
    --    AND  idfi.QUALITYREASON ='FOC';


-- DB2ADMIN.ITXVIEW_DETAIL_FOC_INVOICE source

CREATE VIEW ITXVIEW_DETAIL_FOC_INVOICE AS
SELECT
    code,
    NO_INVOICE,
    NO_SJ,
    jenis_order,
    linenumber,
    projectcode,
    lotcode,
    price,
    unit,
    sum(foc_kg) AS foc_kg,
    sum(foc_yard) AS foc_yard,
    unit_foc,
    price * unit_foc AS quantity_foc,
    qualityreason,
    elementcode
FROM
    (
        SELECT
            a.code AS code,
            subinv.no_sj AS NO_SJ,
            subinv.invoice AS NO_INVOICE,
            subinv.JENIS_ORDER AS jenis_order,
            a.LINENUMBER AS linenumber,
            a.PROJECTCODE AS projectcode,
            a.lotcode AS lotcode,
            subinv.price_usd AS price,
            subinv.unit AS unit,
            (a.BASEPRIMARYQUANTITY) AS foc_kg,
            (a.BASESECONDARYQUANTITY) AS foc_yard,
            CASE
                WHEN subinv.UNIT = 'kg' THEN (a.BASEPRIMARYQUANTITY)
                ELSE
    	(a.BASESECONDARYQUANTITY)
            END AS unit_foc,
            e.QUALITYREASONCODE AS QUALITYREASON,
            e.ELEMENTCODE AS elementcode
        FROM
            ITXVIEW_SUB_FOC_INVOICE subinv
        LEFT JOIN ALLOCATION a ON
            subinv.CODE_ALLOCATION = a.code
        LEFT JOIN ELEMENTSINSPECTION e ON
            a.ITEMELEMENTCODE = e.ELEMENTCODE
        WHERE
            a.STOCKTYPECODE = 'AFW'
            AND e.QUALITYREASONCODE = 'FOC'
            AND subinv.jenis_order <> 'REPLCEXP'
            AND subinv.jenis_order <> 'REPLACE'
            AND subinv.jenis_order <> 'DOMESTIC'
            AND subinv.jenis_order <> 'RETRNFAB'
            --                AND subinv.INVOICE = 'EX2200230'
            --                		AND subinv.invoice = 'EX2200196'
            --                		 AND subinv.invoice ='EX2200139'
            --RP2200003
            -- SF2200006
            --AND a.code = '000000086055'
            --000000086055   ,000000065131(nonfoc)
        GROUP BY
            a.code,
            subinv.invoice,
            subinv.no_sj,
            subinv.JENIS_ORDER,
            a.LINENUMBER,
            a.PROJECTCODE,
            a.lotcode,
            a.BASEPRIMARYQUANTITY,
            a.BASESECONDARYQUANTITY,
            subinv.price_usd,
            subinv.unit,
            e.QUALITYREASONCODE,
            e.ELEMENTCODE
    )
GROUP BY
    code,
    NO_INVOICE,
    NO_SJ,
    jenis_order,
    linenumber,
    projectcode,
    lotcode,
    price,
    unit,
    --    foc_kg,
    --    foc_yard,
    unit_foc,
    qualityreason,
    elementcode;


-- DB2ADMIN.ITXVIEW_DETAIL_FOC_INVOICE2 source

CREATE VIEW ITXVIEW_DETAIL_FOC_INVOICE2 AS
SELECT
    code,
    NO_INVOICE,
    NO_SJ,
    jenis_order,
    linenumber,
    projectcode,
    lotcode,
    price,
    unit,
    sum(foc_kg) AS foc_kg,
    sum(foc_yard) AS foc_yard,
    unit_foc,
    price * unit_foc AS quantity_foc,
    qualityreason,
    elementcode
FROM
    (
        SELECT
            a.code AS code,
            subinv.no_sj AS NO_SJ,
            subinv.invoice AS NO_INVOICE,
            subinv.JENIS_ORDER AS jenis_order,
            a.LINENUMBER AS linenumber,
            a.PROJECTCODE AS projectcode,
            a.lotcode AS lotcode,
            subinv.price_usd AS price,
            subinv.unit AS unit,
            (a.BASEPRIMARYQUANTITY) AS foc_kg,
            (a.BASESECONDARYQUANTITY) AS foc_yard,
            CASE
                WHEN subinv.UNIT = 'kg' THEN (a.BASEPRIMARYQUANTITY)
                ELSE (a.BASESECONDARYQUANTITY)
            END AS unit_foc,
            e.QUALITYREASONCODE AS QUALITYREASON,
            e.CODE AS elementcode
        FROM
            ITXVIEW_SUB_FOC_INVOICE2 subinv
        LEFT JOIN ALLOCATION a ON
            subinv.CODE_ALLOCATION = a.code
        LEFT JOIN ELEMENTS e ON
            a.ITEMELEMENTCODE = e.CODE
        WHERE
            a.STOCKTYPECODE = 'AFW'
            AND e.QUALITYREASONCODE = 'FOC'
            AND subinv.jenis_order <> 'REPLCEXP'
            AND subinv.jenis_order <> 'REPLACE'
            AND subinv.jenis_order <> 'DOMESTIC'
            AND subinv.jenis_order <> 'RETRNFAB'
            AND subinv.jenis_order <> 'SAMPDOM'
        GROUP BY
            a.code,
            subinv.invoice,
            subinv.no_sj,
            subinv.JENIS_ORDER,
            a.LINENUMBER,
            a.PROJECTCODE,
            a.lotcode,
            a.BASEPRIMARYQUANTITY,
            a.BASESECONDARYQUANTITY,
            subinv.price_usd,
            subinv.unit,
            e.QUALITYREASONCODE,
            e.CODE
    )
GROUP BY
    code,
    NO_INVOICE,
    NO_SJ,
    jenis_order,
    linenumber,
    projectcode,
    lotcode,
    price,
    unit,
    unit_foc,
    qualityreason,
    elementcode;


-- DB2ADMIN.ITXVIEW_DETAIL_QA_DATA source

CREATE VIEW ITXVIEW_DETAIL_QA_DATA AS
SELECT
    DISTINCT
	a.VALUEINT,
    PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE,
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDSTEP.WORKCENTERCODE,
    CASE
        WHEN PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE IS NULL THEN PRODUCTIONDEMANDSTEP.OPERATIONCODE
        WHEN TRIM(PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE) = '' THEN PRODUCTIONDEMANDSTEP.OPERATIONCODE
        ELSE PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE
    END AS OPERATIONCODE,
    TRIM(o.LONGDESCRIPTION) AS DESKRIPSI_OPERATION,
    QUALITYDOClINE.LINE,
    QUALITYDOClINE.QUALITYDOCUMENTHEADERNUMBERID,
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOClINE.CHARACTERISTICCODE,
    QUALITYCHARACTERISTICTYPE.LONGDESCRIPTION,
    CASE
        WHEN QUALITYDOClINE.VALUEQUANTITY IS NULL
        OR QUALITYDOClINE.VALUEQUANTITY = 0 THEN 0
        ELSE
        --		floor ( QUALITYDOClINE.VALUEQUANTITY ) 
		(QUALITYDOClINE.VALUEQUANTITY)
    END AS VALUEQUANTITY
FROM
    QUALITYDOCUMENT QUALITYDOCUMENT
LEFT JOIN QUALITYDOCLINE QUALITYDOCLINE ON
    QUALITYDOCUMENT.HEADERNUMBERID = QUALITYDOCLINE.QUALITYDOCUMENTHEADERNUMBERID
    AND QUALITYDOCUMENT.HEADERLINE = QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE
LEFT JOIN QUALITYCHARACTERISTICTYPE QUALITYCHARACTERISTICTYPE ON
    QUALITYDOClINE.CHARACTERISTICCODE = QUALITYCHARACTERISTICTYPE.CODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = QUALITYDOCUMENT.ABSUNIQUEID
    AND a.FIELDNAME = 'GroupStepNumber'
LEFT JOIN PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP ON
    PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = QUALITYDOCUMENT.PRODUCTIONORDERCODE
    --													AND PRODUCTIONDEMANDSTEP.WORKCENTERCODE = QUALITYDOCUMENT.WORKCENTERCODE
    AND PRODUCTIONDEMANDSTEP.OPERATIONCODE = QUALITYDOCUMENT.OPERATIONCODE
    AND 
														CASE
        WHEN TRIM(PRODUCTIONDEMANDSTEP.STEPTYPE) = '0' THEN PRODUCTIONDEMANDSTEP.STEPNUMBER = a.VALUEINT
        ELSE PRODUCTIONDEMANDSTEP.GROUPSTEPNUMBER = a.VALUEINT
    END
LEFT JOIN OPERATION o ON
    o.CODE = CASE
        WHEN PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE IS NULL THEN PRODUCTIONDEMANDSTEP.OPERATIONCODE
        WHEN TRIM(PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE) = '' THEN PRODUCTIONDEMANDSTEP.OPERATIONCODE
        ELSE PRODUCTIONDEMANDSTEP.PRODRESERVATIONLINKGROUPCODE
    END
WHERE
    QUALITYDOCLINE.VALUEQUANTITY IS NOT NULL
    AND QUALITYDOCLINE.VALUEQUANTITY <> 0
    --	AND PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE = '00110929' 
    --	AND PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE = '00190147'
    --	AND PRODUCTIONDEMANDSTEP.OPERATIONCODE = 'OVN1';


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANG source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANG AS
SELECT
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENT.PROVISIONALDOCUMENTDATE,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYQUANTITY, 
    INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.WEIGHTGROSS,    
    STOCKTRANSACTION.ORDERLINE, 
    PRODUCT.LONGDESCRIPTION AS JENIS_BENANG,
    CASE
        WHEN LOCATE('+', STOCKTRANSACTION.LOTCODE) = 0 THEN
    STOCKTRANSACTION.LOTCODE
        ELSE
    SUBSTR(STOCKTRANSACTION.LOTCODE, 1, LOCATE('+', STOCKTRANSACTION.LOTCODE)-1)
    END
    AS LOT,
    SUBSTR(INTERNALDOCUMENTLINE.ITEMDESCRIPTION, 1, LOCATE('-', INTERNALDOCUMENTLINE.ITEMDESCRIPTION)-1) AS alias_supp
FROM
    INTERNALDOCUMENT INTERNALDOCUMENT
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE ON
    INTERNALDOCUMENT.PROVISIONALCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
LEFT JOIN PRODUCT PRODUCT ON
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
    AND
INTERNALDOCUMENTLINE.SUBCODE01 = PRODUCT.SUBCODE01
    AND
INTERNALDOCUMENTLINE.SUBCODE02 = PRODUCT.SUBCODE02
    AND
INTERNALDOCUMENTLINE.SUBCODE03 = PRODUCT.SUBCODE03
    AND
INTERNALDOCUMENTLINE.SUBCODE04 = PRODUCT.SUBCODE04
    AND
INTERNALDOCUMENTLINE.SUBCODE05 = PRODUCT.SUBCODE05
    AND
INTERNALDOCUMENTLINE.SUBCODE06 = PRODUCT.SUBCODE06
    AND
INTERNALDOCUMENTLINE.SUBCODE07 = PRODUCT.SUBCODE07
LEFT JOIN (
        SELECT
            *
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '204'
            AND STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'TR11'
    ) STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND
INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE
WHERE
    (
        INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = 'P501'
            OR INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = 'M904'
    )
    AND INTERNALDOCUMENT.EXTERNALREFERENCE = 'RETUR'
GROUP BY
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENT.PROVISIONALDOCUMENTDATE,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYQUANTITY,
    PRODUCT.LONGDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.WEIGHTGROSS,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANG29_CK source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANG29_CK AS
SELECT
    *
FROM
    STOCKTRANSACTION s
WHERE
    (
        WHSLOCATIONWAREHOUSEZONECODE = 'L01'
            OR WHSLOCATIONWAREHOUSEZONECODE = 'L04'
    )
    AND (
        WAREHOUSELOCATIONCODE = 'Q29'
            OR WAREHOUSELOCATIONCODE = 'C29'
    );


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANGR29_CK source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANGR29_CK AS
SELECT
        WEIGHTGROSS,
    WEIGHTNET,
    ITEMELEMENTCODE
FROM
        STOCKTRANSACTION
WHERE
        TEMPLATECODE = '125'
    AND (
        WHSLOCATIONWAREHOUSEZONECODE = 'L01'
            OR WHSLOCATIONWAREHOUSEZONECODE = 'L04'
    )
    AND (
        WAREHOUSELOCATIONCODE = 'Q29'
            OR WAREHOUSELOCATIONCODE = 'C29'
    );


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANGR_CK source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANGR_CK AS
SELECT
        WEIGHTGROSS,
    WEIGHTNET,
    ITEMELEMENTCODE
FROM
        STOCKTRANSACTION
WHERE
        TEMPLATECODE = '125'
    AND (
        WHSLOCATIONWAREHOUSEZONECODE = 'L01'
            OR WHSLOCATIONWAREHOUSEZONECODE = 'L04'
    )
    AND (
        WAREHOUSELOCATIONCODE = 'Q30'
            OR WAREHOUSELOCATIONCODE = 'C30'
    );


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANG_CK source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANG_CK AS
SELECT
    *
FROM
    STOCKTRANSACTION s
WHERE
    (
        WHSLOCATIONWAREHOUSEZONECODE = 'L01'
            OR WHSLOCATIONWAREHOUSEZONECODE = 'L04'
    )
    AND (
        WAREHOUSELOCATIONCODE = 'Q30'
            OR WAREHOUSELOCATIONCODE = 'C30'
    );


-- DB2ADMIN.ITXVIEW_DETAIL_RETUR_BENANG_YND source

CREATE VIEW ITXVIEW_DETAIL_RETUR_BENANG_YND AS
SELECT
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENT.PROVISIONALDOCUMENTDATE,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYQUANTITY, 
    INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.TRANSACTIONNUMBER,
    STOCKTRANSACTION.WEIGHTGROSS,    
    STOCKTRANSACTION.ORDERLINE, 
    PRODUCT.LONGDESCRIPTION AS JENIS_BENANG,
    CASE
        WHEN LOCATE('+', STOCKTRANSACTION.LOTCODE) = 0 THEN
    STOCKTRANSACTION.LOTCODE
        ELSE
    SUBSTR(STOCKTRANSACTION.LOTCODE, 1, LOCATE('+', STOCKTRANSACTION.LOTCODE)-1)
    END
    AS LOT,
    SUBSTR(INTERNALDOCUMENTLINE.ITEMDESCRIPTION, 1, LOCATE('-', INTERNALDOCUMENTLINE.ITEMDESCRIPTION)-1) AS alias_supp
FROM
    INTERNALDOCUMENT INTERNALDOCUMENT
LEFT JOIN INTERNALDOCUMENTLINE INTERNALDOCUMENTLINE ON
    INTERNALDOCUMENT.PROVISIONALCODE = INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE
LEFT JOIN PRODUCT PRODUCT ON
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
    AND
INTERNALDOCUMENTLINE.SUBCODE01 = PRODUCT.SUBCODE01
    AND
INTERNALDOCUMENTLINE.SUBCODE02 = PRODUCT.SUBCODE02
    AND
INTERNALDOCUMENTLINE.SUBCODE03 = PRODUCT.SUBCODE03
    AND
INTERNALDOCUMENTLINE.SUBCODE04 = PRODUCT.SUBCODE04
    AND
INTERNALDOCUMENTLINE.SUBCODE05 = PRODUCT.SUBCODE05
    AND
INTERNALDOCUMENTLINE.SUBCODE06 = PRODUCT.SUBCODE06
    AND
INTERNALDOCUMENTLINE.SUBCODE07 = PRODUCT.SUBCODE07
LEFT JOIN (
        SELECT
            *
        FROM
            STOCKTRANSACTION STOCKTRANSACTION
        WHERE
            STOCKTRANSACTION.TEMPLATECODE = '204'
            AND STOCKTRANSACTION.LOGICALWAREHOUSECODE = 'TR11'
    ) STOCKTRANSACTION ON
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE = STOCKTRANSACTION.ORDERCODE
    AND
INTERNALDOCUMENTLINE.ORDERLINE = STOCKTRANSACTION.ORDERLINE
WHERE
    (
        INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = 'P503'
    )
    AND INTERNALDOCUMENT.EXTERNALREFERENCE = 'RETUR'
GROUP BY
    INTERNALDOCUMENTLINE.INTDOCUMENTPROVISIONALCODE,
    INTERNALDOCUMENT.PROVISIONALDOCUMENTDATE,
    INTERNALDOCUMENTLINE.ITEMDESCRIPTION,
    INTERNALDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    INTERNALDOCUMENTLINE.ITEMTYPEAFICODE,
    STOCKTRANSACTION.USERPRIMARYQUANTITY,
    STOCKTRANSACTION.USERSECONDARYQUANTITY,
    PRODUCT.LONGDESCRIPTION,
    STOCKTRANSACTION.LOTCODE,
    STOCKTRANSACTION.TRANSACTIONDATE,
    STOCKTRANSACTION.WEIGHTGROSS,
    STOCKTRANSACTION.ORDERLINE,
    STOCKTRANSACTION.TRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEW_EXIM_COLOR source

CREATE VIEW ITXVIEW_EXIM_COLOR AS
SELECT
    SD.PROVISIONALCODE,
    SD.PROJECTCODE,
    SDL.SUBCODE02,
    SDL.SUBCODE03,
    SDL.ITEMDESCRIPTION AS JENIS_KAIN,
    ITXVIEWCOLOR.WARNA
FROM
    SALESDOCUMENT SD
LEFT JOIN SALESORDER SO ON
    SD.DELIVERYPOINTUNIQUEID = SO.DELIVERYPOINTUNIQUEID
LEFT JOIN SALESDOCUMENTLINE SDL ON
    SD.PROVISIONALCODE = SDL.SALESDOCUMENTPROVISIONALCODE
    AND SO.CODE = SDL.PROJECTCODE
LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
    SDL.SUBCODE01 = ITXVIEWCOLOR.SUBCODE01
    AND SDL.SUBCODE02 = ITXVIEWCOLOR.SUBCODE02
    AND SDL.SUBCODE03 = ITXVIEWCOLOR.SUBCODE03
    AND SDL.SUBCODE04 = ITXVIEWCOLOR.SUBCODE04
    AND SDL.SUBCODE05 = ITXVIEWCOLOR.SUBCODE05
    AND SDL.SUBCODE06 = ITXVIEWCOLOR.SUBCODE06
    AND SDL.SUBCODE07 = ITXVIEWCOLOR.SUBCODE07
WHERE
    WARNA IS NOT NULL
GROUP BY
    SD.PROVISIONALCODE,
    SD.PROJECTCODE,
    SDL.SUBCODE02,
    SDL.SUBCODE03,
    SDL.ITEMDESCRIPTION,
    ITXVIEWCOLOR.WARNA;


-- DB2ADMIN.ITXVIEW_EXIM_FOC source

CREATE VIEW ITXVIEW_EXIM_FOC AS
SELECT
    a.code,
    sjexm.PROVISIONALCODE,
    sjexm.JENIS_ORDER,
    a.LINENUMBER,
    a.PROJECTCODE,
    a.BASEPRIMARYQUANTITY,
    ROUND( a.BASESECONDARYQUANTITY, 2) AS BASESECONDARYQUANTITY,
    e.QUALITYREASONCODE,
    e.ELEMENTCODE
FROM
    ITXVIEW_SURATJALAN_EXIM sjexm
LEFT JOIN ALLOCATION a ON
    sjexm.code = a.code
LEFT JOIN ELEMENTSINSPECTION e ON
    a.ITEMELEMENTCODE = e.ELEMENTCODE
WHERE
    a.STOCKTYPECODE = 'AFW'
    AND e.QUALITYREASONCODE = 'FOC'
    AND sjexm.jenis_order <> 'REPLCEXP'
GROUP BY
    a.code,
    sjexm.PROVISIONALCODE,
    sjexm.JENIS_ORDER,
    a.LINENUMBER,
    a.PROJECTCODE,
    a.BASEPRIMARYQUANTITY,
    a.BASESECONDARYQUANTITY,
    e.QUALITYREASONCODE,
    e.ELEMENTCODE;


-- DB2ADMIN.ITXVIEW_EXIM_ISSUINGNGBANK source

CREATE VIEW ITXVIEW_EXIM_ISSUINGNGBANK AS
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'IssuingBank';


-- DB2ADMIN.ITXVIEW_EXIM_QUANTITY source

CREATE VIEW ITXVIEW_EXIM_QUANTITY AS
SELECT
    no_sj,
    count(code_allocation) AS count,
    sum(berat) AS kg,
    sum(yard) AS rolls
FROM
    (
        SELECT
            ITXVIEW_SURATJALAN_EXIM.CODE AS code_allocation,
            ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE AS NO_SJ,
            ITXVIEWALLOCATION0_SJEXIM .BASEPRIMARYQUANTITY AS berat,
            ITXVIEWALLOCATION0_SJEXIM .BASESECONDARYQUANTITY AS yard
        FROM
            ITXVIEW_SURATJALAN_EXIM ITXVIEW_SURATJALAN_EXIM
        LEFT JOIN ITXVIEWALLOCATION0_SJEXIM ITXVIEWALLOCATION0_SJEXIM ON
            ITXVIEW_SURATJALAN_EXIM.CODE = ITXVIEWALLOCATION0_SJEXIM .CODE
        GROUP BY
            ITXVIEW_SURATJALAN_EXIM.CODE,
            ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE,
            ITXVIEWALLOCATION0_SJEXIM .BASEPRIMARYQUANTITY,
            ITXVIEWALLOCATION0_SJEXIM .BASESECONDARYQUANTITY
    )
GROUP BY
    NO_SJ;


-- DB2ADMIN.ITXVIEW_EXIM_QUANTITY_FKF source

CREATE VIEW ITXVIEW_EXIM_QUANTITY_FKF AS
SELECT
    no_sj,
    count(code_allocation) AS count,
    sum(yard) AS bales
FROM
    (
        SELECT
            ITXVIEW_ALLOCATION_EXIM_FKF.CODE AS code_allocation,
            ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE AS NO_SJ,
            ITXVIEW_ALLOCATION_EXIM_FKF.BASESECONDARYQUANTITY AS yard
        FROM
            ITXVIEW_SURATJALAN_EXIM ITXVIEW_SURATJALAN_EXIM
        LEFT JOIN ITXVIEW_ALLOCATION_EXIM_FKF ITXVIEW_ALLOCATION_EXIM_FKF ON
            ITXVIEW_SURATJALAN_EXIM.CODE = ITXVIEW_ALLOCATION_EXIM_FKF.CODE
        GROUP BY
            ITXVIEW_ALLOCATION_EXIM_FKF.CODE,
            ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE,
            ITXVIEW_ALLOCATION_EXIM_FKF.BASESECONDARYQUANTITY
    )
GROUP BY
    NO_SJ;


-- DB2ADMIN.ITXVIEW_FOC_INVOICE source

CREATE VIEW ITXVIEW_FOC_INVOICE AS
SELECT
    NO_INVOICE,
    NO_SJ,
    SUM(foc_kg) AS foc_kg,
    SUM(foc_yard) AS foc_yard,
    SUM(QUANTITY_FOC) AS QUANTITY_FOC
FROM
    (
        SELECT
            ITXVIEW_DETAIL_FOC_INVOICE.NO_INVOICE AS NO_INVOICE,
            ITXVIEW_DETAIL_FOC_INVOICE.NO_SJ AS NO_SJ,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_KG AS FOC_KG,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_YARD AS FOC_YARD,
            ITXVIEW_DETAIL_FOC_INVOICE.QUANTITY_FOC AS QUANTITY_FOC
        FROM
            ITXVIEW_DETAIL_FOC_INVOICE
            --		WHERE ITXVIEW_DETAIL_FOC_INVOICE.NO_INVOICE = 'EX2200196'
        GROUP BY
            ITXVIEW_DETAIL_FOC_INVOICE.NO_INVOICE,
            ITXVIEW_DETAIL_FOC_INVOICE.NO_SJ,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_KG,
            ITXVIEW_DETAIL_FOC_INVOICE.FOC_YARD,
            ITXVIEW_DETAIL_FOC_INVOICE.QUANTITY_FOC
    )
GROUP BY
    NO_INVOICE,
    NO_SJ;


-- DB2ADMIN.ITXVIEW_FOC_INVOICE2 source

CREATE VIEW ITXVIEW_FOC_INVOICE2 AS
SELECT
    NO_INVOICE,
    NO_SJ,
    SUM(foc_kg) AS foc_kg,
    SUM(foc_yard) AS foc_yard,
    SUM(QUANTITY_FOC) AS QUANTITY_FOC
FROM
    (
        SELECT
            code,
            NO_INVOICE,
            NO_SJ,
            jenis_order,
            linenumber,
            projectcode,
            lotcode,
            price,
            unit,
            sum(foc_kg) AS foc_kg,
            sum(foc_yard) AS foc_yard,
            unit_foc,
            price * unit_foc AS quantity_foc,
            qualityreason,
            elementcode
        FROM
            (
                SELECT
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.code AS code,
                    SALESDOCUMENT.PROVISIONALCODE AS NO_SJ,
                    PLANTINVOICE.CODE AS NO_INVOICE,
                    SALESORDER.COUNTERCODE AS jenis_order,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.LINENUMBER AS linenumber,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.PROJECTCODE AS projectcode,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.lotcode AS lotcode,
                    SALESDOCUMENTLINE.PRICE AS price,
                    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE AS unit,
                    (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY) AS foc_kg,
                    (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY) AS foc_yard,
                    CASE
                        WHEN SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE = 'kg' THEN (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY)
                        ELSE
    	(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY)
                    END AS unit_foc,
                    e.QUALITYREASONCODE AS QUALITYREASON,
                    e.CODE AS elementcode
                FROM
                    PLANTINVOICE PLANTINVOICE
                LEFT JOIN SALESORDER SALESORDER ON
                    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
                LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
                    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
                LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
                    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
                LEFT JOIN (
                        SELECT
                            *
                        FROM
                            ALLOCATION a
                        WHERE
                            a.DETAILTYPE = '1'
                            AND a.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND a.DESTINATIONTYPE = '7'
                    ) a ON
                    SALESDOCUMENTLINE.SUBCODE01 = a.DECOSUBCODE01
                    AND SALESDOCUMENTLINE.SUBCODE02 = a.DECOSUBCODE02
                    AND SALESDOCUMENTLINE.SUBCODE03 = a.DECOSUBCODE03
                    AND SALESDOCUMENTLINE.SUBCODE04 = a.DECOSUBCODE04
                    AND SALESDOCUMENTLINE.SUBCODE05 = a.DECOSUBCODE05
                    AND SALESDOCUMENTLINE.SUBCODE06 = a.DECOSUBCODE06
                    AND SALESDOCUMENTLINE.SUBCODE07 = a.DECOSUBCODE07
                    AND SALESDOCUMENTLINE.PREVIOUSCODE = a.ORDERCODE
                    AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = a.ORDERLINE
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = a.CODE
                LEFT JOIN elements e ON
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.ITEMELEMENTCODE = e.CODE
                WHERE
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.STOCKTYPECODE = 'AFW'
                    AND e.QUALITYREASONCODE = 'FOC'
                    AND SALESORDER.COUNTERCODE <> 'REPLCEXP'
                    AND SALESORDER.COUNTERCODE <> 'REPLACE'
                    AND SALESORDER.COUNTERCODE <> 'DOMESTIC'
                    AND SALESORDER.COUNTERCODE <> 'RETRNFAB'
                    --                        AND  PLANTINVOICE.CODE = 'EX23080014'
                    --                        		AND PLANTINVOICE.CODE = 'EX2200196'
                    --                        		 AND PLANTINVOICE.CODE ='EX2200139'
                    --RP2200003
                    -- SF2200006
                    --AND a.code = '000000086055'
                    --000000086055   ,000000065131(nonfoc)
                GROUP BY
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.code,
                    SALESDOCUMENT.PROVISIONALCODE,
                    PLANTINVOICE.CODE,
                    SALESORDER.COUNTERCODE,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.LINENUMBER,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.PROJECTCODE,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.lotcode,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY,
                    ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY,
                    SALESDOCUMENTLINE.PRICE,
                    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
                    e.QUALITYREASONCODE,
                    e.CODE
            )
            --        WHERE NO_INVOICE = 'EX23080014'
        GROUP BY
            code,
            NO_INVOICE,
            NO_SJ,
            jenis_order,
            linenumber,
            projectcode,
            lotcode,
            price,
            unit,
            --    foc_kg,
            --    foc_yard,
            unit_foc,
            qualityreason,
            elementcode
    )
GROUP BY
    NO_INVOICE,
    NO_SJ;


-- DB2ADMIN.ITXVIEW_FOC_INVOICE3 source

CREATE VIEW ITXVIEW_FOC_INVOICE3 AS
        SELECT
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.code AS code,
            SALESDOCUMENT.PROVISIONALCODE AS NO_SJ,
            PLANTINVOICE.CODE AS NO_INVOICE,
            SALESORDER.COUNTERCODE AS jenis_order,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.LINENUMBER AS linenumber,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.PROJECTCODE AS projectcode,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.lotcode AS lotcode,
            SALESDOCUMENTLINE.PRICE AS price,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE AS unit,
            (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY) AS foc_kg,
            (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY) AS foc_yard,
            CASE
                WHEN SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE = 'kg' THEN (ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY)
        ELSE
    	(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY)
    END AS unit_foc,
            e.QUALITYREASONCODE AS QUALITYREASON,
            e.CODE AS elementcode
FROM
            PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
                *
        FROM
                ALLOCATION a
        WHERE
                a.DETAILTYPE = '1'
            AND a.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND a.DESTINATIONTYPE = '7'
    ) a ON
            SALESDOCUMENTLINE.SUBCODE01 = a.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = a.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = a.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = a.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = a.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = a.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = a.DECOSUBCODE07
    AND SALESDOCUMENTLINE.PREVIOUSCODE = a.ORDERCODE
    AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = a.ORDERLINE
LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = a.CODE
LEFT JOIN elements e ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.ITEMELEMENTCODE = e.CODE
WHERE
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.STOCKTYPECODE = 'AFW'
    AND e.QUALITYREASONCODE = 'FOC'
    AND SALESORDER.COUNTERCODE <> 'REPLCEXP'
    AND SALESORDER.COUNTERCODE <> 'REPLACE'
    AND SALESORDER.COUNTERCODE <> 'DOMESTIC'
    AND SALESORDER.COUNTERCODE <> 'RETRNFAB'
    --                                    AND  PLANTINVOICE.CODE = 'EX23070050'
    --                        		AND PLANTINVOICE.CODE = 'EX2200196'
    --                        		 AND PLANTINVOICE.CODE ='EX2200139'
    --RP2200003
    -- SF2200006
    --AND a.code = '000000086055'
    --000000086055   ,000000065131(nonfoc)
GROUP BY
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.code,
            SALESDOCUMENT.PROVISIONALCODE,
            PLANTINVOICE.CODE,
            SALESORDER.COUNTERCODE,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.LINENUMBER,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.PROJECTCODE,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.lotcode,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY,
            SALESDOCUMENTLINE.PRICE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            e.QUALITYREASONCODE,
            e.CODE
    --        )
    --                WHERE NO_INVOICE = 'EX23070050'
    --    GROUP BY
    --        code,
    --        NO_INVOICE,
    --        NO_SJ,
    --        jenis_order,
    --        linenumber,
    --        projectcode,
    --        lotcode,
    --        price,
    --        unit,
    --        --    foc_kg,
    --        --    foc_yard,
    --        unit_foc,
    --        qualityreason,
    --        elementcode)
    --GROUP BY
    --    NO_INVOICE,
    --     lotcode,
    --    NO_SJ;


-- DB2ADMIN.ITXVIEW_GRAMASI_EXIM source

CREATE VIEW ITXVIEW_GRAMASI_EXIM AS 
SELECT
    p.subcode01,
    p.subcode02,
    p.subcode03,
    p.subcode04,
    p.subcode05,
    p.subcode06,
    p.subcode07,
    p.subcode08,
    ITXVIEW_GRAMASI_GSM_EXIM.VALUEDECIMAL AS gsm,
    ITXVIEW_GRAMASI_WIDTH_EXIM.VALUEDECIMAL AS width
FROM
    PRODUCT P
LEFT JOIN ITXVIEW_GRAMASI_WIDTH_EXIM ITXVIEW_GRAMASI_WIDTH_EXIM ON
    P.ABSUNIQUEID = ITXVIEW_GRAMASI_WIDTH_EXIM.UNIQUEID
LEFT JOIN ITXVIEW_GRAMASI_GSM_EXIM ITXVIEW_GRAMASI_GSM_EXIM ON
    P.ABSUNIQUEID = ITXVIEW_GRAMASI_GSM_EXIM.UNIQUEID;


-- DB2ADMIN.ITXVIEW_GRAMASI_EXIM2 source

CREATE VIEW ITXVIEW_GRAMASI_EXIM2 AS 
SELECT
    p.subcode01,
    p.subcode02,
    p.subcode03,
    p.subcode04,
    p.subcode05,
    p.subcode06,
    p.subcode07,
    p.subcode08,
    a.VALUEDECIMAL AS gsm,
    a.VALUEDECIMAL AS width
FROM
    PRODUCT P
LEFT JOIN ADSTORAGE a ON
    P.ABSUNIQUEID = a.UNIQUEID
    AND a.FIELDNAME = 'GSM'
LEFT JOIN ADSTORAGE a2 ON
    P.ABSUNIQUEID = a2.UNIQUEID
    AND a2.FIELDNAME = 'Width';


-- DB2ADMIN.ITXVIEW_GRAMASI_GSM_EXIM source

CREATE VIEW ITXVIEW_GRAMASI_GSM_EXIM AS 
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'GSM';


-- DB2ADMIN.ITXVIEW_GRAMASI_WIDTH_EXIM source

CREATE VIEW ITXVIEW_GRAMASI_WIDTH_EXIM AS 
SELECT
    *
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'Width';


-- DB2ADMIN.ITXVIEW_GRANDTOTAL_COMMRECIAL_INV source

CREATE VIEW ITXVIEW_GRANDTOTAL_COMMRECIAL_INV AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    PRICEUNITOFMEASURECODE,
    sum(QTY_KG) AS total_kg,
    sum(QTY_YD) AS total_yard,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'm' THEN sum(QTY_Meter)
        WHEN PRICEUNITOFMEASURECODE IN (
            'Lot', 'un'
        ) THEN sum(QTY_PCS)
        ELSE 0
    END AS total_unitORMeter,
    ROUND(SUM(jml_harga_YD), 2)AS TOTAL_jml_harga_YD,
    round(SUM(jml_harga_kg), 2) AS TOTAL_jml_harga_kg,
    round(SUM(jml_harga_m), 2) AS TOTAL_jml_harga_m,
    round(SUM(jml_harga_un), 2) AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            SALESDOCUMENTPROVISIONALCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            DLVSALORDERLINESALESORDERCODE,
            EXTERNALITEM,
            no_po,
            EXTERNALREFERENCE,
            PRICEUNITOFMEASURECODE,
            WARNA,
            SUM(USERPRIMARYQUANTITY) AS QTY_KG,
            SUM(USERSECONDARYQUANTITY) AS QTY_YD,
            SUM(BASESECONDARYQUANTITY) AS QTY_Meter,
            SUM(QTY_PCS) AS QTY_PCS,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un,
            PRICE,
            KAIN_AKJ
        FROM
            (
                SELECT
                    DISTINCT 
    	SALESDOCUMENTPROVISIONALCODE,
                    EXTERNALITEM,
                    PRICEUNITOFMEASURECODE,
                    DLVSALORDERLINESALESORDERCODE,
                    no_po,
                    CURR,
                    SALDOCPROVISIONALCOUNTERCODE,
                    SUM(USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY,
                    SUM(USERSECONDARYQUANTITY) AS USERSECONDARYQUANTITY,
                    SUM(BASESECONDARYQUANTITY) AS BASESECONDARYQUANTITY,
                    SUM(QTY_PCS) AS QTY_PCS,
                    LOTCODE,
                    EXTERNALREFERENCE,
                    upper(WARNA) AS WARNA,
                    PRICE,
                    KAIN_AKJ
                FROM
                    (
                        SELECT
                            DISTINCT
        s.SALESDOCUMENTPROVISIONALCODE,
                            s.DLVSALORDERLINESALESORDERCODE,
                            CASE
                                WHEN s.EXTERNALITEM IS NULL THEN trim(s.SUBCODE02) || trim(s.SUBCODE03)
                                ELSE s.EXTERNALITEM
                            END EXTERNALITEM,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURR,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.CODE IN (
                                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.CODE IN (
                                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.BASESECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                                AND iasp.BASESECONDARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN round(iasp.BASESECONDARYQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                WHEN ALLOCATION.CODE IN (
                                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                                ) THEN 0
                                ELSE 0
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.CODE IN (
                                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            CASE
                                WHEN ALLOCATION.CODE IN (
                                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                                ) THEN 0
                                ELSE s.PRICE
                            END AS PRICE,
                            s.PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            ALLOCATION.ORDERLINE AS ORDERLINE,
                            --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                            a.EXTERNALITEMCODE AS NO_ITEM,
                            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                            CASE
                                WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
                                ELSE s2.EXTERNALREFERENCE
                            END AS no_po,
                            UPPER(i.WARNA)AS WARNA,
                            CASE
                                WHEN a2.VALUESTRING = 1 THEN 'AKJ'
                                ELSE 'NON-AKJ'
                            END KAIN_AKJ
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN PRODUCT PRODUCT ON
                            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                            AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
                            AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
                        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN ITXVIEWCOLOR i ON
                            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                        LEFT JOIN SALESDOCUMENTLINE s2 ON
                            s2.ITEMTYPEAFICODE = ALLOCATION.ITEMTYPECODE
                            AND s2.SALESDOCUMENTPROVISIONALCODE = ALLOCATION.ORDERCODE
                            AND s2.ORDERLINE = ALLOCATION.ORDERLINE
                            AND s2.SUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND s2.SUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND s2.SUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND s2.SUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND s2.SUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND s2.SUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND s2.SUBCODE07 = ALLOCATION.DECOSUBCODE07
                            AND s2.SUBCODE08 = ALLOCATION.DECOSUBCODE08
                            AND s2.SUBCODE09 = ALLOCATION.DECOSUBCODE09
                            AND s2.SUBCODE10 = ALLOCATION.DECOSUBCODE10
                        LEFT JOIN SALESORDERLINE s3 ON
                            s3.SALESORDERCODE = s.DLVSALORDERLINESALESORDERCODE
                            AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
                            AND s3.SUBCODE02 = s.SUBCODE02
                            AND s3.SUBCODE03 = s.SUBCODE03
                            AND s3.SUBCODE04 = s.SUBCODE04
                            AND s3.SUBCODE05 = s.SUBCODE05
                            AND s3.SUBCODE06 = s.SUBCODE06
                            AND s3.SUBCODE07 = s.SUBCODE07
                        LEFT JOIN ADSTORAGE a2 ON
                            a2.UNIQUEID = s3.ABSUNIQUEID
                            AND a2.FIELDNAME = 'KainAKJ'
                        LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                            CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    DLVSALORDERLINESALESORDERCODE,
                    EXTERNALITEM,
                    SALDOCPROVISIONALCOUNTERCODE,
                    LOTCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    EXTERNALREFERENCE,
                    no_po,
                    CURR,
                    WARNA,
                    KAIN_AKJ
            )
            --                WHERE SALESDOCUMENTPROVISIONALCODE = 'ESP2400212'
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            EXTERNALITEM,
            EXTERNALREFERENCE,
            no_po,
            PRICEUNITOFMEASURECODE,
            WARNA,
            CURR,
            PRICE,
            KAIN_AKJ
    )
GROUP BY
    PRICEUNITOFMEASURECODE,
    SALESDOCUMENTPROVISIONALCODE,
    SALDOCPROVISIONALCOUNTERCODE;


-- DB2ADMIN.ITXVIEW_GRANDTOTAL_PACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_GRANDTOTAL_PACKINGLIST_EXIM AS
SELECT
    ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.NO_SALES,
    COUNT(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_ROLL) AS JML_ROLL,
    CASE
        WHEN eximFoc.TOTAL_JML_KG <> 0 THEN SUM(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_KG) - eximFoc.TOTAL_JML_KG
        ELSE SUM(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_KG)
    END AS JML_KG,
    CASE
        WHEN eximFoc.TOTAL_JML_YARD <> 0 THEN round(SUM(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_YD), 2) - (eximFoc.TOTAL_JML_YARD)
        ELSE round(SUM(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_YD), 2)
    END AS JML_YARD,
    SUM(ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.JML_GW) AS JML_GW
FROM
    ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM
LEFT JOIN ITXVIEW_TOTAL_EXIM_FOC eximFoc ON
    eximFoc.PROVISIONALCODE = ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.NO_SALES
GROUP BY
    ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM.NO_SALES,
    eximFoc.TOTAL_JML_KG,
    eximFoc.TOTAL_JML_YARD;


-- DB2ADMIN.ITXVIEW_GRANDTOTAL_PACKINGLIST_EXIM2 source

CREATE VIEW ITXVIEW_GRANDTOTAL_PACKINGLIST_EXIM2 AS
SELECT
    PROVISIONALCODE,
    PROVISIONALCOUNTERCODE,
    ITEMTYPEAFICODE,
    CASE
        WHEN ITEMTYPEAFICODE = 'KFF' THEN sum(jml_roll)
        ELSE 0
    END AS jml_roll,
    CASE
        WHEN ITEMTYPEAFICODE = 'FKF' THEN sum(jml_roll)
        ELSE 0
    END AS jml_BALES,
    CASE
        WHEN PROVISIONALCODE LIKE '%SRE%' THEN sum(jml_kg)
        ELSE 
    	sum(jml_kg) - sum(FOC_kg)
    END AS jml_kg,
    CASE
        WHEN PROVISIONALCODE LIKE '%SRE%' THEN sum(jml_yd)
        ELSE 
    	sum(jml_yd)-sum(FOC_yd)
    END AS jml_yd,
    sum(jml_gw) AS jml_gw,
    sum(FOC_kg) AS FOC_kg,
    sum(FOC_yd) AS FOC_yd
FROM
    (
        SELECT
            PROVISIONALCODE,
            PROVISIONALCOUNTERCODE,
            count(CODE) AS jml_roll,
            USERPRIMARYQUANTITY AS jml_kg,
            USERSECONDARYQUANTITY AS jml_yd,
            USERPRIMARYQUANTITY + 0.6 AS jml_gw,
            ITEMTYPEAFICODE,
            QTY_FOC_kg AS FOC_kg,
            QTY_FOC_yd AS FOC_yd
        FROM
            (
                SELECT
                    ALLOCATION.LOTCODE,
                    ALLOCATION.CODE,
                    ALLOCATION.USERPRIMARYQUANTITY,
                    ALLOCATION.USERSECONDARYQUANTITY,
                    ALLOCATION.ITEMELEMENTCODE,
                    ITXVIEW_PACKINGLIST_EXIM.EXTERNALITEM,
                    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
                    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCOUNTERCODE,
                    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
                    ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE,
                    ITXVIEW_PACKINGLIST_EXIM.ITEMTYPEAFICODE,
                    CASE
                        WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS QTY_FOC_kg,
                    CASE
                        WHEN E.QUALITYREASONCODE = 'FOC' THEN ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2)
                        ELSE 0
                    END AS QTY_FOC_yd,
                    E.QUALITYREASONCODE
                FROM
                    ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM
                LEFT JOIN (
                        SELECT
                            *
                        FROM
                            ALLOCATION ALLOCATION
                        WHERE
                            ALLOCATION.DETAILTYPE = '0'
                    )ALLOCATION ON
                    ITXVIEW_PACKINGLIST_EXIM.CODE = ALLOCATION.CODE
                LEFT JOIN ELEMENTS E ON
                    E.CODE = ALLOCATION.ITEMELEMENTCODE
                WHERE
                    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    --                        		        AND  ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE = 'SRE2400041'
            )
        GROUP BY
            PROVISIONALCODE,
            PROVISIONALCOUNTERCODE,
            LOTCODE,
            CODE,
            USERPRIMARYQUANTITY,
            USERSECONDARYQUANTITY,
            ITEMELEMENTCODE,
            EXTERNALITEM,
            PROJECTCODE,
            ITEMTYPEAFICODE,
            QTY_FOC_kg,
            QTY_FOC_yd,
            QUALITYREASONCODE
    )
GROUP BY
    PROVISIONALCODE,
    PROVISIONALCOUNTERCODE,
    ITEMTYPEAFICODE;


-- DB2ADMIN.ITXVIEW_GROUPPACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_GROUPPACKINGLIST_EXIM AS
SELECT
    ITXVIEWALLOCATION0.LOTCODE,
    ITXVIEWPACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEWPACKINGLIST_EXIM.PROJECTCODE,
    ITXVIEWPACKINGLIST_EXIM.ORDERLINE,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALITEM,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEWPACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE01,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE02,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE03,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE04,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE05,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE06,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE07,
    ITXVIEWPACKINGLIST_EXIM.ITEMDESCRIPTION,
    USERGENERICGROUP.LONGDESCRIPTION
FROM
    ITXVIEWPACKINGLIST_EXIM ITXVIEWPACKINGLIST_EXIM
LEFT JOIN ITXVIEWALLOCATION0 ITXVIEWALLOCATION0 ON
    ITXVIEWPACKINGLIST_EXIM.CODE = ITXVIEWALLOCATION0.CODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    ITXVIEWPACKINGLIST_EXIM.SUBCODE05 = USERGENERICGROUP.CODE
GROUP BY
    ITXVIEWALLOCATION0.LOTCODE,
    ITXVIEWPACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEWPACKINGLIST_EXIM.PROJECTCODE,
    ITXVIEWPACKINGLIST_EXIM.ORDERLINE,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALITEM,
    ITXVIEWPACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEWPACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE01,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE02,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE03,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE04,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE05,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE06,
    ITXVIEWPACKINGLIST_EXIM.SUBCODE07,
    ITXVIEWPACKINGLIST_EXIM.ITEMDESCRIPTION,
    USERGENERICGROUP.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_GROUP_COMMERCIALINV_EXIM source

CREATE VIEW ITXVIEW_GROUP_COMMERCIALINV_EXIM AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESORDER.PROJECTCODE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    JK.EXTERNALITEM,
    JK.LONGDESCRIPTION,
    JK.EXTERNALREFERENCE AS HS_CODE,
    CASE
        WHEN trim(JK.LONGDESCRIPTION) <> '' THEN JK.LONGDESCRIPTION
        ELSE JK.SUBCODE02 || JK.SUBCODE03
    END AS kode_jeniskain
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESORDER.CODE = SALESDOCUMENTLINE.PROJECTCODE
    AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ITXVIEW_SUB_INV_ITEMJENISKAIN JK ON
    SALESDOCUMENT.PROVISIONALCODE = JK.PROVISIONALCODE
    AND SALESDOCUMENTLINE.SUBCODE02 = JK.SUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = JK.SUBCODE03
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
WHERE
    ALLOCATION.ORDERCODE IS NOT NULL
GROUP BY
    SALESDOCUMENT.PROVISIONALCODE,
    SALESORDER.PROJECTCODE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    JK.EXTERNALITEM,
    JK.SUBCODE02,
    JK.SUBCODE03,
    JK.LONGDESCRIPTION,
    JK.EXTERNALREFERENCE;


-- DB2ADMIN.ITXVIEW_GSM source

CREATE VIEW ITXVIEW_GSM AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'GSM';


-- DB2ADMIN.ITXVIEW_GSMKOKNT source

CREATE VIEW ITXVIEW_GSMKOKNT AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'GSM';


-- DB2ADMIN.ITXVIEW_HEADERINVOICE source

CREATE VIEW ITXVIEW_HEADERINVOICE AS 
SELECT
    p.CODE AS NO_INVOICE,
    p.COMPANYCODE,
    p.DIVISIONCODE,
    s3.ORDERLINE,
    s2.DLVSALESORDERLINEORDERLINE,
    u.LONGDESCRIPTION AS UNIT,
    s.CURRENCYCODE,
    p.INVOICEDATE AS TGL_INVOICE,
    trim(SALESDOCUMENT2.GOODSISSUEDATE) AS issue_date,
    CASE
        WHEN p.INVOICEDATE <= DATE('2022-08-15') THEN
        --p.INVOICEDATE
	        CASE
            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NULL THEN p.INVOICEDATE
            ELSE
	        trim(SALESDOCUMENT2.GOODSISSUEDATE)
        END
        ELSE
    	trim(SALESDOCUMENT2.GOODSISSUEDATE)
    END AS TANGGAL_INV,
    s.PAYMENTCUSTOMERCODE AS KODE_CUSTOMER,
    s.TEMPLATECODE,
    trim(a.ADDRESSEE) AS LANGGANAN,
    trim(s.ORDERPARTNERBRANDCODE) AS BUYER,
    a.ADDRESSLINE1,
    a.ADDRESSLINE2,
    a.ADDRESSLINE3,
    a.ADDRESSLINE4,
    a.ADDRESSLINE5,
    a.POSTALCODE,
    a.TOWN,
    a.DISTRICT,
    trim(b.TAXREGISTRATIONNUMBER) AS NPWP,
    s2.DLVSALORDERLINESALESORDERCODE AS BON_ORDER,
    CASE
        WHEN s2.EXTERNALREFERENCE IS NULL
        AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s4.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
        WHEN s2.EXTERNALREFERENCE IS NOT NULL
        AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s2.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
        ELSE s2.EXTERNALREFERENCE
    END AS NO_PO,
    p2.NOOFDAYS AS jatuh_tempo,
    p3.LONGDESCRIPTION
FROM
    PLANTINVOICE p
LEFT JOIN SALESDOCUMENT s4 ON
    s4.PROVISIONALCODE = p.CODE
    AND s4.COMPANYCODE = p.COMPANYCODE
    AND s4.PROVISIONALCOUNTERCODE = p.SALINVOICEPRVCOUNTERCODE
    AND s4.DIVISIONCODE = p.DIVISIONCODE
LEFT JOIN SALESDOCUMENTLINE s2 ON
    s2.SALESDOCUMENTPROVISIONALCODE = p.CODE
    AND s2.SALESDOCUMENTCOMPANYCODE = s4.COMPANYCODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
    SALESDOCUMENT2.PROVISIONALCODE = s2.PREVIOUSCODE
    AND SALESDOCUMENT2.COMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
    AND SALESDOCUMENT2.DOCUMENTTYPETYPE = s2.PREVIOUSDOCUMENTTYPETYPE
LEFT JOIN SALESORDER s ON
    s.CODE = p.CONTRACTNOCODE
    AND s.COMPANYCODE = p.COMPANYCODE
    AND s.COUNTERCODE = p.CONTRACTNOCOUNTERCODE
LEFT JOIN SALESORDERLINE s3 ON
    s3.SALESORDERCODE = s.CODE
    AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
    AND s3.SALESORDERCOMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
LEFT JOIN ADDRESS a ON
    a.UNIQUEID = s.PAYMENTCUSTOMERUNIQUEID
    AND a.CODE = s.PAYMENTCUSTOMERCODE
LEFT JOIN ORDERPARTNER o ON
    o.DELIVERYPOINTUNIQUEID = a.UNIQUEID
LEFT JOIN BUSINESSPARTNER b ON
    b.NUMBERID = o.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN ORDERPARTNERBRAND o2 ON
    o2.ORDPRNCUSTOMERSUPPLIERCODE = s.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHODIE p2 ON
    p2.CODE = p.TERMSOFPAYMENTCODE
LEFT JOIN PAYMENTMETHOD p3 ON
    p3.CODE = p.TERMSOFPAYMENTCODE
LEFT JOIN UNITOFMEASURE u ON
    u.CODE = s3.PRICEUNITOFMEASURECODE
    --        WHERE p.CODE = 'SE23090006'
    --    WHERE p.code = 'RE2200068'
GROUP BY
    s3.ORDERLINE,
    s2.DLVSALESORDERLINEORDERLINE,
    s2.PREVIOUSCODE,
    u.LONGDESCRIPTION,
    s.CURRENCYCODE,
    p.CODE,
    p.COMPANYCODE,
    p.DIVISIONCODE,
    p.INVOICEDATE,
    SALESDOCUMENT2.GOODSISSUEDATE,
    s.PAYMENTCUSTOMERCODE,
    s.TEMPLATECODE,
    a.ADDRESSEE,
    a.ADDRESSLINE1,
    a.ADDRESSLINE2,
    a.ADDRESSLINE3,
    a.ADDRESSLINE4,
    a.ADDRESSLINE5,
    a.POSTALCODE,
    a.TOWN,
    a.DISTRICT,
    s.ORDERPARTNERBRANDCODE,
    b.TAXREGISTRATIONNUMBER,
    --    s.PROJECTCODE,
    s2.DLVSALORDERLINESALESORDERCODE,
    s4.EXTERNALREFERENCE,
    s2.EXTERNALREFERENCE,
    p2.CODE,
    p2.NOOFDAYS,
    p3.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_HEADERPACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_HEADERPACKINGLIST_EXIM AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE AS NO_SALES,
    SALESDOCUMENTLINE.EXTERNALREFERENCE AS NO_PO,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE ,
    SALESDOCUMENT.NUMBERPLATE AS NM_VESSEL,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFDELIVERYCODE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    CASE
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC1' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC2' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC9' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LCB' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LCS' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'NLC' THEN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING
        ELSE SALESDOCUMENT.PAYMENTMETHODCODE
    END AS TermOrLC,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    ITXVIEW_NO_ORDER_EXIM.NO_ORDER,
    BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1 AS NM_MESSRS,
    BUSINESSPARTNER.ADDRESSLINE1 AS PARTNER_ADDRES1,
    BUSINESSPARTNER.ADDRESSLINE2 AS PARTNER_ADDRES2,
    BUSINESSPARTNER.ADDRESSLINE3 AS PARTNER_ADDRES3,
    BUSINESSPARTNER.ADDRESSLINE4 AS PARTNER_ADDRES4,
    BUSINESSPARTNER.TOWN AS PARTNER_TOWN,
    BUSINESSPARTNER.DISTRICT AS PARTNER_DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    ADDRESS.ADDRESSEE AS NM_CONSIGNEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM,
    ITXVIEW_EXIM_ISSUINGNGBANK.VALUESTRING AS NM_ISSUINGBANK,
    ITXVIEW_GRAMASI_EXIM.GSM,
    ITXVIEW_GRAMASI_EXIM.WIDTH,
    CASE
        WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE = 'SE' THEN 'TG.PRIOK - JAKARTA, INDONESIA'
        ELSE 'JAKARTA, INDONESIA'
    END AS SHIPPING_FROM
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESORDER.EXTERNALREFERENCE = SALESDOCUMENTLINE.EXTERNALREFERENCE
    AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER ON
    SALESDOCUMENT.ABSUNIQUEID = ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.UNIQUEID
LEFT JOIN ITXVIEW_EXIM_ISSUINGNGBANK ITXVIEW_EXIM_ISSUINGNGBANK ON
    SALESDOCUMENT.ABSUNIQUEID = ITXVIEW_EXIM_ISSUINGNGBANK.UNIQUEID
LEFT JOIN ITXVIEW_GRAMASI_EXIM ITXVIEW_GRAMASI_EXIM ON
    SALESDOCUMENTLINE.SUBCODE01 = ITXVIEW_GRAMASI_EXIM.SUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ITXVIEW_GRAMASI_EXIM.SUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ITXVIEW_GRAMASI_EXIM.SUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ITXVIEW_GRAMASI_EXIM.SUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ITXVIEW_GRAMASI_EXIM.SUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ITXVIEW_GRAMASI_EXIM.SUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ITXVIEW_GRAMASI_EXIM.SUBCODE07
    AND SALESDOCUMENTLINE.SUBCODE08 = ITXVIEW_GRAMASI_EXIM.SUBCODE08
LEFT JOIN ITXVIEW_NO_ORDER_EXIM ITXVIEW_NO_ORDER_EXIM ON
    SALESDOCUMENT.PROVISIONALCODE = ITXVIEW_NO_ORDER_EXIM.PROVISIONALCODE
WHERE
    SALESDOCUMENTLINE.ITEMTYPEAFICODE IS NOT NULL
GROUP BY
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE ,
    SALESDOCUMENT.NUMBERPLATE,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFDELIVERYCODE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    ITXVIEW_ADITIONALDATA_EXIM_LCNUMBER.VALUESTRING,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    ITXVIEW_NO_ORDER_EXIM.NO_ORDER,
    BUSINESSPARTNER.COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1,
    BUSINESSPARTNER.ADDRESSLINE2,
    BUSINESSPARTNER.ADDRESSLINE3,
    BUSINESSPARTNER.ADDRESSLINE4,
    BUSINESSPARTNER.TOWN,
    BUSINESSPARTNER.DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION,
    ITXVIEW_EXIM_ISSUINGNGBANK.VALUESTRING,
    ITXVIEW_GRAMASI_EXIM.GSM,
    ITXVIEW_GRAMASI_EXIM.WIDTH;


-- DB2ADMIN.ITXVIEW_HEADERPACKINGLIST_EXIM2 source

CREATE VIEW ITXVIEW_HEADERPACKINGLIST_EXIM2 AS
SELECT
    DISTINCT 
    SALESDOCUMENT.PROVISIONALCODE AS NO_SALES,
    SALESDOCUMENT.PROVISIONALCOUNTERCODE,
    SALESDOCUMENT.COMPANYCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE, 
    CASE
        WHEN SALESDOCUMENT.NUMBERPLATE IS NULL THEN a3.VALUESTRING
        ELSE a3.VALUESTRING
    END AS NM_VESSEL,
    CASE
        WHEN SALESDOCUMENT.TRANSPORTSTARTDATE IS NULL THEN a4.VALUEDATE
    END AS TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFDELIVERYCODE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    CASE
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC1' THEN a2.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC2' THEN a2.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LC9' THEN a2.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LCB' THEN a2.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'LCS' THEN a2.VALUESTRING
        WHEN SALESDOCUMENT.PAYMENTMETHODCODE = 'NLC' THEN a2.VALUESTRING
        ELSE
		SALESDOCUMENT.PAYMENTMETHODCODE
    END AS TermOrLC,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    CASE
        WHEN PAYMENTMETHOD2.SHORTDESCRIPTION LIKE '%TT%' THEN 'T/T'
        ELSE SALESDOCUMENT.PAYMENTMETHODCODE
    END AS PAYMENTMETHOD_DESC,
    BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1 AS NM_MESSRS,
    UPPER(BUSINESSPARTNER.ADDRESSLINE1) AS PARTNER_ADDRES1,
    UPPER(BUSINESSPARTNER.ADDRESSLINE2) AS PARTNER_ADDRES2,
    UPPER(BUSINESSPARTNER.ADDRESSLINE3) AS PARTNER_ADDRES3,
    UPPER(BUSINESSPARTNER.ADDRESSLINE4) AS PARTNER_ADDRES4,
    UPPER(BUSINESSPARTNER.TOWN) AS PARTNER_TOWN,
    UPPER(BUSINESSPARTNER.DISTRICT) AS PARTNER_DISTRICT,
    UPPER(COUNTRY2.LONGDESCRIPTION) AS PARTNER_COUNTRY,
    BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    UPPER(ADDRESS.ADDRESSEE) AS NM_CONSIGNEE,
    UPPER(ADDRESS.ADDRESSLINE1) AS ADDRESSLINE1,
    UPPER(ADDRESS.ADDRESSLINE2)AS ADDRESSLINE2,
    UPPER(ADDRESS.ADDRESSLINE3)AS ADDRESSLINE3,
    UPPER(ADDRESS.ADDRESSLINE4) AS ADDRESSLINE4,
    UPPER(ADDRESS.TOWN) AS TOWN,
    UPPER(ADDRESS.DISTRICT) AS DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM,
    u.LONGDESCRIPTION AS NM_ISSUINGBANK,
    ITXVIEW_GRAMASI_EXIM.GSM,
    ITXVIEW_GRAMASI_EXIM.WIDTH,
    CASE
        WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE = 'SE' THEN 'TG.PRIOK - JAKARTA, INDONESIA'
        ELSE 'JAKARTA, INDONESIA'
    END AS SHIPPING_FROM
    --        ITXVIEW_PACKINGLIST_EXIM.JENIS_KAIN
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND SALESDOCUMENT.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
    AND SALESDOCUMENT.PROVISIONALCOUNTERCODE = SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENT.SALESORDERCODE = SALESORDER.CODE
    AND SALESDOCUMENT.SALESORDERCOUNTERCODE = SALESORDER.COUNTERCODE
    AND SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN COUNTRY COUNTRY2 ON
    BUSINESSPARTNER.COUNTRYCODE = COUNTRY2.CODE
LEFT JOIN ADSTORAGE a2 ON
    SALESDOCUMENT.ABSUNIQUEID = a2.UNIQUEID
    AND a2.FIELDNAME = 'LCNumber'
LEFT JOIN ADSTORAGE a ON
    SALESDOCUMENT.ABSUNIQUEID = a.UNIQUEID
    AND a.NAMENAME = 'IssuingBank'
LEFT JOIN ADSTORAGE a3 ON
    SALESDOCUMENT.ABSUNIQUEID = a3.UNIQUEID
    AND a3.FIELDNAME = 'vesselname'
LEFT JOIN ADSTORAGE a4 ON
    SALESDOCUMENT.ABSUNIQUEID = a4.UNIQUEID
    AND a4.FIELDNAME = 'TransportDate'
LEFT JOIN ITXVIEW_GRAMASI_EXIM ITXVIEW_GRAMASI_EXIM ON
    SALESDOCUMENTLINE.SUBCODE01 = ITXVIEW_GRAMASI_EXIM.SUBCODE01
    AND 
    SALESDOCUMENTLINE.SUBCODE02 = ITXVIEW_GRAMASI_EXIM.SUBCODE02
    AND 
    SALESDOCUMENTLINE.SUBCODE03 = ITXVIEW_GRAMASI_EXIM.SUBCODE03
    AND 
    SALESDOCUMENTLINE.SUBCODE04 = ITXVIEW_GRAMASI_EXIM.SUBCODE04
    AND 
    SALESDOCUMENTLINE.SUBCODE05 = ITXVIEW_GRAMASI_EXIM.SUBCODE05
    AND 
    SALESDOCUMENTLINE.SUBCODE06 = ITXVIEW_GRAMASI_EXIM.SUBCODE06
    AND 
    SALESDOCUMENTLINE.SUBCODE07 = ITXVIEW_GRAMASI_EXIM.SUBCODE07
    AND
    SALESDOCUMENTLINE.SUBCODE08 = ITXVIEW_GRAMASI_EXIM.SUBCODE08
LEFT JOIN USERGENERICGROUP u ON
    a.VALUESTRING = u.CODE
    AND SALESDOCUMENT.COMPANYCODE = u.USERGENGROUPTYPECOMPANYCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD2 ON 
    SALESDOCUMENT.PAYMENTMETHODCODE = PAYMENTMETHOD2.CODE
WHERE
    SALESDOCUMENTLINE.ITEMTYPEAFICODE IS NOT NULL
    --                                    	AND SALESDOCUMENT.PROVISIONALCODE LIKE '%ESP23%'
GROUP BY
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALCOUNTERCODE,
    SALESDOCUMENT.COMPANYCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE ,
    SALESDOCUMENT.NUMBERPLATE,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFDELIVERYCODE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    a2.VALUESTRING,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    BUSINESSPARTNER.COUNTRYCODE,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1,
    BUSINESSPARTNER.ADDRESSLINE2,
    BUSINESSPARTNER.ADDRESSLINE3,
    BUSINESSPARTNER.ADDRESSLINE4,
    BUSINESSPARTNER.TOWN,
    BUSINESSPARTNER.DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION,
    COUNTRY2.LONGDESCRIPTION,
    a.VALUESTRING,
    a3.VALUESTRING,
    a4.VALUEDATE,
    u.LONGDESCRIPTION,
    PAYMENTMETHOD2.SHORTDESCRIPTION,
    ITXVIEW_GRAMASI_EXIM.GSM,
    ITXVIEW_GRAMASI_EXIM.WIDTH;


-- DB2ADMIN.ITXVIEW_HEADER_CI_EXIM source

CREATE VIEW ITXVIEW_HEADER_CI_EXIM AS
SELECT
    NO_SALES,
    CONCAT(CONCAT(PO_NOORDER, ' '), ITEM_NO) AS PO_ITEM
FROM
    (
        SELECT
            SALESDOCUMENTPROVISIONALCODE AS NO_SALES,
            EXTERNALREFERENCE AS PO_NOORDER,
            CASE
                WHEN EXTERNALITEM <> '' THEN EXTERNALITEM
                ELSE
    	trim(SUBCODE02) || ' ' || SUBCODE03
            END AS ITEM_NO
        FROM
            SALESDOCUMENTLINE
            --        WHERE SALESDOCUMENTPROVISIONALCODE = 'ESP2200489' -- KE CONCAT
            --        WHERE SALESDOCUMENTPROVISIONALCODE = 'PED2200330' -- TIDAK
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            PROJECTCODE,
            EXTERNALREFERENCE,
            EXTERNALITEM,
            SUBCODE02,
            SUBCODE03
    );


-- DB2ADMIN.ITXVIEW_HEADER_PACKINGLIST_EXIM_SINTEX source

CREATE VIEW ITXVIEW_HEADER_PACKINGLIST_EXIM_SINTEX AS
SELECT
    PROVISIONALCODE,
    COMPANYCODE,
    PROVISIONALCOUNTERCODE,
    PROVISIONALDOCUMENTDATE,
    VESSEL_NM,
    TRANSPORTSTARTDATE,
    TERMSOFSHIPPINGCODE,
    DELIVERYPOINTUNIQUEID,
    PAYMENTCUSTOMERCODE,
    PAYMENTMETHODCODE,
    ABSUNIQUEID,
    PROJECTCODE,
    EXTERNALREFERENCE,
    SP#,
    SEQ1,
    SEQ2,
    EXTERNALITEM,
    ket_ref#,
    hscode,
    PRICEUNITOFMEASURECODE,
    LOGICALWAREHOUSE_CODE,
    LONGDESCRIPTION,
    CODE,
    LOTCODE,
    DESTINATIONTYPE,
    ORDERCODE,
    ORDERLINE,
    COLOR_DESC,
    SALDOCPROVISIONALCOUNTERCODE,
    PRICE,
    ITEMDESCRIPTION,
    ITEMTYPEAFICODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    SUBCODE06,
    SUBCODE07,
    SUBCODE08,
    sum(jml_roll) AS jml_roll,
    sum(jml_kg) AS jml_kg,
    sum(jml_yd) AS jml_yd,
    sum(jml_gw) AS jml_gw,
    sum(jml_meter) AS jml_meter
FROM
    (
        SELECT
            DISTINCT
    SALESDOCUMENT.PROVISIONALCODE,
            SALESDOCUMENT.COMPANYCODE,
            SALESDOCUMENT.PROVISIONALCOUNTERCODE,
            SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
            SALESDOCUMENT.NUMBERPLATE AS VESSEL_NM,
            SALESDOCUMENT.TRANSPORTSTARTDATE,
            SALESDOCUMENT.TERMSOFSHIPPINGCODE,
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
            SALESDOCUMENT.PAYMENTCUSTOMERCODE,
            SALESDOCUMENT.PAYMENTMETHODCODE,
            SALESDOCUMENT.ABSUNIQUEID,
            SALESORDER.CODE AS PROJECTCODE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            LEFT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 12) AS SP#,
            RIGHT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 2) AS SEQ1,
            RIGHT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 2) AS SEQ2,
            CASE
                WHEN SALESDOCUMENTLINE.EXTERNALITEM IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02)|| TRIM(SALESDOCUMENTLINE.SUBCODE03)
                ELSE SALESDOCUMENTLINE.EXTERNALITEM
            END AS EXTERNALITEM,
            CASE
                WHEN SALESDOCUMENTLINE.EXTERNALITEM IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02)|| TRIM(SALESDOCUMENTLINE.SUBCODE03)
            END AS ket_ref#,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            LOGICALWAREHOUSE.CODE AS LOGICALWAREHOUSE_CODE,
            LOGICALWAREHOUSE.LONGDESCRIPTION,
            ALLOCATION.CODE,
            ALLOCATION2.LOTCODE,
            ALLOCATION.DESTINATIONTYPE,
            ALLOCATION.ORDERCODE,
            ALLOCATION.ORDERLINE,
            USERGENERICGROUP.LONGDESCRIPTION AS COLOR_DESC,
            SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
            SALESDOCUMENTLINE.PRICE,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            count(ALLOCATION.CODE) AS jml_roll,
            ALLOCATION2.USERPRIMARYQUANTITY AS jml_kg,
            ALLOCATION2.USERSECONDARYQUANTITY AS jml_yd,
            ALLOCATION2.USERPRIMARYQUANTITY + 0.6 AS jml_gw,
            round(ALLOCATION2.USERSECONDARYQUANTITY * 0.9144 , 2) AS jml_meter,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION2.USERPRIMARYQUANTITY
                ELSE 0
            END AS QTY_FOC_kg,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION2.USERSECONDARYQUANTITY
                ELSE 0
            END AS QTY_FOC_yd,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN E.QUALITYREASONCODE
                ELSE '-'
            END AS QUALITYREASON,
            i.EXTERNALREFERENCE AS hscode
        FROM
            SALESDOCUMENT SALESDOCUMENT
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND SALESDOCUMENT.PROVISIONALCOUNTERCODE = SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE
            AND SALESDOCUMENT.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN SALESORDER SALESORDER ON
            SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE = SALESORDER.CODE
            AND SALESDOCUMENTLINE.DLVSALORDLINESALORDCNTCODE = SALESORDER.COUNTERCODE
        LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
            SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
        LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
            SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.SUBCODE08 = ALLOCATION.DECOSUBCODE08
            AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEWORDERITEMLINKACTIVE i ON
            ALLOCATION.ITEMTYPECODE = i.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '0'
            )ALLOCATION2 ON
            ALLOCATION.CODE = ALLOCATION2.CODE
            AND ALLOCATION.DECOSUBCODE01 = ALLOCATION2.DECOSUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = ALLOCATION2.DECOSUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = ALLOCATION2.DECOSUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = ALLOCATION2.DECOSUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = ALLOCATION2.DECOSUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = ALLOCATION2.DECOSUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = ALLOCATION2.DECOSUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = ALLOCATION2.DECOSUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = ALLOCATION2.DECOSUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = ALLOCATION2.DECOSUBCODE10
        LEFT JOIN ELEMENTS E ON
            E.CODE = ALLOCATION2.ITEMELEMENTCODE
        WHERE
            ALLOCATION.ORDERCODE IS NOT NULL
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            --    AND  ALLOCATION.ORDERCODE = 'ESP2400004'   
        GROUP BY
            SALESDOCUMENT.PROVISIONALCODE,
            SALESDOCUMENT.COMPANYCODE,
            SALESDOCUMENT.PROVISIONALCOUNTERCODE,
            SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
            SALESDOCUMENT.NUMBERPLATE,
            SALESDOCUMENT.TRANSPORTSTARTDATE,
            SALESDOCUMENT.TERMSOFSHIPPINGCODE,
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
            SALESDOCUMENT.PAYMENTCUSTOMERCODE,
            SALESDOCUMENT.PAYMENTMETHODCODE,
            SALESDOCUMENT.ABSUNIQUEID,
            SALESORDER.CODE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.EXTERNALITEM,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            LOGICALWAREHOUSE.CODE,
            LOGICALWAREHOUSE.LONGDESCRIPTION,
            ALLOCATION.CODE,
            ALLOCATION2.LOTCODE,
            ALLOCATION.DESTINATIONTYPE,
            ALLOCATION.ORDERCODE,
            ALLOCATION.ORDERLINE,
            USERGENERICGROUP.LONGDESCRIPTION,
            SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
            SALESDOCUMENTLINE.PRICE,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            i.EXTERNALREFERENCE,
            E.QUALITYREASONCODE,
            ALLOCATION2.USERSECONDARYQUANTITY,
            ALLOCATION2.USERPRIMARYQUANTITY
    )
GROUP BY 
    PROVISIONALCODE,
    COMPANYCODE,
    PROVISIONALCOUNTERCODE,
    PROVISIONALDOCUMENTDATE,
    VESSEL_NM,
    TRANSPORTSTARTDATE,
    TERMSOFSHIPPINGCODE,
    DELIVERYPOINTUNIQUEID,
    PAYMENTCUSTOMERCODE,
    PAYMENTMETHODCODE,
    ABSUNIQUEID,
    PROJECTCODE,
    EXTERNALREFERENCE,
    SP#,
    SEQ1,
    SEQ2,
    hscode,
    EXTERNALITEM,
    ket_ref#,
    PRICEUNITOFMEASURECODE,
    LOGICALWAREHOUSE_CODE,
    LONGDESCRIPTION,
    CODE,
    LOTCODE,
    DESTINATIONTYPE,
    ORDERCODE,
    ORDERLINE,
    COLOR_DESC,
    SALDOCPROVISIONALCOUNTERCODE,
    PRICE,
    ITEMDESCRIPTION,
    ITEMTYPEAFICODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    SUBCODE06,
    SUBCODE07,
    SUBCODE08;


-- DB2ADMIN.ITXVIEW_HEADER_PACKLINGLIST_EXIM source

CREATE VIEW ITXVIEW_HEADER_PACKLINGLIST_EXIM AS
SELECT
    NO_SALES,
    CONCAT(PO_NOORDER, ITEM_NO) AS DESC_OF_GOODS
FROM
    (
        SELECT
            SALESDOCUMENTPROVISIONALCODE AS NO_SALES,
            CONCAT(EXTERNALREFERENCE, DLVSALORDERLINESALESORDERCODE) AS PO_NOORDER,
            CASE
                WHEN EXTERNALITEM <> '' THEN EXTERNALITEM
                ELSE
    	trim(SUBCODE02) || ' ' || SUBCODE03
            END AS ITEM_NO
        FROM
            SALESDOCUMENTLINE
            --    WHERE
            --        SALESDOCUMENTPROVISIONALCODE = 'PED2300054'
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            EXTERNALREFERENCE,
            EXTERNALITEM,
            SUBCODE02,
            SUBCODE03
    );


-- DB2ADMIN.ITXVIEW_HEADER_SUBDETAIL_EXIM source

CREATE VIEW ITXVIEW_HEADER_SUBDETAIL_EXIM AS
SELECT
    ITXVIEWALLOCATION0_SJEXIM.LOTCODE,
    ITXVIEWALLOCATION0_SJEXIM.ORIGINTRNTRANSACTIONNUMBER,
    ITXVIEWALLOCATION0_SJEXIM.CODE,
    ITXVIEWALLOCATION0_SJEXIM.USERPRIMARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.USERSECONDARYQUANTITY,
    ITXVIEWALLOCATION0_SJEXIM.ITEMELEMENTCODE,
    ITXVIEWALLOCATION0_SJEXIM.ORDERCODE,
    ITXVIEW_PACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEW_PACKINGLIST_EXIM.EXTERNALITEM,
    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
    ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE,
    ITXVIEW_PACKINGLIST_EXIM.MESSRS_ID,
    ITXVIEW_PACKINGLIST_EXIM.CONSIGNEE_ID,
    ITXVIEW_PACKINGLIST_EXIM.ORDERLINE,
    ITXVIEW_PACKINGLIST_EXIM.ITEMTYPEAFICODE,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE01,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE02,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE03,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE04,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE05,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE06,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE07,
    ITXVIEW_PACKINGLIST_EXIM.SUBCODE08,
    ITXVIEW_PACKINGLIST_EXIM.ITEMDESCRIPTION
FROM
    ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM
LEFT JOIN ITXVIEWALLOCATION0_SJEXIM ITXVIEWALLOCATION0_SJEXIM ON
    ITXVIEW_PACKINGLIST_EXIM.CODE = ITXVIEWALLOCATION0_SJEXIM.CODE
WHERE
    ITXVIEWALLOCATION0_SJEXIM.ORIGINTRNTRANSACTIONNUMBER IS NULL;


-- DB2ADMIN.ITXVIEW_INS_DESKRIPSI source

CREATE VIEW ITXVIEW_INS_DESKRIPSI AS
SELECT
    A.CODE AS DEMANDNO,
    TRIM(B.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(E.LEGALNAME1) AS LEGALNAME1,
    TRIM(C.BUYER) AS BUYER,
    TRIM(C.NO_ITEM) AS NO_ITEM,
    TRIM(C.SALESORDERCODE) AS SALESORDERCODE,
    TRIM(C.ITEMDESCRIPTION) AS ITEMDESCRIPTION,
    C.STATISTICALGROUPCODE AS SEASON,
    TRIM(A.SUBCODE05) AS NO_WARNA,
    F.WARNA,
    TRIM(A.SUBCODE02) AS SUBCODE02,
    TRIM(A.SUBCODE03) AS SUBCODE03,
    CASE
        WHEN C.PO_HEADER IS NULL THEN C.PO_LINE
        ELSE C.PO_HEADER
    END AS PO_NUMBER,
    CASE
        WHEN C.STYLE_HEADER IS NULL THEN C.STYLE_LINE
        ELSE C.STYLE_HEADER
    END AS STYL,
    D.NAMENAME,
    D.VALUEDECIMAL
FROM
    PRODUCTIONDEMAND A
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) B ON
    A.CODE = B.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDER.EXTERNALREFERENCE AS PO_HEADER,
            SALESORDER.INTERNALREFERENCE AS STYLE_HEADER,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE AS QTY_ORDER_UOM,
            SALESORDERLINE.EXTERNALREFERENCE AS PO_LINE,
            SALESORDERLINE.INTERNALREFERENCE AS STYLE_LINE,
            SUM(SALESORDERLINE.BASEPRIMARYQUANTITY) AS QTY_ORDER,
            SUM(SALESORDERLINE.BASESECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
            SALESORDERLINE.BASESECONDARYUOMCODE AS QTY_PANJANG_ORDER_UOM,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION AS NO_ITEM
        FROM
            SALESORDER SALESORDER
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
        LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
            SALESORDERLINE.SALESORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
            AND SALESORDERLINE.ORDERLINE = SALESORDERDELIVERY.SALESORDERLINEORDERLINE
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
        LEFT JOIN ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERITEMORDERPARTNERLINK.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDERLINE.ITEMTYPEAFICODE = ORDERITEMORDERPARTNERLINK.ITEMTYPEAFICODE
            AND SALESORDERLINE.SUBCODE01 = ORDERITEMORDERPARTNERLINK.SUBCODE01
            AND SALESORDERLINE.SUBCODE02 = ORDERITEMORDERPARTNERLINK.SUBCODE02
            AND SALESORDERLINE.SUBCODE03 = ORDERITEMORDERPARTNERLINK.SUBCODE03
            AND SALESORDERLINE.SUBCODE04 = ORDERITEMORDERPARTNERLINK.SUBCODE04
            AND SALESORDERLINE.SUBCODE05 = ORDERITEMORDERPARTNERLINK.SUBCODE05
            AND SALESORDERLINE.SUBCODE06 = ORDERITEMORDERPARTNERLINK.SUBCODE06
            AND SALESORDERLINE.SUBCODE07 = ORDERITEMORDERPARTNERLINK.SUBCODE07
            AND SALESORDERLINE.SUBCODE08 = ORDERITEMORDERPARTNERLINK.SUBCODE08
            AND SALESORDERLINE.SUBCODE09 = ORDERITEMORDERPARTNERLINK.SUBCODE09
            AND SALESORDERLINE.SUBCODE10 = ORDERITEMORDERPARTNERLINK.SUBCODE10
        GROUP BY
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDER.INTERNALREFERENCE,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE,
            SALESORDERLINE.BASESECONDARYUOMCODE,
            SALESORDERLINE.EXTERNALREFERENCE,
            SALESORDERLINE.INTERNALREFERENCE,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION
    ) C ON
    A.ORIGDLVSALORDLINESALORDERCODE = C.SALESORDERCODE
    AND A.ORIGDLVSALORDERLINEORDERLINE = C.ORDERLINE
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            LISTAGG(
                TRIM(ADSTORAGE.NAMENAME),
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS NAMENAME,
            LISTAGG(
                ADSTORAGE.VALUEDECIMAL,
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10
    ) D ON
    A.SUBCODE01 = D.SUBCODE01
    AND A.SUBCODE02 = D.SUBCODE02
    AND A.SUBCODE03 = D.SUBCODE03
    AND A.SUBCODE04 = D.SUBCODE04
    AND A.SUBCODE05 = D.SUBCODE05
    AND A.SUBCODE06 = D.SUBCODE06
    AND A.SUBCODE07 = D.SUBCODE07
    AND A.SUBCODE08 = D.SUBCODE08
    AND A.SUBCODE09 = D.SUBCODE09
    AND A.SUBCODE10 = D.SUBCODE10
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) E ON
    A.CUSTOMERCODE = E.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            ITXVIEWCOLOR.ITEMTYPECODE,
            ITXVIEWCOLOR.SUBCODE01,
            ITXVIEWCOLOR.SUBCODE02,
            ITXVIEWCOLOR.SUBCODE03,
            ITXVIEWCOLOR.SUBCODE04,
            ITXVIEWCOLOR.SUBCODE05,
            ITXVIEWCOLOR.SUBCODE06,
            ITXVIEWCOLOR.SUBCODE07,
            ITXVIEWCOLOR.SUBCODE08,
            ITXVIEWCOLOR.SUBCODE09,
            ITXVIEWCOLOR.SUBCODE10,
            ITXVIEWCOLOR.WARNA
        FROM
            ITXVIEWCOLOR ITXVIEWCOLOR
    ) F ON
    A.ITEMTYPEAFICODE = F.ITEMTYPECODE
    AND A.SUBCODE01 = F.SUBCODE01
    AND A.SUBCODE02 = F.SUBCODE02
    AND A.SUBCODE03 = F.SUBCODE03
    AND A.SUBCODE04 = F.SUBCODE04
    AND A.SUBCODE05 = F.SUBCODE05
    AND A.SUBCODE06 = F.SUBCODE06
    AND A.SUBCODE07 = F.SUBCODE07
    AND A.SUBCODE08 = F.SUBCODE08
    AND A.SUBCODE09 = F.SUBCODE09
    AND A.SUBCODE10 = F.SUBCODE10;


-- DB2ADMIN.ITXVIEW_INTERNALPRICELIST source

CREATE VIEW ITXVIEW_INTERNALPRICELIST AS
SELECT
    r.RECIPESUBCODE01 AS RECIPE_CODE,
    r.RECIPESUFFIXCODE AS SUFFIX,
    SUM(i.PRICE) AS PRICE
FROM
    RECIPECOMPONENT r
LEFT JOIN INTERNALPRICELISTLINE i ON
    i.SUBCODE01 = r.SUBCODE01
    AND i.SUBCODE02 = r.SUBCODE02
    AND i.SUBCODE03 = r.SUBCODE03
WHERE
    r.RECIPEITEMTYPECODE = 'RFD'
    AND r.RECIPESUFFIXCODE = '001'
GROUP BY
    r.RECIPESUBCODE01,
    r.RECIPESUFFIXCODE;


-- DB2ADMIN.ITXVIEW_INVOICENO_SJ source

CREATE VIEW ITXVIEW_INVOICENO_SJ AS
SELECT
        trim(PLANTINVOICE.CODE) AS Invoice,
     	SALESDOCUMENT2.PROVISIONALCODE AS NO_SJ,
     	SALESDOCUMENT2.PROVISIONALCOUNTERCODE AS countercode,
        trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
        PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
        trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
        LISTAGG(
        DISTINCT(
            TRIM(SALESDOCUMENTLINE.ITEMTYPEAFICODE)
        ),
        ', '
    ) AS ITEMTYPEAFICODE
FROM
        PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
        PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
        PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
        SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
        SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
        SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
    --           WHERE PLANTINVOICE.code ='CA23120001'
GROUP BY
        PLANTINVOICE.CODE,
     	SALESDOCUMENT2.PROVISIONALCODE,
     	SALESDOCUMENT2.PROVISIONALCOUNTERCODE,
        SALESORDER.COUNTERCODE,
        PLANTINVOICE.CONTRACTNOCODE,
        PLANTINVOICE.STATUS,
         PLANTINVOICE.EXCHANGERATEOFCONTRACT,
         SALESDOCUMENTLINE.ITEMTYPEAFICODE;


-- DB2ADMIN.ITXVIEW_INVOICE_ACC source

CREATE VIEW ITXVIEW_INVOICE_ACC AS
SELECT
    PLANTINVOICE.CODE,
    PLANTINVOICE.INVOICEDATE,
    BUSINESSPARTNER.LEGALNAME1,
    CASE
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SALESDOCUMENTLINE.USERPRIMARYQUANTITY * SALESDOCUMENTLINE.PRICE
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SALESDOCUMENTLINE.USERSECONDARYQUANTITY * SALESDOCUMENTLINE.PRICE
        ELSE SALESDOCUMENTLINE.USERSECONDARYQUANTITY * SALESDOCUMENTLINE.PRICE
    END AS TOTAL_FAKTUR
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICE.CODE = PLANTINVOICELINE.PLANTINVOICECODE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERIE.CUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN(
        SELECT
            *
        FROM
            SALESDOCUMENTLINE SALESDOCUMENTLINE
        WHERE
            SALESDOCUMENTLINE.ORDERLINE = '10'
    ) SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_BIAYATAMBAHAN source

CREATE VIEW ITXVIEW_INVOICE_BIAYATAMBAHAN AS
SELECT
    no_invoice,
    COMPANYCODE,
    sum(biaya_tambahan) AS biaya_tambahan,
    LISTAGG(
        DISTINCT(
            TRIM(ITAXCODE)
        ),
        ','
    ) AS ITAXCODE
FROM
    (
        SELECT
            p.code AS no_invoice,
            p.COMPANYCODE,
            i.ITAXCODE,
            sum(i.VALUE) AS biaya_tambahan
        FROM
            PLANTINVOICE p
        LEFT JOIN PLANTINVOICELINE p2 ON
            p2.PLANTINVOICECODE = p.CODE
        LEFT JOIN INDTAXDETAIL i ON
            p2.ABSUNIQUEID = i.ABSUNIQUEID
        WHERE
            (
                i.ITAXCODE = 'OH1'
                    OR i.ITAXCODE = 'OH3'
                    OR i.ITAXCODE = 'SUR'
                    OR i.ITAXCODE = 'SUS'
                    OR i.ITAXCODE = 'FR1'
                    OR i.ITAXCODE = 'CFR'
                    OR i.ITAXCODE = 'MCQ'
                    OR i.ITAXCODE = 'MC1'
                    OR i.ITAXCODE = 'CRF'
            )
            AND i.VALUE <> 0
            --                AND p.code = 'EX23090061'
        GROUP BY
            p.code,
            i.ITAXCODE,
            p.COMPANYCODE
            --  i.CALCULATEDVALUE;
    )
GROUP BY 
    no_invoice,
    COMPANYCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_BIAYATAMBAHAN2 source

CREATE VIEW ITXVIEW_INVOICE_BIAYATAMBAHAN2 AS
SELECT
    p.code AS no_invoice,
    sum(i.CALCULATEDVALUERTC) AS biaya_tambahan,
    i.ITAXCODE AS ket_biaya
FROM
    PLANTINVOICE p
LEFT JOIN INDTAXTOTAL i ON
    p.ABSUNIQUEID = i.ABSUNIQUEID
WHERE
    i.CALCULATEDVALUE <> 0
    AND (
        i.ITAXCODE = 'OH1'
            OR i.ITAXCODE = 'SUR'
            OR i.ITAXCODE = 'SUS'
            OR i.ITAXCODE = 'FR1'
            OR i.ITAXCODE = 'CFR'
    )
    --            AND p.CODE ='EX23120049'
GROUP BY
    p.code,
    p.ABSUNIQUEID,
    i.ITAXCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_COUNT_NO_ORDER source

CREATE VIEW ITXVIEW_iNVOICE_COUNT_NO_ORDER AS
SELECT
    Provisionalcode,
    count(SALESORDERCODE) AS cnt_salesordercode
FROM
    (
        SELECT
            DISTINCT 
SALESDOCUMENTPROVISIONALCODE AS provisionalcode,
            DLVSALORDERLINESALESORDERCODE AS SALESORDERCODE
        FROM
            SALESDOCUMENTLINE s
    )
GROUP BY
    Provisionalcode;


-- DB2ADMIN.ITXVIEW_INVOICE_CURR_GRANDTOTAL source

CREATE VIEW ITXVIEW_INVOICE_CURR_GRANDTOTAL AS
    SELECT
      DISTINCT 
            trim(PLANTINVOICELINE.PLANTINVOICECODE) AS Invoice,
            SALESDOCUMENT.COMPANYCODE ,
            SALESDOCUMENT.PROVISIONALCODE AS NO_SJ,                    
            PLANTINVOICELINE.TAXTEMPLATECODE, 
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            SALESDOCUMENT.CURRENCYCODE AS curr,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
    AND SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT.COMPANYCODE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND PLANTINVOICELINE.INVOICELINENO = CASE
            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
        WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
        WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
    END
    --            WHERE PLANTINVOICELINE.PLANTINVOICECODE ='EX2200428'
GROUP BY
                    SALESDOCUMENT.COMPANYCODE,
                    PLANTINVOICELINE.PLANTINVOICECODE,
                    SALESDOCUMENTLINE.PREVIOUSCODE,
                    SALESDOCUMENT.PROVISIONALCODE,
                    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
                    PLANTINVOICELINE.TAXTEMPLATECODE,
                     SALESDOCUMENT.CURRENCYCODE,
                    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE;


-- DB2ADMIN.ITXVIEW_INVOICE_DETAIL_2 source

CREATE VIEW ITXVIEW_INVOICE_DETAIL_2 AS
SELECT
    ITXVIEW_ALLOCATION_SURATJALAN_PPC2.CODE,
    trim(PLANTINVOICE.CODE) AS Invoice,
    SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
    SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
    CASE
        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
            ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
        END
        ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
    END AS tanggal_inv,
    PLANTINVOICE.CREATIONDATE AS tgl_create,
    CASE
        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
        END
        ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
    END AS DUE,
    PLANTINVOICE.CHALLANDATE AS DATEKB,
    PLANTINVOICE.LRDATE AS DUEKB,
    trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
    trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
    trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
    BUSINESSPARTNER.NUMBERID AS id_bep,
    BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
    CASE
        WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
        ELSE ADDRESS.CODE
    END AS kode_cus,
    CASE
        WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
        ELSE trim(ADDRESS.ADDRESSEE)
    END AS nama_cus,
    CASE
        WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
            ELSE trim(ADDRESS.ADDRESSLINE4)
        END
        ELSE CASE
            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
            ELSE trim(ADDRESS.ADDRESSLINE4)
        END
    END AS NPWP,
    CASE
        WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
        ELSE PLANTINVOICE.BLNUMBER
    END AS FAKTUR_PAJAK,
    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
    REPLACE(ITXVIEW_PO_INVOICE.NO_PO, '''', ' ') AS NO_PO,
    PLANTINVOICE.STATUS AS NO_CI,
    CASE
        WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
        ELSE '-'
    END AS DESC_KAIN,
    PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
    trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
    trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
    trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
    CASE
        WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan) IS NULL THEN 0
        ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan)
    END AS biaya_tambahan,
    SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY, 2))AS BERAT,
    CASE
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2))
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2))
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY * 0.9144, 2))
        WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
            WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY, 2))
            ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2))
        END
    END AS BERAT_LAIN,
    round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
    CASE
        WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round(SUM(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY), 2)* round(SALESDOCUMENTLINE.price, 2)
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                ELSE round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
            END
        END
        WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY) * SALESDOCUMENTLINE.price)
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 2))
            WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                ELSE floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC2.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
            END
        END
    END AS JUMLAH_HARGA
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
    PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
LEFT JOIN ADDRESS ADDRESS ON
    ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
    AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND PLANTINVOICELINE.INVOICELINENO = CASE
        WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
        WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
        WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
    END
LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
    SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC2 ITXVIEW_ALLOCATION_SURATJALAN_PPC2 ON
    ITXVIEW_ALLOCATION_SURATJALAN_PPC2.CODE = ALLOCATION.CODE
LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN2 ITXVIEW_INVOICE_BIAYATAMBAHAN2 ON
    PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN2.no_invoice
GROUP BY
    ITXVIEW_ALLOCATION_SURATJALAN_PPC2.CODE,
    PLANTINVOICE.CODE,
    PLANTINVOICE.CHALLANDATE,
    PLANTINVOICE.LRDATE,
    PLANTINVOICE.STATUS,
    SALESORDER.CREATIONUSER,
    PLANTINVOICE.CREATIONUSER,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    ITXVIEW_PO_INVOICE.NO_PO,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESORDER.ORDERPARTNERBRANDCODE,
    ALLOCATION.ALLOCATIONDATE,
    SALESDOCUMENT2.GOODSISSUEDATE,
    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
    PLANTINVOICE.CREATIONDATE,
    PAYMENTMETHOD.LONGDESCRIPTION,
    PAYMENTMETHODIE.NOOFDAYS,
    PLANTINVOICE.CONTRACTNOCODE,
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
    ADDRESS.ADDRESSEE,
    ADDRESS.TAXREGISTRATIONNUMBER,
    ADDRESS.ADDRESSLINE4,
    PLANTINVOICE.ORDERCURRENCYCODE,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT,
    ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    PLANTINVOICELINE.TAXTEMPLATECODE,
    PLANTINVOICE.BLNUMBER,
    PLANTINVOICE.ORDERCURRENCYCODE,
    SALESDOCUMENTLINE.price,
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
    SALESORDER.DESCRIPTION,
    SALESORDER.TEMPLATECODE,
    SALESORDER.COUNTERCODE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    ADDRESS.CODE;


-- DB2ADMIN.ITXVIEW_INVOICE_FAKTUR source

CREATE VIEW ITXVIEW_INVOICE_FAKTUR AS
SELECT
    invoice,
    tgl_faktur,
    no_sj,
    kode_jk1,
    kode_jk2,
    kode_jk,
    item_kain,
    CASE
        WHEN hs_code <> '' THEN 'HS CODE : ' || hs_code
        ELSE ''
    END AS hs_code,
    CASE
        WHEN trim(kode_jk) IS NOT NULL THEN trim(kode_jk) || '-' || item_kain
        ELSE kode_jk1 || kode_jk2 || '-' || item_kain
    END AS tes,
    curr,
    kode_payment,
    unit,
    PRICE,
    CASE
        WHEN unit = 'kg' THEN PRIMARYQTY
        ELSE SECONDARYQTY
    END AS quantity,
    jumlah_harga,
    rate,
    ITAXCODE,
    ket_vat,
    dpp,
    vat,
    total,
    id_partner
FROM
    (
        SELECT
            P.CODE AS invoice,
            ALLOCATION.ALLOCATIONDATE AS tgl_faktur,
            ALLOCATION.ORDERCODE AS no_sj,
            JK.SUBCODE02 AS kode_jk1,
            JK.SUBCODE03 AS kode_jk2,
            JK.LONGDESCRIPTION AS kode_jk,
            JK.ITEMDESCRIPTION AS item_kain,
            JK.EXTERNALREFERENCE AS hs_code,
            P.ORDERCURRENCYCODE AS curr,
            P.TERMSOFPAYMENTCODE AS kode_payment,
            PL.SECONDARYQTY,
            PL.PRIMARYQTY,
            PL.PRICE,
            SLDL.PRICEUNITOFMEASURECODE AS unit,
            P.EXCHANGERATEOFCONTRACT AS rate,
            INDTAXTOTAL.ITAXCODE,
            INDTAXTOTAL.CALCULATEDVALUE AS vat,
            ITAX.LONGDESCRIPTION AS ket_vat,
            PL.BASICVALUE AS jumlah_harga,
            P.BASICVALUE AS dpp,
            P.NETTVALUE AS total,
            BSP.NUMBERID AS id_partner
        FROM
            PLANTINVOICE P
        LEFT JOIN PLANTINVOICELINE PL ON
            P.CODE = PL.PLANTINVOICECODE
        LEFT JOIN SALESORDER SO ON
            P.CONTRACTNOCODE = SO.CODE
        LEFT JOIN ORDERPARTNERIE OPR ON
            SO.FNCORDPRNCUSTOMERSUPPLIERCODE = OPR.CUSTOMERSUPPLIERCODE
        LEFT JOIN ORDERPARTNERBRAND OPB ON
            SO.ORDERPARTNERBRANDCODE = OPB.CODE
            AND OPR.CUSTOMERSUPPLIERCODE = OPB.ORDPRNCUSTOMERSUPPLIERCODE
        LEFT JOIN SALESDOCUMENT SLD ON
            P.CODE = SLD.PROVISIONALCODE
        LEFT JOIN ORDERPARTNER OP ON
            SLD.FNCORDPRNCUSTOMERSUPPLIERCODE = OP.CUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BSP ON
            OP.ORDERBUSINESSPARTNERNUMBERID = BSP.NUMBERID
        LEFT JOIN SALESDOCUMENTLINE SLDL ON
            SLD.PROVISIONALCODE = SLDL.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN ITXVIEW_SUB_INV_ITEMJENISKAIN JK ON
            P.CODE = JK.PROVISIONALCODE
            AND PL.SUBCODE02 = JK.SUBCODE02
            AND PL.SUBCODE03 = JK.SUBCODE03
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
            )ALLOCATION ON
            SLDL.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SLDL.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SLDL.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SLDL.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SLDL.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SLDL.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SLDL.PREVIOUSCODE = ALLOCATION.ORDERCODE
        LEFT JOIN PAYMENTMETHOD PM ON
            P.TERMSOFPAYMENTCODE = PM.CODE
        LEFT JOIN PAYMENTMETHODIE PME ON
            PM.CODE = PME.CODE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    INDTAXTOTAL INDTAXTOTAL
                WHERE
                    INDTAXTOTAL.ITAXCODE = 'VT4'
                    AND INDTAXTOTAL.TAXCATEGORYCODE = 'TAX'
            )INDTAXTOTAL ON
            P.ABSUNIQUEID = INDTAXTOTAL.ABSUNIQUEID
        LEFT JOIN ITAX ITAX ON
            INDTAXTOTAL.ITAXCODE = ITAX.CODE
        GROUP BY
            P.CODE,
            ALLOCATION.ALLOCATIONDATE,
            JK.SUBCODE02,
            JK.SUBCODE03,
            JK.LONGDESCRIPTION,
            JK.EXTERNALREFERENCE,
            JK.ITEMDESCRIPTION,
            ALLOCATION.ORDERCODE,
            PL.SECONDARYQTY,
            PL.PRIMARYQTY,
            PL.PRICE,
            P.ORDERCURRENCYCODE,
            P.TERMSOFPAYMENTCODE,
            SLDL.PRICEUNITOFMEASURECODE,
            P.EXCHANGERATEOFCONTRACT ,
            INDTAXTOTAL.CALCULATEDVALUE,
            INDTAXTOTAL.ITAXCODE,
            ITAX.LONGDESCRIPTION,
            PL.BASICVALUE,
            P.BASICVALUE,
            P.NETTVALUE,
            BSP.NUMBERID
    );


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    '100' AS SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE AS SALDOCPROVISIONALCOUNTERCODE,
    sum(USERPRIMARYQUANTITY) AS total_kg,
    sum(USERSECONDARYQUANTITY) AS total_yard,
    sum(BASESECONDARYQUANTITY) AS total_meter,
    sum(QTY_PCS) AS total_unit,
    CASE
        WHEN CURR = 'USD' THEN ROUND(SUM(JML_HARGA_YD), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(JML_HARGA_YD))
    END AS TOTAL_jml_harga_YD,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(JML_HARGA_KG), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(JML_HARGA_KG))
    END AS TOTAL_jml_harga_kg,
    CASE
        WHEN CURR = 'USD' THEN round(SUM(JML_HARGA_M), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(JML_HARGA_M))
    END AS TOTAL_jml_harga_m,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(JML_HARGA_UN), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(JML_HARGA_UN))
    END AS TOTAL_jml_harga_un
FROM
    ITXVIEW_ALLOCATION_2B iab
    --WHERE 
    --	SALESDOCUMENTPROVISIONALCODE = 'ESP2300764'
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    CURR;


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL2 source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL2 AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    ITEMTYPECODE,
    sum(total_kg) AS total_kg,
    sum(total_yard) AS total_yard,
    sum(total_meter) AS total_meter,
    sum(total_unit) AS total_unit,
    CASE
        WHEN CURR = 'USD' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_YD))
    END AS TOTAL_jml_harga_YD,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_kg))
    END AS TOTAL_jml_harga_kg,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_m), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_m))
    END AS TOTAL_jml_harga_m,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_un), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_un))
    END AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            --        INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            --            LOTCODE,
            ITEMTYPECODE,
            DECOSUBCODE04,
            sum(USERPRIMARYQUANTITY) AS total_kg,
            sum(USERSECONDARYQUANTITY) AS total_yard,
            sum(BASESECONDARYQUANTITY) AS total_meter,
            sum(qty_pcs) AS total_unit,
            PRICE,
            CURR,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un
        FROM
            (
                SELECT
                    DISTINCT
            SALESDOCUMENTPROVISIONALCODE,
                    SALESDOCUMENTCOMPANYCODE,
                    --    CODE,
                    CURR,
                    LOTCODE,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERPRIMARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        )
        		THEN SUM(round(USERPRIMARYQUANTITY, 2))
                        ELSE SUM(round(USERPRIMARYQUANTITY, 2))
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        ELSE SUM(USERSECONDARYQUANTITY)
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        ELSE SUM(BASESECONDARYQUANTITY)
                    END AS BASESECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(qty_pcs)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(qty_pcs)
                        ELSE SUM(qty_pcs)
                    END AS qty_pcs,
                    PRICE,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_YD,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_kg,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_m,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN ROUND((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'Lot'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        ELSE 0
                    END jml_harga_un,
                    --        QUALITYREASONCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    --            PROJECTCODE,
                    ITEMTYPECODE,
                    ALLOCATIONDATE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
                FROM
                    (
                        SELECT
                            DISTINCT
                s.SALESDOCUMENTPROVISIONALCODE,
                            s.SALESDOCUMENTCOMPANYCODE,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURRENCYCODE AS curr,
                            --                s.ORDERLINE AS orderline,
                CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                ELSE iasp.BASESECONDARYQUANTITY
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            s.PRICE,
                            TRIM(s.PRICEUNITOFMEASURECODE) AS PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            --                ALLOCATION.ORDERLINE AS ORDERLINE,
                            ALLOCATION.PROJECTCODE AS PROJECTCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN SALESDOCUMENT CURR ON
                            CURR.PROVISIONALCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND CURR.COMPANYCODE = s.SALESDOCUMENTCOMPANYCODE
                            AND CURR.PROVISIONALCOUNTERCODE = s.SALDOCPROVISIONALCOUNTERCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    --    CODE,
                    SALESDOCUMENTCOMPANYCODE,
                    CURR,
                    LOTCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    --            PROJECTCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    ALLOCATIONDATE,
                    ITEMTYPECODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
            )
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            LOTCODE,
            CURR,
            DECOSUBCODE04,
            ITEMTYPECODE,
            PRICEUNITOFMEASURECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PRICE
    )
    --                    WHERE SALESDOCUMENTPROVISIONALCODE LIKE '%ESP23%'
GROUP BY
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    CURR,
    --    ITEMTYPECODE,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL2E source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL2E AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    ITEMTYPECODE,
    sum(total_kg) AS total_kg,
    sum(total_yard) AS total_yard,
    sum(total_meter) AS total_meter,
    sum(total_unit) AS total_unit,
    CASE
        WHEN CURR = 'USD' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_YD))
    END AS TOTAL_jml_harga_YD,
       CASE
        --        WHEN SALESDOCUMENTPROVISIONALCODE = 'ESP2400086'
        --        AND CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)-0.01
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_kg))
    END AS TOTAL_jml_harga_kg,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_m), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_m))
    END AS TOTAL_jml_harga_m,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_un), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_un))
    END AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            --        INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            SALESDOCUMENTCOMPANYCODE,
            SALDOCPROVISIONALCOUNTERCODE,
                    LOTCODE,
            ITEMTYPECODE,
                DECOSUBCODE04,
            sum(USERPRIMARYQUANTITY) AS total_kg,
            sum(USERSECONDARYQUANTITY) AS total_yard,
            sum(BASESECONDARYQUANTITY) AS total_meter,
            sum(qty_pcs) AS total_unit,
            PRICE,
            CURR,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un
        FROM
            (
                SELECT
                    DISTINCT
            SALESDOCUMENTPROVISIONALCODE,
                    DLVSALORDERLINESALESORDERCODE,
                    SALESDOCUMENTCOMPANYCODE,
                    --    CODE,
                    CURR,
                    LOTCODE,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERPRIMARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        )
        		THEN SUM(round(USERPRIMARYQUANTITY, 2))
                        ELSE SUM(round(USERPRIMARYQUANTITY, 2))
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        ELSE SUM(USERSECONDARYQUANTITY)
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        ELSE SUM(BASESECONDARYQUANTITY)
                    END AS BASESECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(qty_pcs)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(qty_pcs)
                        ELSE SUM(qty_pcs)
                    END AS qty_pcs,
                    PRICE,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_YD,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_kg,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_m,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN ROUND((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'Lot'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        ELSE 0
                    END jml_harga_un,
                    --        QUALITYREASONCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    --            PROJECTCODE,
                    ITEMTYPECODE,
                    ALLOCATIONDATE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
                FROM
                    (
                        SELECT
                            DISTINCT
                s.SALESDOCUMENTPROVISIONALCODE,
                            s.DLVSALORDERLINESALESORDERCODE,
                            s.SALESDOCUMENTCOMPANYCODE,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURRENCYCODE AS curr,
                            --                s.ORDERLINE AS orderline,
                CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                ELSE iasp.BASESECONDARYQUANTITY
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            s.PRICE,
                            TRIM(s.PRICEUNITOFMEASURECODE) AS PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            --                ALLOCATION.ORDERLINE AS ORDERLINE,
                            ALLOCATION.PROJECTCODE AS PROJECTCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN SALESDOCUMENT CURR ON
                            CURR.PROVISIONALCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND CURR.COMPANYCODE = s.SALESDOCUMENTCOMPANYCODE
                            AND CURR.PROVISIONALCOUNTERCODE = s.SALDOCPROVISIONALCOUNTERCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                            --                  and ALLOCATION.ORDERCODE = 'ESP2400178'
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    DLVSALORDERLINESALESORDERCODE,
                    --    CODE,
                    SALESDOCUMENTCOMPANYCODE,
                    CURR,
                    LOTCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    --            PROJECTCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    ALLOCATIONDATE,
                    ITEMTYPECODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
            )
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            DLVSALORDERLINESALESORDERCODE,
            SALESDOCUMENTCOMPANYCODE,
            LOTCODE,
            DECOSUBCODE04,
            CURR,
            ITEMTYPECODE,
            PRICEUNITOFMEASURECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PRICE
    )
    --                                    WHERE SALESDOCUMENTPROVISIONALCODE ='ESP2400086'
GROUP BY
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    CURR,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL2L source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL2L AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    --    ITEMTYPECODE,
    sum(total_kg) AS total_kg,
    sum(total_yard) AS total_yard,
    sum(total_meter) AS total_meter,
    sum(total_unit) AS total_unit,
    CASE
        WHEN CURR = 'USD' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_YD))
    END AS TOTAL_jml_harga_YD,
       CASE
        --        WHEN SALESDOCUMENTPROVISIONALCODE = 'ESP2400086'
        --        AND CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)-0.01
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_kg))
    END AS TOTAL_jml_harga_kg,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_m), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_m))
    END AS TOTAL_jml_harga_m,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_un), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_un))
    END AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            --        INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            SALDOCPROVISIONALCOUNTERCODE,
                    LOTCODE,
            ITEMTYPECODE,
            --                DECOSUBCODE04,
            sum(USERPRIMARYQUANTITY) AS total_kg,
            sum(USERSECONDARYQUANTITY) AS total_yard,
            sum(BASESECONDARYQUANTITY) AS total_meter,
            sum(qty_pcs) AS total_unit,
            PRICE,
            CURR,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un
        FROM
            (
                SELECT
                    DISTINCT
            SALESDOCUMENTPROVISIONALCODE,
                    SALESDOCUMENTCOMPANYCODE,
                    --    CODE,
                    CURR,
                    LOTCODE,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERPRIMARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        )
        		THEN SUM(round(USERPRIMARYQUANTITY, 2))
                        ELSE SUM(round(USERPRIMARYQUANTITY, 2))
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        ELSE SUM(USERSECONDARYQUANTITY)
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        ELSE SUM(BASESECONDARYQUANTITY)
                    END AS BASESECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(qty_pcs)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(qty_pcs)
                        ELSE SUM(qty_pcs)
                    END AS qty_pcs,
                    PRICE,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_YD,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_kg,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_m,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN ROUND((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'Lot'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        ELSE 0
                    END jml_harga_un,
                    --        QUALITYREASONCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    --            PROJECTCODE,
                    ITEMTYPECODE,
                    ALLOCATIONDATE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
                FROM
                    (
                        SELECT
                            DISTINCT
                s.SALESDOCUMENTPROVISIONALCODE,
                            s.SALESDOCUMENTCOMPANYCODE,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURRENCYCODE AS curr,
                            --                s.ORDERLINE AS orderline,
                CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                ELSE iasp.BASESECONDARYQUANTITY
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            s.PRICE,
                            TRIM(s.PRICEUNITOFMEASURECODE) AS PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            --                ALLOCATION.ORDERLINE AS ORDERLINE,
                            ALLOCATION.PROJECTCODE AS PROJECTCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN SALESDOCUMENT CURR ON
                            CURR.PROVISIONALCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND CURR.COMPANYCODE = s.SALESDOCUMENTCOMPANYCODE
                            AND CURR.PROVISIONALCOUNTERCODE = s.SALDOCPROVISIONALCOUNTERCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                            --                                                	    		and ALLOCATION.ORDERCODE = 'ESP2400141'
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    --    CODE,
                    SALESDOCUMENTCOMPANYCODE,
                    CURR,
                    LOTCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    --            PROJECTCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    ALLOCATIONDATE,
                    ITEMTYPECODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
            )
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            LOTCODE,
            --        DECOSUBCODE04,
            CURR,
            ITEMTYPECODE,
            PRICEUNITOFMEASURECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PRICE
    )
    --                                    WHERE SALESDOCUMENTPROVISIONALCODE ='ESP2400086'
GROUP BY
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    CURR,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL2_FKF source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL2_FKF AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    ITEMTYPECODE,
    sum(total_kg) AS total_kg,
    sum(total_yard) AS total_yard,
    sum(total_meter) AS total_meter,
    sum(total_unit) AS total_unit,
    CASE
        WHEN CURR = 'USD' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_YD))
    END AS TOTAL_jml_harga_YD,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_kg), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_kg))
    END AS TOTAL_jml_harga_kg,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_m), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_m))
    END AS TOTAL_jml_harga_m,
       CASE
        WHEN CURR = 'USD' THEN round(SUM(jml_harga_un), 2)
        WHEN CURR = 'IDR' THEN FLOOR(SUM(jml_harga_un))
    END AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            --        INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            --            LOTCODE,
            ITEMTYPECODE,
            DECOSUBCODE04,
            sum(USERPRIMARYQUANTITY) AS total_kg,
            sum(USERSECONDARYQUANTITY) AS total_yard,
            sum(BASESECONDARYQUANTITY) AS total_meter,
            sum(qty_pcs) AS total_unit,
            PRICE,
            CURR,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un
        FROM
            (
                SELECT
                    DISTINCT
            SALESDOCUMENTPROVISIONALCODE,
                    SALESDOCUMENTCOMPANYCODE,
                    CODE,
                    CURR,
                    LOTCODE,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERPRIMARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        )
        		THEN SUM(round(USERPRIMARYQUANTITY, 2))
                        ELSE SUM(round(USERPRIMARYQUANTITY, 2))
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        ELSE SUM(USERSECONDARYQUANTITY)
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        ELSE SUM(BASESECONDARYQUANTITY)
                    END AS BASESECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(qty_pcs)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(qty_pcs)
                        ELSE SUM(qty_pcs)
                    END AS qty_pcs,
                    PRICE,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_YD,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_kg,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_m,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN ROUND((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'Lot'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        ELSE 0
                    END jml_harga_un,
                    --        QUALITYREASONCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    --            PROJECTCODE,
                    ITEMTYPECODE,
                    ALLOCATIONDATE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
                FROM
                    (
                        SELECT
                            DISTINCT
                s.SALESDOCUMENTPROVISIONALCODE,
                            s.SALESDOCUMENTCOMPANYCODE,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURRENCYCODE AS curr,
                            --                s.ORDERLINE AS orderline,
                CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                ELSE iasp.BASESECONDARYQUANTITY
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            s.PRICE,
                            s.PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            --                ALLOCATION.ORDERLINE AS ORDERLINE,
                            ALLOCATION.PROJECTCODE AS PROJECTCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN SALESDOCUMENT CURR ON
                            CURR.PROVISIONALCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND CURR.COMPANYCODE = s.SALESDOCUMENTCOMPANYCODE
                            AND CURR.PROVISIONALCOUNTERCODE = s.SALDOCPROVISIONALCOUNTERCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
                            AND ALLOCATION.ITEMTYPECODE = 'FKF'
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    CODE,
                    SALESDOCUMENTCOMPANYCODE,
                    CURR,
                    LOTCODE,
                    ORDERCODE,
                    --            ORDERLINE,
                    --            PROJECTCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    ALLOCATIONDATE,
                    ITEMTYPECODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE
            )
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            SALESDOCUMENTCOMPANYCODE,
            --        LOTCODE,
            CURR,
            ITEMTYPECODE,
            DECOSUBCODE04,
            PRICEUNITOFMEASURECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PRICE
    )
    --                    WHERE SALESDOCUMENTPROVISIONALCODE LIKE '%POD23%'
GROUP BY
    SALESDOCUMENTCOMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    CURR,
    ITEMTYPECODE,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL3 source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL3 AS
SELECT
    s.PROVISIONALCODE AS SALESDOCUMENTPROVISIONALCODE,
    s.COMPANYCODE AS SALESDOCUMENTCOMPANYCODE,
    s.PROVISIONALCOUNTERCODE AS SALDOCPROVISIONALCOUNTERCODE,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.total_kg
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.total_kg
    END AS total_kg,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.total_yard
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.total_yard
    END AS total_yard,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.total_meter
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.total_meter
    END AS total_meter,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.total_unit
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.total_unit
    END AS total_unit,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.TOTAL_jml_harga_YD
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.TOTAL_jml_harga_YD
    END AS TOTAL_jml_harga_YD,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.TOTAL_jml_harga_kg
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.TOTAL_jml_harga_kg
    END AS TOTAL_jml_harga_kg,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.TOTAL_jml_harga_m
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.TOTAL_jml_harga_m
    END AS TOTAL_jml_harga_m,
    CASE
        WHEN s.PROVISIONALCOUNTERCODE IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN E.TOTAL_jml_harga_un
        WHEN s.PROVISIONALCOUNTERCODE NOT IN (
            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
        ) THEN L.TOTAL_jml_harga_un
    END AS TOTAL_jml_harga_un
FROM
    SALESDOCUMENT s
LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL2L L ON
    L.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
    AND L.SALDOCPROVISIONALCOUNTERCODE = s.PROVISIONALCOUNTERCODE
LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL2E E ON
    E.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
    AND E.SALDOCPROVISIONALCOUNTERCODE = s.PROVISIONALCOUNTERCODE
    --WHERE 
    --s.PROVISIONALCODE = 'ESP2400086';


-- DB2ADMIN.ITXVIEW_INVOICE_GRANDTOTAL_SJ source

CREATE VIEW ITXVIEW_INVOICE_GRANDTOTAL_SJ AS
SELECT
    LOTCODE,
    SALESDOCUMENTPROVISIONALCODE,
    sum(USERPRIMARYQUANTITY) AS berat,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'kg' THEN sum(USERSECONDARYQUANTITY)
        WHEN PRICEUNITOFMEASURECODE = 'yd' THEN sum(USERSECONDARYQUANTITY)
        WHEN PRICEUNITOFMEASURECODE = 'm' THEN sum(BASESECONDARYQUANTITY)
        WHEN PRICEUNITOFMEASURECODE IN (
            'un', 'Lot'
        ) THEN sum(qty_pcs)
    END AS berat_lain,
    ROUND(SUM(jml_harga_YD), 2)AS TOTAL_jml_harga_YD,
    round(SUM(jml_harga_kg), 2) AS TOTAL_jml_harga_kg,
    round(SUM(jml_harga_m), 2) AS TOTAL_jml_harga_m,
    round(SUM(jml_harga_un), 2) AS TOTAL_jml_harga_un
FROM
    (
        SELECT
            DISTINCT SALESDOCUMENTPROVISIONALCODE,
            LOTCODE,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERPRIMARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(round(USERPRIMARYQUANTITY, 2))
            END USERPRIMARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(USERSECONDARYQUANTITY)
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(BASESECONDARYQUANTITY)
            END AS BASESECONDARYQUANTITY,
            CASE
                WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                ) THEN SUM(qty_pcs)
                WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN SUM(qty_pcs)
            END AS qty_pcs,
            PRICE,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                ELSE 0
            END jml_harga_un,
            QUALITYREASONCODE,
            ORDERCODE,
            ORDERLINE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PROJECTCODE,
            ITEMTYPECODE,
            ALLOCATIONDATE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            JENIS_KAIN,
            NO_ITEM,
            EXTERNALREFERENCE,
            WARNA
        FROM
            (
                SELECT
                    DISTINCT s.SALESDOCUMENTPROVISIONALCODE,
                    ALLOCATION.CODE AS CODE,
                    iasp.itemelementcode,
                    iasp.LOTCODE,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN 0
                        ELSE iasp.USERSECONDARYQUANTITY
                    END USERSECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERPRIMARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN 0
                        ELSE iasp.USERPRIMARYQUANTITY
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.USERSECONDARYUSEDQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN 0
                        WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                        WHEN iasp.ITEMTYPECODE = 'CAP'
                        AND iasp.BASEPRIMARYUOMCODE IN(
                            'Lot', 'un'
                        ) THEN iasp.BASEPRIMARYQUANTITY
                        ELSE iasp.BASESECONDARYQUANTITY
                    END qty_pcs,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                        ) THEN iasp.BASESECONDARYQUANTITY
                        WHEN e.QUALITYREASONCODE = 'FOC'
                        AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN 0
                        ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                    END BASESECONDARYQUANTITY,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                        ELSE 0
                    END AS FOC_KG,
                    CASE
                        WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                        ELSE 0
                    END AS FOC_YARD,
                    s.PRICE,
                    s.PRICEUNITOFMEASURECODE,
                    e.QUALITYREASONCODE,
                    s.PREVIOUSCODE,
                    s.SALDOCPROVISIONALCOUNTERCODE,
                    ALLOCATION.ORDERCODE AS ORDERCODE,
                    ALLOCATION.ORDERLINE AS ORDERLINE,
                    ALLOCATION.PROJECTCODE AS PROJECTCODE,
                    ALLOCATION.ITEMTYPECODE,
                    ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                    ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                    ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                    ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                    ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                    ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                    ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                    ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                    ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                    ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                    a.EXTERNALITEMCODE AS NO_ITEM,
                    a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                    i.WARNA
                FROM
                    ALLOCATION ALLOCATION
                LEFT JOIN PRODUCT PRODUCT ON
                    ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                    ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                    AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                    AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                    iasp.CODE = ALLOCATION.CODE
                    AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                    AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                    AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                    AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                    AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                    AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                    AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                LEFT JOIN ELEMENTS e ON
                    iasp.itemelementcode = e.CODE
                LEFT JOIN SALESDOCUMENTLINE s ON
                    ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                    AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                    AND ALLOCATION.ORDERLINE = s.ORDERLINE
                LEFT JOIN ITXVIEWCOLOR i ON
                    ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                    AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                    AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
            )
        WHERE
            USERPRIMARYQUANTITY <> 0
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            LOTCODE,
            ORDERCODE,
            ORDERLINE,
            PROJECTCODE,
            PRICE,
            PRICEUNITOFMEASURECODE,
            PREVIOUSCODE,
            ALLOCATIONDATE,
            ITEMTYPECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            DECOSUBCODE01,
            DECOSUBCODE02,
            DECOSUBCODE03,
            DECOSUBCODE04,
            DECOSUBCODE05,
            DECOSUBCODE06,
            DECOSUBCODE07,
            DECOSUBCODE08,
            CUSTOMERCODE,
            QUALITYREASONCODE,
            JENIS_KAIN,
            NO_ITEM,
            EXTERNALREFERENCE,
            WARNA
    )
GROUP BY
    SALESDOCUMENTPROVISIONALCODE,
    LOTCODE,
    PRICEUNITOFMEASURECODE;


-- DB2ADMIN.ITXVIEW_INVOICE_KETBIAYATAMBAHAN source

CREATE VIEW ITXVIEW_INVOICE_KETBIAYATAMBAHAN AS
SELECT
    no_invoice,
    COMPANYCODE,
    DIVISIONCODE,
    biaya_tambahan,
    ket_biaya
FROM
    (
        SELECT
            p.code AS no_invoice,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            sum(i.VALUE) AS biaya_tambahan,
            i.ITAXCODE AS ket_biaya
        FROM
            PLANTINVOICE p
        LEFT JOIN PLANTINVOICELINE p2 ON
            p2.PLANTINVOICECODE = p.CODE
            AND p2.PLANTINVOICECOMPANYCODE = p.COMPANYCODE
            AND p2.PLANTINVOICEDIVISIONCODE = p.DIVISIONCODE
        LEFT JOIN INDTAXDETAIL i ON
            p2.ABSUNIQUEID = i.ABSUNIQUEID
        WHERE
            i.VALUE <> 0
            --                AND  p.CODE = 'EX23120059'
            AND 
    (
                i.ITAXCODE = 'OH1'
                    OR i.ITAXCODE = 'OH3'
                    OR i.ITAXCODE = 'SUR'
                    OR i.ITAXCODE = 'SUS'
                    OR i.ITAXCODE = 'FR1'
                    OR i.ITAXCODE = 'CFR'
                    OR i.ITAXCODE = 'MCQ'
                    OR i.ITAXCODE = 'MC1'
                    OR i.ITAXCODE = 'CRF'
            )
        GROUP BY
            p.code,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            i.ITAXCODE
        ORDER BY
            i.ITAXCODE DESC
    );


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE AS
SELECT
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    due,
    DUEKB,
    DATEKB,
    jenis_order,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN '0'
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        AND id_bep <> 813
        OR kode_cus = 'BIHQSS' THEN '0'
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN '0'
        ELSE NPWP
    END AS NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    CASE
        WHEN NO_PO IS NULL THEN 'Nomor PO Header dan Line Kosong'
        ELSE NO_PO
    END AS NO_PO,
    NO_CI,
    desc_kain,
    code_payment,
    curr,
    CASE
        WHEN ppn = 'S03' THEN 0.11
        WHEN ppn = 'S01' THEN 0.11
        WHEN ppn = 'S13' THEN 0.11
        WHEN ppn = 'N01' THEN 0
        ELSE 0
    END AS ppn,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    BERAT,
    BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE (JUMLAH_HARGA) + (biaya_tambahan)
    END AS DPP,
     floor((JUMLAH_HARGA + biaya_tambahan) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 
		WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 
		WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
		ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(JUMLAH_HARGA + biaya_tambahan + CASE
            WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            ELSE 0
        END, 2)
    END AS TOTAL,
        floor((JUMLAH_HARGA + biaya_tambahan) * rate) + CASE
        WHEN PPN = 'S01' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS TOTAL_BC,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE
FROM
    (
        SELECT
              DISTINCT 
                    trim(PLANTINVOICE.CODE) AS Invoice,
                   	SALESDOCUMENT2.PROVISIONALCODE AS NO_SJ,
                    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
                    SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
                    CASE
                        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN
				CASE
                            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE
	        	trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE
        	trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
                    PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN
				CASE
                            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE
	        	SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE
        	SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
                    PLANTINVOICE.CHALLANDATE AS DATEKB,
                    PLANTINVOICE.LRDATE AS DUEKB,
                    trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
                    trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
                    trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
                    SALESORDER.PAYMENTCUSTOMERUNIQUEID,
                    SALESORDER.PAYMENTCUSTOMERCODE,
                    BUSINESSPARTNER.NUMBERID AS id_bep,
                    BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
                    CASE
                        WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
                    CASE
                        WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
                    CASE
                        WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN
            CASE
                            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE
            CASE
                            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
                    CASE
                        WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
                    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
                    REPLACE(ITXVIEW_PO_INVOICE.NO_PO, '''', ' ') AS NO_PO,
                    PLANTINVOICE.STATUS AS NO_CI,
                    CASE
                        WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
                    PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
                    PLANTINVOICELINE.TAXTEMPLATECODE,
                    trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
                    trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
                    trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
                    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
                    CASE
                        WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            GRANDTOTAL.TOTAL_KG AS BERAT,                   
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_METER
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                    'un', 'Lot'
                ) THEN GRANDTOTAL.TOTAL_UNIT
            END AS BERAT_LAIN,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD'
            THEN
            CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR'
            THEN
            CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
            END AS JUMLAH_HARGA,
            --                    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            PLANTINVOICE.ORDERCURRENCYCODE
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
            AND PLANTINVOICE.COMPANYCODE = SALESORDER.COMPANYCODE
            AND PLANTINVOICE.CONTRACTNOCOUNTERCODE = SALESORDER.COUNTERCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
            AND PLANTINVOICE.COMPANYCODE = SALESDOCUMENT.COMPANYCODE
            AND PLANTINVOICE.SALINVOICEPRVCOUNTERCODE = SALESDOCUMENT.PROVISIONALCOUNTERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHOD.COMPANYCODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHODIE.COMPANYCODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
            AND ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE = PLANTINVOICE.COMPANYCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT.COMPANYCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            --        AND PLANTINVOICELINE.INVOICELINENO = 
            --        CASE
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            --        END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
            AND SALESDOCUMENT2.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL3 GRANDTOTAL ON
            GRANDTOTAL.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT2.PROVISIONALCODE
            AND GRANDTOTAL.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT2.COMPANYCODE
            AND GRANDTOTAL.SALDOCPROVISIONALCOUNTERCODE = SALESDOCUMENT2.PROVISIONALCOUNTERCODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.COMPANYCODE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_PO_INVOICE.COMPANYCODE
            AND PLANTINVOICE.DIVISIONCODE = ITXVIEW_PO_INVOICE.DIVISIONCODE
            --                                                                    WHERE PLANTINVOICE.CODE ='DMU23120078'
            --                                WHERE
            --                                    PLANTINVOICE.CODE IN ('CA23080001')
            --                AND ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE IN ('000000396037','000000396038','000000396042','000000396043','000000396047','000000396048')
        GROUP BY
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            SALESORDER.PAYMENTCUSTOMERUNIQUEID,
            SALESORDER.PAYMENTCUSTOMERCODE,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            --            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESDOCUMENT2.PROVISIONALCODE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            --            GRANDTOTAL.ITEMTYPECODE,
            GRANDTOTAL.TOTAL_JML_HARGA_KG,
            GRANDTOTAL.TOTAL_JML_HARGA_YD,
            GRANDTOTAL.TOTAL_JML_HARGA_M,
            GRANDTOTAL.TOTAL_JML_HARGA_UN,
            GRANDTOTAL.TOTAL_KG,
            GRANDTOTAL.TOTAL_YARD ,
            GRANDTOTAL.TOTAL_METER ,
            GRANDTOTAL.TOTAL_UNIT,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            --			        ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE
    )
    --                    WHERE Invoice = 'EX23010002'
    --        WHERE NO_SJ ='ESP2300844'
GROUP BY
    Invoice,
    NO_SJ,
    tgl_inv,
    tanggal_inv,
    issue_date,
    tgl_create,
    jenis_order,
    kode_bep,
    due,
    DUEKB,
    DATEKB,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    code_payment,
    payment_terms,
    unit,
    biaya_tambahan,
    JUMLAH_HARGA,
    BERAT_LAIN,
    BERAT,
    rate,
    curr,
    desc_kain,
    ppn,
    id_bep,
    nama_bep,
    kode_cus,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE2 source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE2 AS
SELECT
    Invoice,
    NO_SJ,
    jenis_order,
    issue_date,
    tgl_inv,
    unit,
    biaya_tambahan,
    BERAT,
    BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE (JUMLAH_HARGA) + (biaya_tambahan)
    END AS DPP,
    floor((JUMLAH_HARGA + biaya_tambahan) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(JUMLAH_HARGA + biaya_tambahan + CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 ELSE 0 END, 2)
    END AS TOTAL,
    floor((JUMLAH_HARGA + biaya_tambahan) * rate) + CASE
        WHEN PPN = 'S01' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS TOTAL_BC
FROM
    (
        SELECT
            DISTINCT trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            GRANDTOTAL.TOTAL_KG AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_METER
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                    'un', 'Lot'
                ) THEN GRANDTOTAL.TOTAL_UNIT
            END AS BERAT_LAIN,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
            END AS JUMLAH_HARGA
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
            AND PLANTINVOICE.COMPANYCODE = SALESORDER.COMPANYCODE
            AND PLANTINVOICE.CONTRACTNOCOUNTERCODE = SALESORDER.COUNTERCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
            AND PLANTINVOICE.COMPANYCODE = SALESDOCUMENT.COMPANYCODE
            AND PLANTINVOICE.SALINVOICEPRVCOUNTERCODE = SALESDOCUMENT.PROVISIONALCOUNTERCODE
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE = SALESDOCUMENT.PROVISIONALCOUNTERCODE
            AND SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT.COMPANYCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.PLANTINVOICECOMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
            AND SALESDOCUMENT2.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL GRANDTOTAL ON
            GRANDTOTAL.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT2.PROVISIONALCODE
            AND GRANDTOTAL.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT2.COMPANYCODE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.COMPANYCODE
        GROUP BY
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            SALESORDER.COUNTERCODE,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            GRANDTOTAL.TOTAL_JML_HARGA_KG,
            GRANDTOTAL.TOTAL_JML_HARGA_YD,
            GRANDTOTAL.TOTAL_JML_HARGA_M,
            GRANDTOTAL.TOTAL_JML_HARGA_UN,
            GRANDTOTAL.TOTAL_KG,
            GRANDTOTAL.TOTAL_YARD ,
            GRANDTOTAL.TOTAL_METER ,
            GRANDTOTAL.TOTAL_UNIT ,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE
    )
GROUP BY
    Invoice,
    NO_SJ,
    issue_date,
    tgl_inv,
    jenis_order,
    biaya_tambahan,
    JUMLAH_HARGA,
    BERAT_LAIN,
    BERAT,
    desc_kain,
    rate,
    ppn,
    curr,
    unit;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_2 source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_2 AS
SELECT
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    due,
    DUEKB,
    DATEKB,
    jenis_order,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN '0'
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        AND id_bep <> 813
        OR kode_cus = 'BIHQSS' THEN '0'
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN '0'
        ELSE NPWP
    END AS NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    CASE
        WHEN NO_PO IS NULL THEN 'Nomor PO Header dan Line Kosong'
        ELSE NO_PO
    END AS NO_PO,
    NO_CI,
    desc_kain,
    code_payment,
    curr,
    CASE
        WHEN ppn = 'S03' THEN 0.11
        WHEN ppn = 'S01' THEN 0.11
        WHEN ppn = 'S13' THEN 0.11
        WHEN ppn = 'N01' THEN 0
        ELSE 0
    END AS ppn,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    BERAT,
    BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE (JUMLAH_HARGA) + (biaya_tambahan)
    END AS DPP,
     floor((JUMLAH_HARGA + biaya_tambahan) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 
		WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 
		WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
		ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(JUMLAH_HARGA + biaya_tambahan + CASE
            WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11
            ELSE 0
        END, 2)
    END AS TOTAL,
        floor((JUMLAH_HARGA + biaya_tambahan) * rate) + CASE
        WHEN PPN = 'S01' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS TOTAL_BC,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE
FROM
    (
        SELECT
              DISTINCT 
                    trim(PLANTINVOICE.CODE) AS Invoice,
                   	SALESDOCUMENT2.PROVISIONALCODE AS NO_SJ,
                    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
                    SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
                    CASE
                        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN
				CASE
                            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE
	        	trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE
        	trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
                    PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN
				CASE
                            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE
	        	SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE
        	SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
                    PLANTINVOICE.CHALLANDATE AS DATEKB,
                    PLANTINVOICE.LRDATE AS DUEKB,
                    trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
                    trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
                    trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
                    SALESORDER.PAYMENTCUSTOMERUNIQUEID,
                    SALESORDER.PAYMENTCUSTOMERCODE,
                    BUSINESSPARTNER.NUMBERID AS id_bep,
                    BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
                    CASE
                        WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
                    CASE
                        WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
                    CASE
                        WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN
            CASE
                            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE
            CASE
                            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
                    CASE
                        WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
                    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
                    REPLACE(ITXVIEW_PO_INVOICE.NO_PO, '''', ' ') AS NO_PO,
                    PLANTINVOICE.STATUS AS NO_CI,
                    CASE
                        WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
                    PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
                    PLANTINVOICELINE.TAXTEMPLATECODE,
                    trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
                    trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
                    trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
                    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
                    CASE
                        WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            GRANDTOTAL.TOTAL_KG AS BERAT,                   
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_METER
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                    'un', 'Lot'
                ) THEN GRANDTOTAL.TOTAL_UNIT
            END AS BERAT_LAIN,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD'
            THEN
            CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR'
            THEN
            CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
            END AS JUMLAH_HARGA,
            --                    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            PLANTINVOICE.ORDERCURRENCYCODE
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
            AND PLANTINVOICE.COMPANYCODE = SALESORDER.COMPANYCODE
            AND PLANTINVOICE.CONTRACTNOCOUNTERCODE = SALESORDER.COUNTERCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
            AND PLANTINVOICE.COMPANYCODE = SALESDOCUMENT.COMPANYCODE
            AND PLANTINVOICE.SALINVOICEPRVCOUNTERCODE = SALESDOCUMENT.PROVISIONALCOUNTERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHOD.COMPANYCODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHODIE.COMPANYCODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
            AND ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE = PLANTINVOICE.COMPANYCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT.COMPANYCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            --        AND PLANTINVOICELINE.INVOICELINENO = 
            --        CASE
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
            --            WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            --        END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
            AND SALESDOCUMENT2.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL3 GRANDTOTAL ON
            GRANDTOTAL.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT2.PROVISIONALCODE
            AND GRANDTOTAL.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT2.COMPANYCODE
            AND GRANDTOTAL.SALDOCPROVISIONALCOUNTERCODE = SALESDOCUMENT2.PROVISIONALCOUNTERCODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.COMPANYCODE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_PO_INVOICE.COMPANYCODE
            AND PLANTINVOICE.DIVISIONCODE = ITXVIEW_PO_INVOICE.DIVISIONCODE
        WHERE
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE BETWEEN CURRENT DATE - 2 MONTH AND NOW()
        GROUP BY
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            SALESORDER.PAYMENTCUSTOMERUNIQUEID,
            SALESORDER.PAYMENTCUSTOMERCODE,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            --            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESDOCUMENT2.PROVISIONALCODE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            --            GRANDTOTAL.ITEMTYPECODE,
            GRANDTOTAL.TOTAL_JML_HARGA_KG,
            GRANDTOTAL.TOTAL_JML_HARGA_YD,
            GRANDTOTAL.TOTAL_JML_HARGA_M,
            GRANDTOTAL.TOTAL_JML_HARGA_UN,
            GRANDTOTAL.TOTAL_KG,
            GRANDTOTAL.TOTAL_YARD ,
            GRANDTOTAL.TOTAL_METER ,
            GRANDTOTAL.TOTAL_UNIT,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            --			        ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE
    )
    --                   AND  Invoice = 'DMU24030746'
    --            WHERE NO_SJ ='POD2308114'
GROUP BY
    Invoice,
    NO_SJ,
    tgl_inv,
    tanggal_inv,
    issue_date,
    tgl_create,
    jenis_order,
    kode_bep,
    due,
    DUEKB,
    DATEKB,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    code_payment,
    payment_terms,
    unit,
    biaya_tambahan,
    JUMLAH_HARGA,
    BERAT_LAIN,
    BERAT,
    rate,
    curr,
    desc_kain,
    ppn,
    id_bep,
    nama_bep,
    kode_cus,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_2A source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_2a AS
SELECT
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    due,
    DUEKB,
    DATEKB,
    jenis_order,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN '0'
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        AND id_bep <> 813
        OR kode_cus = 'BIHQSS' THEN '0'
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN '0'
        ELSE NPWP
    END AS NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    CASE
        WHEN NO_PO IS NULL THEN 'Nomor PO Header dan Line Kosong'
        ELSE NO_PO
    END AS NO_PO,
    NO_CI,
    desc_kain,
    code_payment,
    curr,
    CASE
        WHEN ppn = 'S03' THEN 0.11
        WHEN ppn = 'S01' THEN 0.11
        WHEN ppn = 'S13' THEN 0.11
        WHEN ppn = 'N01' THEN 0
        ELSE 0
    END AS ppn,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    BERAT,
    BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE (JUMLAH_HARGA) + (biaya_tambahan)
    END AS DPP,
    floor((JUMLAH_HARGA + biaya_tambahan) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(floor((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(JUMLAH_HARGA + biaya_tambahan + CASE WHEN PPN = 'S01' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S03' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 WHEN PPN = 'S13' THEN (JUMLAH_HARGA + biaya_tambahan) * 0.11 ELSE 0 END, 2)
    END AS TOTAL,
    floor((JUMLAH_HARGA + biaya_tambahan) * rate) + CASE
        WHEN PPN = 'S01' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S03' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        WHEN PPN = 'S13' THEN floor(FLOOR((JUMLAH_HARGA + biaya_tambahan) * rate) * 0.11)
        ELSE 0
    END AS TOTAL_BC,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE
FROM
    (
        SELECT
            DISTINCT trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENT2.PROVISIONALCODE AS NO_SJ,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            PLANTINVOICE.CHALLANDATE AS DATEKB,
            PLANTINVOICE.LRDATE AS DUEKB,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            SALESORDER.PAYMENTCUSTOMERUNIQUEID,
            SALESORDER.PAYMENTCUSTOMERCODE,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            REPLACE(ITXVIEW_PO_INVOICE.NO_PO, '''', ' ') AS NO_PO,
            PLANTINVOICE.STATUS AS NO_CI,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            GRANDTOTAL.TOTAL_KG AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_YARD
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_METER
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                    'un', 'Lot'
                ) THEN GRANDTOTAL.TOTAL_UNIT
            END AS BERAT_LAIN,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN GRANDTOTAL.TOTAL_JML_HARGA_KG
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN GRANDTOTAL.TOTAL_JML_HARGA_YD
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN GRANDTOTAL.TOTAL_JML_HARGA_M
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN(
                        'un', 'Lot'
                    ) THEN GRANDTOTAL.TOTAL_JML_HARGA_UN
                END
            END AS JUMLAH_HARGA,
            PLANTINVOICE.ORDERCURRENCYCODE
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
            AND PLANTINVOICE.COMPANYCODE = SALESORDER.COMPANYCODE
            AND PLANTINVOICE.CONTRACTNOCOUNTERCODE = SALESORDER.COUNTERCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
            AND PLANTINVOICE.COMPANYCODE = SALESDOCUMENT.COMPANYCODE
            AND PLANTINVOICE.SALINVOICEPRVCOUNTERCODE = SALESDOCUMENT.PROVISIONALCOUNTERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHOD.COMPANYCODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
            AND PLANTINVOICE.COMPANYCODE = PAYMENTMETHODIE.COMPANYCODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
            AND ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE = PLANTINVOICE.COMPANYCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT.COMPANYCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
            AND SALESDOCUMENT2.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
        LEFT JOIN ITXVIEW_INVOICE_GRANDTOTAL3 GRANDTOTAL ON
            GRANDTOTAL.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT2.PROVISIONALCODE
            AND GRANDTOTAL.SALESDOCUMENTCOMPANYCODE = SALESDOCUMENT2.COMPANYCODE
            AND GRANDTOTAL.SALDOCPROVISIONALCOUNTERCODE = SALESDOCUMENT2.PROVISIONALCOUNTERCODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.COMPANYCODE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
            AND PLANTINVOICE.COMPANYCODE = ITXVIEW_PO_INVOICE.COMPANYCODE
            AND PLANTINVOICE.DIVISIONCODE = ITXVIEW_PO_INVOICE.DIVISIONCODE
        GROUP BY
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            SALESORDER.PAYMENTCUSTOMERUNIQUEID,
            SALESORDER.PAYMENTCUSTOMERCODE,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESDOCUMENT2.PROVISIONALCODE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            GRANDTOTAL.TOTAL_JML_HARGA_KG,
            GRANDTOTAL.TOTAL_JML_HARGA_YD,
            GRANDTOTAL.TOTAL_JML_HARGA_M,
            GRANDTOTAL.TOTAL_JML_HARGA_UN,
            GRANDTOTAL.TOTAL_KG,
            GRANDTOTAL.TOTAL_YARD ,
            GRANDTOTAL.TOTAL_METER ,
            GRANDTOTAL.TOTAL_UNIT,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE
    )
WHERE
    Invoice = 'CA24010005'
GROUP BY
    Invoice,
    NO_SJ,
    tgl_inv,
    tanggal_inv,
    issue_date,
    tgl_create,
    jenis_order,
    kode_bep,
    due,
    DUEKB,
    DATEKB,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    code_payment,
    payment_terms,
    unit,
    biaya_tambahan,
    JUMLAH_HARGA,
    BERAT_LAIN,
    BERAT,
    rate,
    curr,
    desc_kain,
    ppn,
    id_bep,
    nama_bep,
    kode_cus,
    PAYMENTCUSTOMERUNIQUEID,
    TAXTEMPLATECODE,
    PAYMENTCUSTOMERCODE;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_DETAIL source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_DETAIL AS
SELECT
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    due,
    DUEKB,
    DATEKB,
    jenis_order,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN '0'
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        OR kode_cus = 'BIHQSS' THEN '0'
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN '0'
        ELSE NPWP
    END AS NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    CASE
        WHEN NO_PO IS NULL THEN 'Nomor PO Header dan Line Kosong'
        ELSE NO_PO
    END AS NO_PO,
    NO_CI,
    desc_kain,
    code_payment,
    curr,
    CASE
        WHEN ppn = 'S03' THEN 0.11
        WHEN ppn = 'S01' THEN 0.11
        WHEN ppn = 'S13' THEN 0.11
        WHEN ppn = 'N01' THEN 0
        ELSE 0
    END AS ppn,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    harga_foc,
    SUM(BERAT) - (foc_kg) AS Berat,
    SUM(BERAT_LAIN) - (foc_yard) AS BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE SUM(JUMLAH_HARGA) + (biaya_tambahan) - (harga_foc)
    END AS DPP,
    floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 WHEN PPN = 'S03' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 WHEN PPN = 'S13' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S03' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S13' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE SUM(JUMLAH_HARGA) + biaya_tambahan - (harga_foc) + CASE
            WHEN PPN = 'S01' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            WHEN PPN = 'S03' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            WHEN PPN = 'S13' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            ELSE 0
        END
    END AS TOTAL,
    floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * rate) + CASE
        WHEN PPN = 'S01' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S03' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S13' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        ELSE 0
    END AS TOTAL_BC
FROM
    (
        SELECT
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            PLANTINVOICE.CHALLANDATE AS DATEKB,
            PLANTINVOICE.LRDATE AS DUEKB,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            ITXVIEW_PO_INVOICE.NO_PO AS NO_PO,
            PLANTINVOICE.STATUS AS NO_CI,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_kg) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_kg)
            END AS foc_kg,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_yard) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_yard)
            END AS foc_yard,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.QUANTITY_FOC) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.QUANTITY_FOC)
            END AS HARGA_FOC,
            SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                    ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                END
            END AS BERAT_LAIN,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                        ELSE round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    END
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                        ELSE floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    END
                END
            END AS JUMLAH_HARGA
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
        LEFT JOIN ITXVIEW_FOC_INVOICE ITXVIEW_FOC_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_FOC_INVOICE.NO_INVOICE
        GROUP BY
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            ITXVIEW_FOC_INVOICE.foc_kg,
            ITXVIEW_FOC_INVOICE.foc_yard,
            ITXVIEW_FOC_INVOICE.QUANTITY_FOC,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE
    )
GROUP BY
    Invoice,
    NO_SJ,
    tgl_inv,
    tanggal_inv,
    issue_date,
    tgl_create,
    jenis_order,
    kode_bep,
    due,
    DUEKB,
    DATEKB,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    code_payment,
    payment_terms,
    unit,
    biaya_tambahan,
    harga_foc,
    foc_kg,
    foc_yard,
    rate,
    curr,
    desc_kain,
    ppn,
    id_bep,
    nama_bep,
    kode_cus;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_DETAIL2 source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_DETAIL2 AS
SELECT
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    due,
    DUEKB,
    DATEKB,
    jenis_order,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN '0'
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        OR kode_cus = 'BIHQSS' THEN '0'
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN '0'
        ELSE NPWP
    END AS NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    CASE
        WHEN NO_PO IS NULL THEN 'Nomor PO Header dan Line Kosong'
        ELSE NO_PO
    END AS NO_PO,
    NO_CI,
    desc_kain,
    code_payment,
    curr,
    CASE
        WHEN ppn = 'S03' THEN 0.11
        WHEN ppn = 'S01' THEN 0.11
        WHEN ppn = 'S13' THEN 0.11
        WHEN ppn = 'N01' THEN 0
        ELSE 0
    END AS ppn,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    harga_foc,
    SUM(BERAT) - (foc_kg) AS Berat,
    SUM(BERAT_LAIN) - (foc_yard) AS BERAT_LAIN,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE SUM(JUMLAH_HARGA) + (biaya_tambahan) - (harga_foc)
    END AS DPP,
    floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * rate) AS DPP_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE round(CASE WHEN PPN = 'S01' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 WHEN PPN = 'S03' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 WHEN PPN = 'S13' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 ELSE 0 END, 2)
    END AS VAT,
    CASE
        WHEN PPN = 'S01' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S03' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S13' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        ELSE 0
    END AS VAT_BC,
    CASE
        WHEN curr = 'IDR' THEN 0
        ELSE SUM(JUMLAH_HARGA) + biaya_tambahan - (harga_foc) + CASE
            WHEN PPN = 'S01' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            WHEN PPN = 'S03' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            WHEN PPN = 'S13' THEN SUM((JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11
            ELSE 0
        END
    END AS TOTAL,
    floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * rate) + CASE
        WHEN PPN = 'S01' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S03' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        WHEN PPN = 'S13' THEN floor((SUM(JUMLAH_HARGA) + biaya_tambahan - harga_foc) * 0.11 * rate)
        ELSE 0
    END AS TOTAL_BC
FROM
    (
        SELECT
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            PLANTINVOICE.CHALLANDATE AS DATEKB,
            PLANTINVOICE.LRDATE AS DUEKB,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            ITXVIEW_PO_INVOICE.NO_PO AS NO_PO,
            PLANTINVOICE.STATUS AS NO_CI,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            trim(PAYMENTMETHODIE.NOOFDAYS) AS payment_terms,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_kg) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_kg)
            END AS foc_kg,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_yard) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_yard)
            END AS foc_yard,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.QUANTITY_FOC) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.QUANTITY_FOC)
            END AS HARGA_FOC,
            SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                    ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                END
            END AS BERAT_LAIN,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                        ELSE round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    END
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                        ELSE floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    END
                END
            END AS JUMLAH_HARGA
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
        LEFT JOIN ITXVIEW_FOC_INVOICE ITXVIEW_FOC_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_FOC_INVOICE.NO_INVOICE
        GROUP BY
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            ITXVIEW_FOC_INVOICE.foc_kg,
            ITXVIEW_FOC_INVOICE.foc_yard,
            ITXVIEW_FOC_INVOICE.QUANTITY_FOC,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE
    )
GROUP BY
    Invoice,
    NO_SJ,
    tgl_inv,
    tanggal_inv,
    issue_date,
    tgl_create,
    jenis_order,
    kode_bep,
    due,
    DUEKB,
    DATEKB,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    code_payment,
    payment_terms,
    unit,
    biaya_tambahan,
    harga_foc,
    foc_kg,
    foc_yard,
    rate,
    curr,
    desc_kain,
    ppn,
    id_bep,
    nama_bep,
    kode_cus;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP AS
SELECT
    INVOICE,
    CASE
        WHEN CURR = 'IDR' THEN round((DPP_BC), 2)
        ELSE round((DPP), 2)
    END AS DPP_BC
FROM
    ITXVIEW_INVOICE_NOINVOICE_DETAIL;


-- DB2ADMIN.ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP2 source

CREATE VIEW ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP2 AS
SELECT
    INVOICE,
    CASE
        WHEN CURR = 'IDR' THEN round((DPP_BC), 2)
        ELSE round((DPP), 2)
    END AS DPP_BC
FROM
    ITXVIEW_INVOICE_NOINVOICE_DETAIL2;


-- DB2ADMIN.ITXVIEW_INVOICE_SJ source

CREATE VIEW ITXVIEW_INVOICE_SJ AS
    SELECT
            DISTINCT 
            ITXVIEW_ALLOCATION_2.ITEMTYPECODE,
        	trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            CASE 
            	WHEN trim(SALESORDER.COUNTERCODE) = 'CAPITAL'
        AND trim(ITXVIEW_ALLOCATION_2.ITEMTYPECODE) IN (
            'KFF', 'KGF'
        )
            		THEN trim(SALESORDER.COUNTERCODE)|| trim(ITXVIEW_ALLOCATION_2.ITEMTYPECODE)
        ELSE '-'
    END AS JENIS_ORDER_CAPKFF,
    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
          	trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit
FROM
            PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN ITXVIEW_ALLOCATION_2 ITXVIEW_ALLOCATION_2 ON
             ITXVIEW_ALLOCATION_2.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND ITXVIEW_ALLOCATION_2.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND ITXVIEW_ALLOCATION_2.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
    --             WHERE SALESDOCUMENT2.PROVISIONALCODE = 'POD2300364'
GROUP BY
            PLANTINVOICE.CODE,
            PLANTINVOICE.STATUS,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICE.CONTRACTNOCODE,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESORDER.COUNTERCODE,
            ITXVIEW_ALLOCATION_2.ITEMTYPECODE;


-- DB2ADMIN.ITXVIEW_INVOICE_SURATJALAN source

CREATE VIEW ITXVIEW_INVOICE_SURATJALAN AS
SELECT
    code_allocation,
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    DUE,
    DATEKB,
    DUEKB,
    curr,
    JENIS_ORDER,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    DESC_KAIN,
    PPN,
    code_payment,
    payment_terms,
    unit,
    rate,
    CASE
        WHEN code_allocation IN (
            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
        ) THEN PRICE_USD * 0
        ELSE PRICE_USD
    END AS PRICE_USD,
    CASE
        WHEN code_allocation IN (
            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
        ) THEN PRICE_IDR * 0
        ELSE PRICE_IDR
    END AS PRICE_IDR,
    TOTAL_USD - total_kurangin_biaya AS TOTAL_USD,
    CASE
        WHEN code_allocation IN (
            '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
        ) THEN TOTAL_IDR * 0
        ELSE TOTAL_IDR
    END AS TOTAL_IDR,
    biaya_tambahan,
    foc_kg,
    foc_yard,
    HARGA_FOC,
    DPP_BC,
    BERAT,
    BERAT_LAIN,
    harga_satuan,
    JUMLAH_HARGA,
    KODE_JK,
    ITEMDESCRIPTION,
    WARNA
FROM
    (
        SELECT
            ALLOCATION.CODE AS code_allocation,
            trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            PLANTINVOICE.CHALLANDATE AS DATEKB,
            PLANTINVOICE.LRDATE AS DUEKB,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            REPLACE(ITXVIEW_PO_INVOICE.NO_PO, '''', ' ') AS NO_PO,
            PLANTINVOICE.STATUS AS NO_CI,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            PLANTINVOICELINE.TAXTEMPLATECODE AS PPN,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            CASE
                WHEN trim(PAYMENTMETHODIE.NOOFDAYS) = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
                ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
            END AS payment_terms,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'USD' THEN SALESDOCUMENTLINE.price
                ELSE 0
            END AS PRICE_USD,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'IDR' THEN SALESDOCUMENTLINE.price
                ELSE floor( SALESDOCUMENTLINE.price * PLANTINVOICE.EXCHANGERATEOFCONTRACT )
            END AS PRICE_IDR,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                        ELSE round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    END
                END
                ELSE 0
            END AS TOTAL_USD,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                        ELSE floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    END
                END
                ELSE CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                        ELSE floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    END
                END
            END AS TOTAL_IDR,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan)
            END AS biaya_tambahan,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_kg) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_kg)
            END AS foc_kg,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.foc_yard) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.foc_yard)
            END AS foc_yard,
            CASE
                WHEN (ITXVIEW_FOC_INVOICE.QUANTITY_FOC) IS NULL THEN 0
                ELSE (ITXVIEW_FOC_INVOICE.QUANTITY_FOC)
            END AS HARGA_FOC,
            ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP.DPP_BC AS DPP_BC,
            SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                    ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                END
            END AS BERAT_LAIN,
            CASE
                WHEN ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))* round(SALESDOCUMENTLINE.price, 3), 2)
                ELSE 0
            END AS total_kurangin_biaya,
            round(SALESDOCUMENTLINE.price, 2) AS harga_satuan,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                        ELSE round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 3), 2)
                    END
                END
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                        ELSE floor(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2)) * round(SALESDOCUMENTLINE.price, 2))
                    END
                END
            END AS JUMLAH_HARGA,
            TRIM(SALESDOCUMENTLINE.EXTERNALITEM) AS KODE_JK,
            CASE
                WHEN PRODUCT.LONGDESCRIPTION IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02) || TRIM(SALESDOCUMENTLINE.SUBCODE03) || ' - ' || SALESDOCUMENTLINE.ITEMDESCRIPTION
                ELSE TRIM(SALESDOCUMENTLINE.SUBCODE02) || TRIM(SALESDOCUMENTLINE.SUBCODE03) || ' - ' || PRODUCT.LONGDESCRIPTION
            END AS ITEMDESCRIPTION,
            i.WARNA
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN ITXVIEW_PO_INVOICE ITXVIEW_PO_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_PO_INVOICE.NO_INVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN ITXVIEW_INVOICE_BIAYATAMBAHAN ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN.no_invoice
        LEFT JOIN ITXVIEW_FOC_INVOICE ITXVIEW_FOC_INVOICE ON
            PLANTINVOICE.CODE = ITXVIEW_FOC_INVOICE.NO_INVOICE
        LEFT JOIN ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP.INVOICE
        LEFT JOIN PRODUCT PRODUCT ON
            PRODUCT.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND PRODUCT.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND PRODUCT.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND PRODUCT.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND PRODUCT.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND PRODUCT.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND PRODUCT.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND PRODUCT.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND PRODUCT.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
            AND PRODUCT.SUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
            AND PRODUCT.SUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
        LEFT JOIN ITXVIEWCOLOR i ON
            i.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND i.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND i.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND i.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND i.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND i.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND i.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND i.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND i.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
            AND i.SUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
            AND i.SUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
        GROUP BY
            ALLOCATION.CODE,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            ITXVIEW_PO_INVOICE.NO_PO,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.CODE,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN.biaya_tambahan,
            ITXVIEW_INVOICE_NOINVOICE_DETAIL_DPP.DPP_BC,
            ITXVIEW_FOC_INVOICE.foc_kg,
            ITXVIEW_FOC_INVOICE.foc_yard,
            ITXVIEW_FOC_INVOICE.QUANTITY_FOC,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            SALESDOCUMENTLINE.price,
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            PRODUCT.LONGDESCRIPTION,
            SALESDOCUMENTLINE.EXTERNALITEM,
            i.WARNA
    );


-- DB2ADMIN.ITXVIEW_INVOICE_SURATJALAN2 source

CREATE VIEW ITXVIEW_INVOICE_SURATJALAN2 AS
SELECT
    DISTINCT trim(PLANTINVOICE.CODE) AS Invoice,
    SALESDOCUMENT2.PROVISIONALCODE AS NO_SJ,
    SALESDOCUMENT2.PROVISIONALCOUNTERCODE AS countercode,
    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
    SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
    PLANTINVOICE.INVOICEDATE AS tgl_buat,
    CASE
        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
            ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
        END
        ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
    END AS tanggal_inv,
    PLANTINVOICE.CREATIONDATE AS tgl_create,
    CASE
        WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
            WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
        END
        ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
    END AS DUE,
    PLANTINVOICE.CHALLANDATE AS DATEKB,
    PLANTINVOICE.LRDATE AS DUEKB,
    trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
    trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
    trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
    BUSINESSPARTNER.NUMBERID AS id_bep,
    BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
    CASE
        WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
        ELSE ADDRESS.CODE
    END AS kode_cus,
    CASE
        WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
        ELSE trim(ADDRESS.ADDRESSEE)
    END AS nama_cus,
    CASE
        WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
            ELSE trim(ADDRESS.ADDRESSLINE4)
        END
        ELSE CASE
            WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
            ELSE trim(ADDRESS.ADDRESSLINE4)
        END
    END AS NPWP,
    CASE
        WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
        ELSE PLANTINVOICE.BLNUMBER
    END AS FAKTUR_PAJAK,
    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
    PLANTINVOICE.STATUS AS NO_CI,
    REPLACE(ITXVIEW_PO_INVOICE2.NO_PO, '''', ' ') AS NO_PO,
    CASE
        WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
        ELSE '-'
    END AS DESC_KAIN,
    trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
    CASE
        WHEN trim(PAYMENTMETHODIE.NOOFDAYS) = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
        ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
    END AS payment_terms,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
    LISTAGG(
        DISTINCT(
            TRIM(ia.ITEMTYPECODE)
        ),
        ', '
    ) AS ITEMTYPEAFICODE,
    CASE
        WHEN PLANTINVOICE.CODE = 'CA23120001' THEN salesorderline.ITEMDESCRIPTION
        ELSE ia.JENIS_KAIN
    END AS JENIS_KAIN ,
    ia.USERPRIMARYQUANTITY,
    ia.USERSECONDARYQUANTITY ,
    ia.BASESECONDARYQUANTITY ,
    ia.QTY_PCS,
    ia.LOTCODE,
    ia.DECOSUBCODE04,
    CASE
        WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan) IS NULL THEN 0
        ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan)
    END AS biaya_tambahan
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    PLANTINVOICE.CODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
LEFT JOIN ADDRESS ADDRESS ON
    ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
    AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
    SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
    AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE2 ON
    SALESDOCUMENTLINE2.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
    AND SALESDOCUMENTLINE2.ORDERLINE = SALESDOCUMENTLINE.PREVIOUSORDERLINE
LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN2 ITXVIEW_INVOICE_BIAYATAMBAHAN2 ON
    PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN2.no_invoice
LEFT JOIN ITXVIEW_PO_INVOICE2 ITXVIEW_PO_INVOICE2 ON
    ITXVIEW_PO_INVOICE2.NO_INVOICE = PLANTINVOICE.code
LEFT JOIN ITXVIEW_ALLOCATION_2 ia ON
    SALESDOCUMENTLINE2.SALESDOCUMENTPROVISIONALCODE = ia.SALESDOCUMENTPROVISIONALCODE
    AND SALESDOCUMENTLINE2.SALDOCPROVISIONALCOUNTERCODE = ia.SALDOCPROVISIONALCOUNTERCODE
    AND SALESDOCUMENTLINE2.SUBCODE01 = ia.DECOSUBCODE01
    AND SALESDOCUMENTLINE2.SUBCODE02 = ia.DECOSUBCODE02
    AND SALESDOCUMENTLINE2.SUBCODE03 = ia.DECOSUBCODE03
    AND SALESDOCUMENTLINE2.SUBCODE04 = ia.DECOSUBCODE04
    AND SALESDOCUMENTLINE2.SUBCODE05 = ia.DECOSUBCODE05
    AND SALESDOCUMENTLINE2.SUBCODE06 = ia.DECOSUBCODE06
    AND SALESDOCUMENTLINE2.SUBCODE07 = ia.DECOSUBCODE07
    AND SALESDOCUMENTLINE2.SUBCODE08 = ia.DECOSUBCODE08
WHERE
    ia.ITEMTYPECODE IS NOT NULL
GROUP BY
    SALESDOCUMENT2.PROVISIONALCODE,
    SALESDOCUMENT2.PROVISIONALCOUNTERCODE,
    PLANTINVOICE.CODE,
    PLANTINVOICE.CHALLANDATE,
    PLANTINVOICE.LRDATE,
    PLANTINVOICE.STATUS,
    SALESORDER.CREATIONUSER,
    PLANTINVOICE.CREATIONUSER,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT2.GOODSISSUEDATE,
    SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
    PLANTINVOICE.CREATIONDATE,
    PAYMENTMETHOD.LONGDESCRIPTION,
    PAYMENTMETHODIE.CODE,
    PAYMENTMETHODIE.NOOFDAYS,
    PLANTINVOICE.CONTRACTNOCODE,
    PLANTINVOICE.ORDERCURRENCYCODE,
    ITXVIEW_PO_INVOICE2.NO_PO,
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
    SALESORDER.DESCRIPTION,
    SALESORDER.TEMPLATECODE,
    ADDRESS.ADDRESSEE,
    ADDRESS.TAXREGISTRATIONNUMBER,
    ADDRESS.ADDRESSLINE4,
    PLANTINVOICE.ORDERCURRENCYCODE,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT,
    ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan,
    PLANTINVOICE.BLNUMBER,
    PLANTINVOICE.ORDERCURRENCYCODE,
    PLANTINVOICE.INVOICEDATE,
    SALESORDER.DESCRIPTION,
    SALESORDER.TEMPLATECODE,
    SALESORDER.COUNTERCODE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    ADDRESS.CODE,
    SALESORDERLINE.ITEMDESCRIPTION,
    ia.JENIS_KAIN,
    ia.LOTCODE,
    ia.USERPRIMARYQUANTITY,
    ia.USERSECONDARYQUANTITY ,
    ia.DECOSUBCODE04,
    ia.BASESECONDARYQUANTITY ,
    ia.QTY_PCS;


-- DB2ADMIN.ITXVIEW_INVOICE_SURATJALAN3 source

CREATE VIEW ITXVIEW_INVOICE_SURATJALAN3 AS
SELECT
    DISTINCT
  	ITEMTYPECODE,
    DECOSUBCODE05,
    LOTCODE,
    EXAMINATIONAT,
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    tgl_buat,
    DUE,
    DATEKB,
    DUEKB,
    curr,
    JENIS_ORDER,
    JENIS_ORDER_CAPKFF,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    DESC_KAIN,
    code_payment,
    payment_terms,
    unit,
    rate,
    biaya_tambahan,
    price_usd,
    price_idr,
    sum(BERAT) AS BERAT,
    SUM(BERAT_LAIN) AS BERAT_LAIN,
    CASE
        WHEN trim(ORDERCURRENCYCODE) = 'USD' THEN CASE
            WHEN trim(unit) = 'kg' THEN round(SUM(BERAT) * round(PRICE_USD, 2), 2)
            WHEN trim(unit) = 'yd' THEN round(SUM(BERAT_LAIN) * round(PRICE_USD, 2), 2)
            WHEN trim(unit) = 'm' THEN round(SUM(BERAT_LAIN) * round(PRICE_USD, 2), 2)
            WHEN trim(unit) IN (
                'un', 'Lot'
            ) THEN round(SUM(BERAT_LAIN) * round(PRICE_USD, 2), 2)
        END
        WHEN trim(ORDERCURRENCYCODE) = 'IDR' THEN CASE
            WHEN trim(unit) = 'kg' THEN floor(SUM(BERAT) * round(price_idr, 2))
            WHEN trim(unit) = 'yd' THEN floor(SUM(BERAT_LAIN) * round(price_idr, 2))
            WHEN trim(unit) = 'm' THEN floor(SUM(BERAT_LAIN) * round(price_idr, 2))
            WHEN trim(unit) IN (
                'un', 'Lot'
            )
            AND Invoice = 'CA23120001' THEN floor(SUM(BERAT_LAIN) * round(price_idr, 2))
            WHEN trim(unit) IN (
                'un', 'Lot'
            ) THEN floor(SUM(BERAT_LAIN) * round(price_idr, 2))
        END
    END AS JUMLAH_HARGA,
    CASE
        WHEN trim(ORDERCURRENCYCODE) = 'USD' THEN CASE
            WHEN trim(unit) = 'kg' THEN round( SUM(BERAT) * round( PRICE_USD, 2 ), 2 )
            WHEN trim(unit) = 'yd' THEN round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )
            WHEN trim(unit) = 'm' THEN round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )
            WHEN trim(unit) IN (
                'un', 'Lot'
            ) THEN round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )
        END
        ELSE 0
    END AS TOTAL_USD,
    CASE
        WHEN trim(ORDERCURRENCYCODE) = 'IDR' THEN CASE
            WHEN trim(unit) = 'kg' THEN floor(round(SUM(BERAT) * round( price, 2 ), 2))
            WHEN trim(unit) = 'yd' THEN floor(round(SUM(BERAT_LAIN) * round( price, 2 ), 2))
            WHEN trim(unit) = 'm' THEN floor(round(SUM(BERAT_LAIN) * round( price, 2 ), 2))
            WHEN trim(unit) IN (
                'un', 'Lot'
            )
            AND Invoice = 'CA23120001' THEN floor(round(SUM(BERAT_LAIN) * round( price, 2 ), 2))
            WHEN trim(unit) IN (
                'un', 'Lot'
            ) THEN floor(round(SUM(BERAT_LAIN) * round( price, 2 ), 2))
        END
        ELSE CASE
            WHEN trim(unit) = 'kg' THEN floor(round( SUM(BERAT) * round( PRICE_USD, 2 ), 2 )* rate)
            WHEN trim(unit) = 'yd' THEN floor(round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )* rate)
            WHEN trim(unit) = 'm' THEN floor(round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )* rate)
            WHEN trim(unit) IN (
                'un', 'Lot'
            ) THEN floor(round( SUM(BERAT_LAIN) * round(PRICE_USD, 2 ), 2 )* rate)
        END
    END AS TOTAL_IDR,
    harga_satuan,
    KODE_JK,
    ITEMDESCRIPTION,
    WARNA
FROM
    (
        SELECT
            DISTINCT 
            ITXVIEW_ALLOCATION_2.ITEMTYPECODE,
            ITXVIEW_ALLOCATION_2.LOTCODE,
            ITXVIEW_ALLOCATION_2.DECOSUBCODE04,
            ITXVIEW_ALLOCATION_2.DECOSUBCODE05,
            PLANTINVOICE.EXAMINATIONAT,
            trim(PLANTINVOICE.CODE) AS Invoice,
            SALESDOCUMENTLINE.PREVIOUSCODE AS NO_SJ,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            PLANTINVOICE.INVOICEDATE AS tgl_buat,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            PLANTINVOICE.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            PLANTINVOICE.CHALLANDATE AS DATEKB,
            PLANTINVOICE.LRDATE AS DUEKB,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            CASE
                WHEN trim(SALESORDER.COUNTERCODE) = 'CAPITAL'
                AND trim(ITXVIEW_ALLOCATION_2.ITEMTYPECODE) IN (
                    'KFF', 'KGF'
                )
            		THEN trim(SALESORDER.COUNTERCODE)|| trim(ITXVIEW_ALLOCATION_2.ITEMTYPECODE)
                ELSE '-'
            END AS JENIS_ORDER_CAPKFF,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            PLANTINVOICE.STATUS AS NO_CI,
            REPLACE(ITXVIEW_PO_INVOICE2.NO_PO, '''', ' ') AS NO_PO,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            CASE
                WHEN trim(PAYMENTMETHODIE.NOOFDAYS) = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
                ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
            END AS payment_terms,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'USD' THEN ITXVIEW_ALLOCATION_2.price
                ELSE 0
            END AS PRICE_USD,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'IDR' THEN ITXVIEW_ALLOCATION_2.price
                ELSE floor( ITXVIEW_ALLOCATION_2.price * PLANTINVOICE.EXCHANGERATEOFCONTRACT )
            END AS PRICE_IDR,
            ITXVIEW_ALLOCATION_2.price AS price,
            CASE
                WHEN (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan) IS NULL THEN 0
                ELSE (ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan)
            END AS biaya_tambahan,
            ITXVIEW_ALLOCATION_2.USERPRIMARYQUANTITY AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN ITXVIEW_ALLOCATION_2.USERSECONDARYQUANTITY
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN ITXVIEW_ALLOCATION_2.USERSECONDARYQUANTITY
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round(ITXVIEW_ALLOCATION_2.BASESECONDARYQUANTITY, 2)
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) IN (
                    'un', 'Lot'
                ) THEN round(ITXVIEW_ALLOCATION_2.QTY_PCS, 2)
            END AS BERAT_LAIN,
            round(ITXVIEW_ALLOCATION_2.price, 2) AS harga_satuan,
            TRIM(SALESDOCUMENTLINE.EXTERNALITEM) AS KODE_JK,
            trim(PLANTINVOICE.ORDERCURRENCYCODE) AS ORDERCURRENCYCODE,
            CASE
                WHEN PLANTINVOICE.CODE = 'CA23120001' THEN TRIM(SALESDOCUMENTLINE.SUBCODE02) || TRIM(SALESDOCUMENTLINE.SUBCODE03) || ' - ' || PRODUCT.LONGDESCRIPTION || ' ' || RIGHT(SALESORDERLINE.ITEMDESCRIPTION, 12)
                WHEN PRODUCT.LONGDESCRIPTION IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02) || TRIM(SALESDOCUMENTLINE.SUBCODE03) || ' - ' || SALESDOCUMENTLINE.ITEMDESCRIPTION
                ELSE TRIM(SALESDOCUMENTLINE.SUBCODE02) || TRIM(SALESDOCUMENTLINE.SUBCODE03) || ' - ' || PRODUCT.LONGDESCRIPTION
            END AS ITEMDESCRIPTION,
            i.WARNA
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN ITXVIEW_ALLOCATION_2 ITXVIEW_ALLOCATION_2 ON
             ITXVIEW_ALLOCATION_2.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND ITXVIEW_ALLOCATION_2.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
            AND ITXVIEW_ALLOCATION_2.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN ITXVIEW_INVOICE_BIAYATAMBAHAN2 ITXVIEW_INVOICE_BIAYATAMBAHAN2 ON
            PLANTINVOICE.CODE = ITXVIEW_INVOICE_BIAYATAMBAHAN2.no_invoice
        LEFT JOIN PRODUCT PRODUCT ON
            PRODUCT.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND PRODUCT.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND PRODUCT.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND PRODUCT.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND PRODUCT.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND PRODUCT.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND PRODUCT.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND PRODUCT.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND PRODUCT.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
            AND PRODUCT.SUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
            AND PRODUCT.SUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
        LEFT JOIN ITXVIEWCOLOR i ON
            i.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND i.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND i.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND i.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND i.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND i.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND i.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND i.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND i.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
            AND i.SUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
            AND i.SUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
        LEFT JOIN ITXVIEW_PO_INVOICE2 ITXVIEW_PO_INVOICE2 ON
            ITXVIEW_PO_INVOICE2.NO_INVOICE = PLANTINVOICE.code
            -- WHERE SALESDOCUMENT2.PROVISIONALCODE = 'ESP2300409'
        GROUP BY
            ITXVIEW_ALLOCATION_2.LOTCODE,
            ITXVIEW_ALLOCATION_2.DECOSUBCODE04,
            ITXVIEW_ALLOCATION_2.DECOSUBCODE05,
            PLANTINVOICE.EXAMINATIONAT,
            PLANTINVOICE.CODE,
            PLANTINVOICE.CHALLANDATE,
            PLANTINVOICE.LRDATE,
            PLANTINVOICE.STATUS,
            SALESORDER.CREATIONUSER,
            PLANTINVOICE.CREATIONUSER,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            ITXVIEW_ALLOCATION_2.price,
            ITXVIEW_ALLOCATION_2.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            SALESDOCUMENT2.PROVISIONALDOCUMENTDATE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICE.CREATIONDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.CODE,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            ITXVIEW_PO_INVOICE2.NO_PO,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            ADDRESS.ADDRESSLINE4,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            ITXVIEW_INVOICE_BIAYATAMBAHAN2.biaya_tambahan,
            PLANTINVOICE.BLNUMBER,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.INVOICEDATE,
            SALESORDER.DESCRIPTION,
            SALESORDER.TEMPLATECODE,
            SALESORDER.COUNTERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            BUSINESSPARTNER.NUMBERID,
            BUSINESSPARTNER.LEGALNAME1,
            ADDRESS.CODE,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            PRODUCT.LONGDESCRIPTION,
            SALESDOCUMENTLINE.EXTERNALITEM,
            i.WARNA,
            ITXVIEW_ALLOCATION_2.USERPRIMARYQUANTITY ,
            ITXVIEW_ALLOCATION_2.USERSECONDARYQUANTITY,
            ITXVIEW_ALLOCATION_2.BASESECONDARYQUANTITY ,
            ITXVIEW_ALLOCATION_2.QTY_PCS,
            ITXVIEW_ALLOCATION_2.ITEMTYPECODE
    )
    --   WHERE NO_SJ IN ('POD2300364','POD2300815','POD2300816','POD2302088','POD2300404','POD2302024','POD2300871','POD2301288','POD2301465','PSM2300212','PSM2300217','POD2300291')
    --           AND DECOSUBCODE05 ='210311L'
    --        WHERE NO_SJ IN ('PCA2400002')
GROUP BY
    ITEMTYPECODE,
    LOTCODE,
    DECOSUBCODE04,
    DECOSUBCODE05,
    EXAMINATIONAT,
    Invoice,
    NO_SJ,
    tgl_inv,
    issue_date,
    tanggal_inv,
    tgl_create,
    tgl_buat,
    DUE,
    DATEKB,
    DUEKB,
    curr,
    JENIS_ORDER,
    JENIS_ORDER_CAPKFF,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    NPWP,
    FAKTUR_PAJAK,
    NO_ORDER,
    NO_PO,
    NO_CI,
    DESC_KAIN,
    code_payment,
    payment_terms,
    unit,
    rate,
    price,
    price_usd,
    price_idr,
    biaya_tambahan,
    harga_satuan,
    KODE_JK,
    ITEMDESCRIPTION,
    ORDERCURRENCYCODE,
    WARNA;


-- DB2ADMIN.ITXVIEW_INVOICE_SURATJALAN_CAPKFF source

CREATE VIEW ITXVIEW_INVOICE_SURATJALAN_CAPKFF AS
SELECT
    	INVOICE,
    	SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
    --        CODE,
    --        LOTCODE,
    tanggal_inv,
        id_bep,
        nama_bep,
       	kode_cus,
        nama_cus,
       	NPWP,
        FAKTUR_PAJAK,
        NO_ORDER,
        NO_CI,
        tgl_create,
        DUE,
       	DATEKB,
       	DUEKB,
        EXAMINATIONAT,
        JENIS_ORDER,
        JENIS_ORDER_CAPKFF,
        kode_bep,
    	harga_satuan,
    	SUM(USERPRIMARYQUANTITY) AS berat,
    	CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(USERPRIMARYQUANTITY)
        WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(USERSECONDARYQUANTITY)
        WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN SUM(BASESECONDARYQUANTITY)
        WHEN trim(PRICEUNITOFMEASURECODE) IN (
            'un', 'Lot'
        ) THEN SUM(qty_pcs)
    END AS BERAT_LAIN,
        PRICE_USD,
        PRICE_IDR,
        RATE,
        PRICE,
        CASE
        WHEN trim(CURR) = 'USD' THEN CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN round( SUM(USERPRIMARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN round( SUM(USERSECONDARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN round( SUM(BASESECONDARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) IN (
                'un', 'Lot'
            ) THEN round( SUM(qty_pcs) * PRICE, 2 )
        END
        WHEN trim(CURR) = 'IDR' THEN CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round( SUM(USERPRIMARYQUANTITY) * PRICE_IDR, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round( SUM(USERSECONDARYQUANTITY) * PRICE_IDR, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN floor(round( SUM(BASESECONDARYQUANTITY) * PRICE_IDR, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) IN (
                'un', 'Lot'
            ) THEN floor(round( SUM(qty_pcs) * PRICE_IDR, 2 ))
        END
    END AS JUMLAH_HARGA,
        CASE
        WHEN trim(CURR) = 'USD' THEN CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN round( SUM(USERPRIMARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN round( SUM(USERSECONDARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN round( SUM(BASESECONDARYQUANTITY) * PRICE, 2 )
            WHEN trim(PRICEUNITOFMEASURECODE) IN (
                'un', 'Lot'
            ) THEN round( SUM(qty_pcs) * PRICE, 2 )
        END
        ELSE 0
    END AS TOTAL_USD,
    CASE
        WHEN trim(CURR) = 'IDR' THEN CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round( SUM(USERPRIMARYQUANTITY) * PRICE, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round( SUM(USERSECONDARYQUANTITY) * PRICE, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN floor(round( SUM(BASESECONDARYQUANTITY) * PRICE, 2 ))
            WHEN trim(PRICEUNITOFMEASURECODE) IN (
                'un', 'Lot'
            ) THEN floor(round( SUM(qty_pcs) * PRICE, 2 ))
        END
        ELSE CASE
            WHEN trim(PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round( SUM(USERPRIMARYQUANTITY) * PRICE, 2 )* rate)
            WHEN trim(PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round( SUM(USERSECONDARYQUANTITY) * PRICE, 2 )* rate)
            WHEN trim(PRICEUNITOFMEASURECODE) = 'm' THEN floor(round(SUM(BASESECONDARYQUANTITY) * PRICE, 2 )* rate)
            WHEN trim(PRICEUNITOFMEASURECODE) IN (
                'un', 'Lot'
            ) THEN floor(round( SUM(qty_pcs) * PRICE, 2 )* rate)
        END
    END AS TOTAL_IDR,
        code_payment,
        payment_terms,
    	ORDERCODE,
        ORDERLINE,
        PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        SALDOCPROVISIONALCOUNTERCODE,
    	ITEMTYPECODE,
        CURR,
        ALLOCATIONDATE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
        JENIS_KAIN,
        DESC_KAIN,
        KODE_JK,
        NO_ITEM,
        EXTERNALREFERENCE,
        NO_SAP_CODE,
        CUSTOMER_CODE,
        WARNA
FROM
        (
        SELECT
            DISTINCT
            P.CODE AS INVOICE,
            s.SALESDOCUMENTPROVISIONALCODE,
            s.DLVSALORDERLINESALESORDERCODE,
            ALLOCATION.CODE AS CODE,
            iasp.itemelementcode,
            iasp.LOTCODE,
            p.ORDERCURRENCYCODE AS CURR,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERSECONDARYUSEDQUANTITY
            END USERSECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.USERPRIMARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE iasp.USERPRIMARYQUANTITY
            END USERPRIMARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP'
                AND iasp.BASESECONDARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASESECONDARYQUANTITY
                WHEN iasp.ITEMTYPECODE = 'CAP'
                AND iasp.BASEPRIMARYUOMCODE IN(
                    'Lot', 'un'
                ) THEN iasp.BASEPRIMARYQUANTITY
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE 0
            END qty_pcs,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN round(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                WHEN e.QUALITYREASONCODE = 'FOC'
                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE round(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YARD,
            CASE
                WHEN ALLOCATION.CODE IN (
                    '000000396037', '000000396038', '000000396042', '000000396043', '000000396047', '000000396048'
                ) THEN 0
                ELSE s.PRICE
            END AS PRICE,
            trim(PAYMENTMETHOD.LONGDESCRIPTION) AS code_payment,
            CASE
                WHEN trim(PAYMENTMETHODIE.NOOFDAYS) = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
                ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
            END AS payment_terms,
            p.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN p.ORDERCURRENCYCODE = 'USD' THEN s.PRICE
                ELSE 0
            END AS PRICE_USD,
            CASE
                WHEN p.ORDERCURRENCYCODE = 'IDR' THEN s.PRICE
                ELSE floor( s.PRICE * p.EXCHANGERATEOFCONTRACT )
            END AS PRICE_IDR,
            s.PRICEUNITOFMEASURECODE,
            e.QUALITYREASONCODE,
            s.PREVIOUSCODE,
            s.SALDOCPROVISIONALCOUNTERCODE,
            ALLOCATION.ORDERCODE AS ORDERCODE,
            ALLOCATION.ORDERLINE AS ORDERLINE,
            --        ALLOCATION.PROJECTCODE AS PROJECTCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
            CASE
                WHEN ALLOCATION.ITEMTYPECODE = 'GYR' THEN s.ITEMDESCRIPTION
                ELSE PRODUCT.LONGDESCRIPTION
            END AS JENIS_KAIN,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            TRIM(s.EXTERNALITEM) AS KODE_JK,
            a.EXTERNALITEMCODE AS NO_ITEM,
            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            a.EXTERNALDRAWINGNUMBER AS NO_SAP_CODE,
            p.CONSIGNEECUSTOMERSUPPLIERCODE AS CUSTOMER_CODE,
            UPPER(i.WARNA)AS WARNA,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT2.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            BUSINESSPARTNER.NUMBERID AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN p.BLNUMBER IS NOT NULL THEN CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
                ELSE CASE
                    WHEN trim(ADDRESS.ADDRESSLINE4) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                    ELSE trim(ADDRESS.ADDRESSLINE4)
                END
            END AS NPWP,
            CASE
                WHEN p.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(p.CREATIONUSER)
                ELSE p.BLNUMBER
            END AS FAKTUR_PAJAK,
            trim(p.CONTRACTNOCODE) AS NO_ORDER,
            p.STATUS AS NO_CI,
            p.CREATIONDATE AS tgl_create,
            CASE
                WHEN trim(SALESDOCUMENT2.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NOT NULL THEN SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
                    ELSE SALESDOCUMENT2.PROVISIONALDOCUMENTDATE + PAYMENTMETHODIE.NOOFDAYS
                END
                ELSE SALESDOCUMENT2.GOODSISSUEDATE + PAYMENTMETHODIE.NOOFDAYS
            END AS DUE,
            p.CHALLANDATE AS DATEKB,
            p.LRDATE AS DUEKB,
            trim(SALESORDER.COUNTERCODE) AS JENIS_ORDER,
            CASE
                WHEN trim(SALESORDER.COUNTERCODE) = 'CAPITAL'
                AND trim(iasp.ITEMTYPECODE) IN (
                    'KFF', 'KGF'
                )
            		THEN trim(SALESORDER.COUNTERCODE)|| trim(iasp.ITEMTYPECODE)
                ELSE '-'
            END AS JENIS_ORDER_CAPKFF,
            p.EXAMINATIONAT,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            round(s.PRICE , 2) AS harga_satuan
        FROM
            PLANTINVOICE p
        LEFT JOIN SALESDOCUMENTLINE s3 ON
            p.CODE = s3.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN SALESORDER SALESORDER ON
            p.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENTLINE s ON
            s.ITEMTYPEAFICODE = s3.ITEMTYPEAFICODE
            AND s.SALESDOCUMENTPROVISIONALCODE = s3.PREVIOUSCODE
            AND s.ORDERLINE = s3.PREVIOUSORDERLINE
            AND s.SUBCODE01 = s3.SUBCODE01
            AND s.SUBCODE02 = s3.SUBCODE02
            AND s.SUBCODE03 = s3.SUBCODE03
            AND s.SUBCODE04 = s3.SUBCODE04
            AND s.SUBCODE05 = s3.SUBCODE05
            AND s.SUBCODE06 = s3.SUBCODE06
            AND s.SUBCODE07 = s3.SUBCODE07
            AND s.SUBCODE08 = s3.SUBCODE08
            AND s.SUBCODE09 = s3.SUBCODE09
            AND s.SUBCODE10 = s3.SUBCODE10
        LEFT JOIN ALLOCATION ALLOCATION ON
            ALLOCATION.ITEMTYPECODE = s.ITEMTYPEAFICODE
            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
            AND ALLOCATION.ORDERLINE = s.ORDERLINE
            AND ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = s.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = s.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = s.SUBCODE10
        LEFT JOIN PRODUCT PRODUCT ON
            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = PRODUCT.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = PRODUCT.SUBCODE10
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
            iasp.CODE = ALLOCATION.CODE
            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
        LEFT JOIN ELEMENTS e ON
            iasp.itemelementcode = e.CODE
        LEFT JOIN ITXVIEWCOLOR i ON
            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = ALLOCATION.ORDERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            p.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            p.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = p.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND
	    		ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND
	    		ALLOCATION.DESTINATIONTYPE = '7'
            --        	    		AND ALLOCATION.ORDERCODE ='PCA2400002'
            --                	    		AND p.CONSIGNEECUSTOMERSUPPLIERCODE ='C0001208'  
            --                	    		AND a.EXTERNALDRAWINGNUMBER IS NOT NULL
    )
WHERE
        USERPRIMARYQUANTITY <> 0
    AND JENIS_ORDER_CAPKFF IN (
        'CAPITALKFF', 'CAPITALKGF'
    )
GROUP BY
    	INVOICE,
        SALESDOCUMENTPROVISIONALCODE,
        DLVSALORDERLINESALESORDERCODE,
    --        CODE,
    --        LOTCODE,
    ORDERCODE,
        ORDERLINE,
    	PRICE,
     	PRICE_USD,
        PRICE_IDR,
        RATE,
        PRICEUNITOFMEASURECODE,
        PREVIOUSCODE,
        ALLOCATIONDATE,
        ITEMTYPECODE,
        SALDOCPROVISIONALCOUNTERCODE,
        DECOSUBCODE01,
        DECOSUBCODE02,
        DECOSUBCODE03,
        DECOSUBCODE04,
        DECOSUBCODE05,
        DECOSUBCODE06,
        DECOSUBCODE07,
        DECOSUBCODE08,
        CUSTOMERCODE,
    	JENIS_KAIN,
    	DESC_KAIN,
        KODE_JK,
        NO_ITEM,
        CURR,
        EXTERNALREFERENCE,
        NO_SAP_CODE,
        CUSTOMER_CODE,
        WARNA,
        tanggal_inv,
        id_bep,
        nama_bep,
       	kode_cus,
        nama_cus,
       	NPWP,
        FAKTUR_PAJAK,
        NO_ORDER,
        NO_CI,
        tgl_create,
      	code_payment,
        payment_terms,
        DUE,
       	DATEKB,
       	DUEKB,
        curr,
        JENIS_ORDER,
        JENIS_ORDER_CAPKFF,
       	EXAMINATIONAT,
        JENIS_ORDER,
        kode_bep,
    	harga_satuan;


-- DB2ADMIN.ITXVIEW_INV_FAKTUR source

CREATE VIEW ITXVIEW_INV_FAKTUR AS
SELECT
    PLANTINVOICE.CODE AS NO_INVOICE,
    PLANTINVOICE.INVOICEDATE AS TGL_FAKTUR,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT,
    PLANTINVOICE.TAXTEMPLATECODE,
    PLANTINVOICE.ORDERCURRENCYCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTCUSTOMERUNIQUEID,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE05,
    PAYMENTMETHOD.CODE,
    PAYMENTMETHOD.LONGDESCRIPTION,
    PAYMENTMETHODIE.NOOFDAYS,
    ALLOCATION.ALLOCATIONDATE,
    ALLOCATION.ORDERLINE,
    ALLOCATION.USERPRIMARYQUANTITY,
    ALLOCATION.USERSECONDARYQUANTITY,
    SALESORDER.CODE AS NO_SALESORDER,
    SALESORDER.DESCRIPTION,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS DESC_BRAND
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICE.CODE = PLANTINVOICELINE.PLANTINVOICECODE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERIE.CUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND ORDERPARTNERIE.CUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND ALLOCATION.DESTINATIONTYPE = '7'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PAYMENTMETHOD.CODE = PAYMENTMETHODIE.CODE;


-- DB2ADMIN.ITXVIEW_INV_RESEPCOLOR source

-- DB2ADMIN.ITXVIEW_INV_RESEPCOLOR source

CREATE VIEW ITXVIEW_INV_RESEPCOLOR AS
SELECT
    DISTINCT 
    SUBSTR(RECIPE.SUBCODE01, 1, LOCATE('/', RECIPE.SUBCODE01)-1) AS ARTIKEL,
    SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1, 7) AS NO_WARNA,
    SUBSTR(SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1), LOCATE('/', SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1))+ 1) AS CELUP,
    RECIPE.LONGDESCRIPTION,
    RECIPE.SUFFIXCODE,
    -- RECIPE.SHORTDESCRIPTION,
    A.CUSTOMER
    -- RECIPE.NUMBERID
FROM
    RECIPE RECIPE
LEFT JOIN (
        SELECT
            ADSTORAGE.UNIQUEID,
            ADSTORAGE.VALUESTRING AS CUSTOMER
        FROM
            ADSTORAGE ADSTORAGE
        WHERE
            ADSTORAGE.NAMENAME = 'OriginalCustomer'
            AND ADSTORAGE.VALUESTRING <> '1'
    ) A ON
    RECIPE.ABSUNIQUEID = A.UNIQUEID
WHERE
    RECIPE.ITEMTYPECODE = 'RFD'
    AND RECIPE.SUFFIXCODE = '001'
    --AND SUBSTR(SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1), LOCATE('/', SUBSTR(RECIPE.SUBCODE01, LOCATE('/', RECIPE.SUBCODE01)+ 1))+ 1) <> 'D'
    AND LOCATE('/', RECIPE.SUBCODE01) > 0;


-- DB2ADMIN.ITXVIEW_JENISBENANG source

CREATE VIEW ITXVIEW_JENISBENANG AS
SELECT
    b.NUMBERID,
    b.SUBCODE01,
    b.SUBCODE02,
    b.SUBCODE03,
    b.SUBCODE04,
    --    LISTAGG ('(' || TRIM(f.SUMMARIZEDDESCRIPTION) || ')' ) AS DESCRIP
    TRIM(b.LONGDESCRIPTION) AS DESCRIP
FROM
    BILLOFMATERIAL b
    --LEFT JOIN BOMCOMPONENT b2 ON b2.BILLOFMATERIALNUMBERID = b.NUMBERID
    --LEFT JOIN FULLITEMKEYDECODER f ON f.SUBCODE01 = b2.SUBCODE01
    --    AND f.SUBCODE02 = b2.SUBCODE02
    --    AND f.SUBCODE03 = b2.SUBCODE03
    --    AND f.SUBCODE04 = b2.SUBCODE04
    --    AND f.SUBCODE05 = b2.SUBCODE05
    --    AND f.SUBCODE06 = b2.SUBCODE06
    --    AND f.SUBCODE07 = b2.SUBCODE07
    --    AND f.SUBCODE08 = b2.SUBCODE08
    --GROUP BY
    --    b.NUMBERID,
    --    b.SUBCODE01,
    --    b.SUBCODE02,
    --    b.SUBCODE03,
    --    b.SUBCODE04;


-- DB2ADMIN.ITXVIEW_KAINJADI_GKJ source

CREATE VIEW ITXVIEW_KAINJADI_GKJ AS
SELECT
    idorder,
    iddoc,
    no_sj,
    code_allocation,
    elementcode,
    tanggal,
    lotcode,
    jenis_order,
    jenis_kain,
    unit,
    no_order,
    buyer,
    ordercode,
    langganan,
    no_po,
    ket_quality
FROM
    (
        SELECT
            SALESORDER.DELIVERYPOINTUNIQUEID AS idorder,
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID AS iddoc,
            SALESDOCUMENT.PROVISIONALCODE AS no_sj,
            ALLOCATION.CODE AS code_allocation,
            ITXVIEW_SURATJALAN_EXIM_FOC.ELEMENTCODE AS elementcode,
            CASE
                WHEN trim(SALESDOCUMENT.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT.GOODSISSUEDATE)
                    ELSE trim(SALESDOCUMENT.PROVISIONALDOCUMENTDATE)
                END
                ELSE trim(SALESDOCUMENT.GOODSISSUEDATE)
            END AS tanggal,
            ITXVIEW_SURATJALAN_EXIM_FOC.LOTCODE AS lotcode,
            SALESDOCUMENTLINE.SUBCODE02 AS article_group,
            SALESDOCUMENTLINE.SUBCODE01 AS fabric_type,
            SALESORDER.COUNTERCODE AS jenis_order,
            CASE
                WHEN SALESORDER.COUNTERCODE = 'EXPORT'
                AND BUSINESSPARTNER.NUMBERID <> 989 THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'SAMPLE'
                AND BUSINESSPARTNER.NUMBERID <> 888 THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'REPLCEXP'
                AND BUSINESSPARTNER.NUMBERID <> 888 THEN 'Kain Rajut Celup'
                ELSE trim(SALESDOCUMENTLINE.ITEMDESCRIPTION)
            END AS jenis_kain,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE AS UNIT,
            SALESORDER.PROJECTCODE AS no_order,
            ORDERPARTNERBRAND.LONGDESCRIPTION AS buyer,
            ALLOCATION.ORDERCODE AS ordercode,
            ADDRESS.ADDRESSEE AS langganan,
            CASE
                WHEN SALESDOCUMENTLINE.EXTERNALREFERENCE IS NULL THEN SALESORDER.EXTERNALREFERENCE
                ELSE SALESDOCUMENTLINE.EXTERNALREFERENCE
            END AS no_po,
            ITXVIEW_SURATJALAN_EXIM_FOC.QUALITYREASONCODE AS ket_quality
        FROM
            SALESDOCUMENT SALESDOCUMENT
        LEFT JOIN SALESORDER SALESORDER ON
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
        LEFT JOIN ADDRESS ADDRESS ON
            SALESORDER.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
            AND SALESORDER.DELIVERYPOINTCODE = ADDRESS.CODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESORDER.CODE = SALESDOCUMENTLINE.PROJECTCODE
            AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN DESIGN DESIGN ON
            SALESDOCUMENTLINE.SUBCODE07 = DESIGN.SUBCODE01
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            SALESDOCUMENTLINE.SUBCODE08 = DESIGNCOMPONENT.VARIANTCODE
            AND DESIGN.NUMBERID = DESIGNCOMPONENT.DESIGNNUMBERID
        LEFT JOIN (
                SELECT
                    ITXVIEWRESEPCOLOR.LONGDESCRIPTION,
                    ITXVIEWRESEPCOLOR.ARTIKEL,
                    ITXVIEWRESEPCOLOR.NO_WARNA
                FROM
                    ITXVIEWRESEPCOLOR ITXVIEWRESEPCOLOR
                GROUP BY
                    ITXVIEWRESEPCOLOR.LONGDESCRIPTION,
                    ITXVIEWRESEPCOLOR.ARTIKEL,
                    ITXVIEWRESEPCOLOR.NO_WARNA
            ) ITXVIEWRESEPCOLOR ON
            ITXVIEWRESEPCOLOR.ARTIKEL = SALESDOCUMENTLINE.SUBCODE03
            AND ITXVIEWRESEPCOLOR.NO_WARNA = SALESDOCUMENTLINE.SUBCODE05
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE opla ON
            SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = opla.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESDOCUMENTLINE.ITEMTYPEAFICODE = opla.ITEMTYPEAFICODE
            AND SALESDOCUMENTLINE.SUBCODE01 = opla.SUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = opla.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = opla.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = opla.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = opla.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = opla.SUBCODE06
        LEFT JOIN PRODUCT p ON
            SALESDOCUMENTLINE.ITEMTYPEAFICODE = p.ITEMTYPECODE
            AND SALESDOCUMENTLINE.SUBCODE01 = p.SUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = p.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = p.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = p.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = p.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = p.SUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = p.SUBCODE07
        LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
            SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = 7
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_SURATJALAN_EXIM_FOC ITXVIEW_SURATJALAN_EXIM_FOC ON
            ALLOCATION.CODE = ITXVIEW_SURATJALAN_EXIM_FOC.CODE
        LEFT JOIN ITXVIEWALLOCATION0_SJEXIM ITXVIEWALLOCATION0_SJEXIM ON
            ALLOCATION.CODE = ITXVIEWALLOCATION0_SJEXIM.CODE
        WHERE
            ALLOCATION.ORDERCODE IS NOT NULL
        GROUP BY
            SALESDOCUMENT.PROVISIONALCODE,
            ITXVIEW_SURATJALAN_EXIM_FOC.ELEMENTCODE,
            ITXVIEW_SURATJALAN_EXIM_FOC.LOTCODE,
            ALLOCATION.CODE,
            SALESORDER.COUNTERCODE,
            SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
            SALESDOCUMENT.GOODSISSUEDATE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            SALESORDER.PROJECTCODE,
            ORDERPARTNERBRAND.LONGDESCRIPTION,
            ALLOCATION.ORDERCODE,
            ITXVIEW_SURATJALAN_EXIM_FOC.QUALITYREASONCODE,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDER.DELIVERYPOINTUNIQUEID,
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
            ADDRESS.ADDRESSEE,
            BUSINESSPARTNER.NUMBERID,
            SALESORDER.COUNTERCODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02
    );


-- DB2ADMIN.ITXVIEW_KGBRUTO source

CREATE VIEW ITXVIEW_KGBRUTO AS
SELECT
    DISTINCT 	
    p.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
    p.CODE,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.PRODUCTIONORDERCODE
    END AS PRODUCTIONORDERCODE,
    p.ITEMTYPEAFICODE AS ITEMTYPE_DEMAND,
    p.SUBCODE01,
    p.SUBCODE02,
    p.SUBCODE03,
    p.SUBCODE04,
    p.SUBCODE05,
    p.SUBCODE06,
    p.SUBCODE07,
    p.SUBCODE08,
    p.SUBCODE09,
    p.SUBCODE10,
    p.ORIGDLVSALORDERLINEORDERLINE,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.ITEMTYPEAFICODE
    END AS ITEMTYPE_RESERVATION,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.USERPRIMARYQUANTITY
    END AS USERPRIMARYQUANTITY,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.USERPRIMARYUOMCODE
    END AS USERPRIMARYUOMCODE,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.USERSECONDARYQUANTITY
    END AS USERSECONDARYQUANTITY,
    CASE
        WHEN p2.ITEMTYPEAFICODE = 'WTR' THEN '0'
        ELSE p2.USERSECONDARYUOMCODE
    END AS USERSECONDARYUOMCODE,
    CASE
        WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
        ELSE s2.EXTERNALREFERENCE
    END AS EXTERNALREFERENCE,
    s.INTERNALREFERENCE,
    a.VALUESTRING
FROM
    PRODUCTIONDEMAND p
LEFT JOIN SALESORDERLINE s ON
    s.SALESORDERCODE = p.ORIGDLVSALORDLINESALORDERCODE
    AND s.ORDERLINE = p.ORIGDLVSALORDERLINEORDERLINE
LEFT JOIN SALESORDER s2 ON
    s2.CODE = s.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.FIELDNAME = 'OriginalPDCode'
LEFT JOIN PRODUCTIONRESERVATION p2 ON
    p2.ORDERCODE = p.CODE
    AND (
        p2.ITEMTYPEAFICODE = 'KGF'
            OR p2.ITEMTYPEAFICODE = 'FKG'
            OR p2.ITEMTYPEAFICODE = 'KFF'
    )
WHERE
    --    (p2.ITEMTYPEAFICODE = 'KGF' OR p2.ITEMTYPEAFICODE = 'FKG' OR p2.ITEMTYPEAFICODE = 'KFF' OR p2.ITEMTYPEAFICODE = 'WTR')
    --    AND 
    (
        p.ITEMTYPEAFICODE = 'KFF'
            OR p.ITEMTYPEAFICODE = 'FKF'
            OR p.ITEMTYPEAFICODE = 'KGF'
    )
    --    AND a.VALUESTRING IS NULL
    --    AND p.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300314' AND p.ORIGDLVSALORDERLINEORDERLINE = 20
    --    AND p.CODE = '00219214';


-- DB2ADMIN.ITXVIEW_KGBRUTO_1 source

CREATE VIEW ITXVIEW_KGBRUTO_1 AS
SELECT
    *
FROM
    (
        SELECT
            p.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
            a.NAMENAME,
            a.VALUESTRING,
            p.ITEMTYPEAFICODE AS ITEMTYPE_DEMAND,
            p2.ITEMTYPEAFICODE AS ITEMTYPE_RESERVATION,
            p2.USERPRIMARYUOMCODE AS UOMCODE,
            CASE
                WHEN p.ITEMTYPEAFICODE = 'KFF'
                AND p2.ITEMTYPEAFICODE = 'KGF'
		   	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO,
            CASE
                WHEN p.ITEMTYPEAFICODE = 'FKF'
                AND p2.ITEMTYPEAFICODE = 'FKG'
		   	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_FK
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = p.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = p.ORIGDLVSALORDERLINEORDERLINE
        LEFT JOIN SALESORDER s2 ON
            s2.CODE = s.SALESORDERCODE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = p.ABSUNIQUEID
            AND a.NAMENAME = 'OriginalPDCode'
        WHERE
            (
                p2.ITEMTYPEAFICODE = 'KGF'
                    OR p2.ITEMTYPEAFICODE = 'FKG'
            )
            AND (
                p.ITEMTYPEAFICODE = 'KFF'
                    OR p.ITEMTYPEAFICODE = 'FKF'
            )
            AND p2.PRODUCTIONORDERCODE IS NOT NULL
        GROUP BY
            p.ORIGDLVSALORDLINESALORDERCODE,
            p.ITEMTYPEAFICODE,
            p2.ITEMTYPEAFICODE,
            p2.USERPRIMARYUOMCODE,
            a.NAMENAME,
            a.VALUESTRING
    )
WHERE
    NAMENAME IS NULL;


-- DB2ADMIN.ITXVIEW_KGBRUTO_PIGMENT source

CREATE VIEW ITXVIEW_KGBRUTO_PIGMENT AS
SELECT
    ABSUNIQUEID,
    PROJECTCODE,
    CASE
        WHEN SUBCODE07 LIKE '%S%' THEN SUM(USERPRIMARYQUANTITY)
        ELSE 0
    END AS PRT_SUBLIM,
    CASE
        WHEN SUBCODE08 LIKE '%PI%' THEN SUM(USERPRIMARYQUANTITY)
        ELSE 0
    END AS PRT_PIGMENT
FROM
    (
        SELECT
            DISTINCT
        s2.ABSUNIQUEID,
            p.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
            p.SUBCODE07 AS SUBCODE07,
            p.SUBCODE08 AS SUBCODE08,
            p2.USERPRIMARYUOMCODE AS UOM_CODE,
            SUM(p2.USERPRIMARYQUANTITY) AS USERPRIMARYQUANTITY
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = p.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = p.ORIGDLVSALORDERLINEORDERLINE
        LEFT JOIN SALESORDER s2 ON
            s2.CODE = s.SALESORDERCODE
        WHERE
            (
                p2.ITEMTYPEAFICODE = 'FKG'
                    OR p2.ITEMTYPEAFICODE = 'KGF'
            )
            AND (
                p.ITEMTYPEAFICODE = 'KFF'
                    OR p.ITEMTYPEAFICODE = 'FKF'
            )
            AND p2.PRODUCTIONORDERCODE IS NOT NULL
            --            AND  p.ORIGDLVSALORDLINESALORDERCODE = 'EXP2300014'
            AND p.SUBCODE07 NOT IN (
                '', '-'
            )
            AND p.SUBCODE08 NOT IN (
                '', '-'
            )
        GROUP BY
            s2.ABSUNIQUEID,
            p.ORIGDLVSALORDLINESALORDERCODE,
            p.SUBCODE07,
            p.SUBCODE08,
            p2.USERPRIMARYUOMCODE,
            p2.USERPRIMARYQUANTITY
    )
GROUP BY
    ABSUNIQUEID,
    PROJECTCODE,
    SUBCODE07,
    SUBCODE08;


-- DB2ADMIN.ITXVIEW_KGBRUTO_SALES source

CREATE VIEW ITXVIEW_KGBRUTO_SALES AS
SELECT
    DISTINCT 
	 PROJECTCODE,
     NAMA_BUYER,
    LINETEMPLATECODE,
    ORDERDATE,
    YEARORDER,
    MONTHORDER,
    SUM(BRUTO_1) AS BRUTO1,
    SUM(BRUTO_2) AS BRUTO2,
    SUM(BRUTO_3) AS BRUTO3,
    SUM(BRUTO_4) AS BRUTO4,
    SUM(BRUTO_5) AS BRUTO5,
    SUM(BRUTO_6) AS BRUTO6,
    SUM(BRUTO_7) AS BRUTO7,
    SUM(BRUTO_8) AS BRUTO8,
    SUM(BRUTO_9) AS BRUTO9,
    SUM(BRUTO_10) AS BRUTO10,
    SUM(BRUTO_11) AS BRUTO11,
    SUM(BRUTO_12) AS BRUTO12,
    SUM(BRUTO_1SS) AS BRUTO1_SS,
    SUM(BRUTO_2SS) AS BRUTO2_SS,
    SUM(BRUTO_3SS) AS BRUTO3_SS,
    SUM(BRUTO_4SS) AS BRUTO4_SS,
    SUM(BRUTO_5SS) AS BRUTO5_SS,
    SUM(BRUTO_6SS) AS BRUTO6_SS,
    SUM(BRUTO_7SS) AS BRUTO7_SS,
    SUM(BRUTO_8SS) AS BRUTO8_SS,
    SUM(BRUTO_9SS) AS BRUTO9_SS,
    SUM(BRUTO_10SS) AS BRUTO10_SS,
    SUM(BRUTO_11SS) AS BRUTO11_SS,
    SUM(BRUTO_12SS) AS BRUTO12_SS
FROM
    (
        SELECT
            p.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
            a.NAMENAME,
            a.VALUESTRING,
            SUBSTR(s2.ORDERDATE, 1, 7) AS ORDERDATE,
            YEAR(s2.ORDERDATE) AS YEARORDER,
            MONTH(s2.ORDERDATE)AS MONTHORDER,
            o.ORDPRNCUSTOMERSUPPLIERCODE AS KODE_BUYER,
            o.LONGDESCRIPTION AS NAMA_BUYER,
            p.ITEMTYPEAFICODE AS ITEMTYPE_DEMAND,
            p2.ITEMTYPEAFICODE AS ITEMTYPE_RESERVATION,
            p2.USERPRIMARYUOMCODE AS UOMCODE,
            s.LINETEMPLATECODE,
            CASE
                WHEN p.ITEMTYPEAFICODE = 'KFF'
                AND p2.ITEMTYPEAFICODE = 'KGF'
		   	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO,
            CASE
                WHEN p.ITEMTYPEAFICODE = 'FKF'
                AND p2.ITEMTYPEAFICODE = 'FKG'
		   	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_FK,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 1
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_1,
             CASE
                WHEN MONTH(s2.ORDERDATE)= 2
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_2,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 3
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_3,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 4
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_4,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 5
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_5,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 6
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_6,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 7
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_7,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 8
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_8,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 9
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_9,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 10
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_10,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 11
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_11,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 12
                AND s.LINETEMPLATECODE NOT IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_12,
             CASE
                WHEN MONTH(s2.ORDERDATE)= 1
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_1SS,
             CASE
                WHEN MONTH(s2.ORDERDATE)= 2
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_2SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 3
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_3SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 4
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_4SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 5
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_5SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 6
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_6SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 7
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_7SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 8
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_8SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 9
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_9SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 10
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_10SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 11
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_11SS,
            CASE
                WHEN MONTH(s2.ORDERDATE)= 12
                AND s.LINETEMPLATECODE IN ('SAM')
           	THEN SUM(p2.USERPRIMARYQUANTITY)
                ELSE 0
            END AS BRUTO_12SS
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = p.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = p.ORIGDLVSALORDERLINEORDERLINE
        LEFT JOIN SALESORDER s2 ON
            s2.CODE = s.SALESORDERCODE
        LEFT JOIN ORDERPARTNERBRAND o ON
            s2.ORDPRNCUSTOMERSUPPLIERCODE = o.ORDPRNCUSTOMERSUPPLIERCODE
            AND s2.ORDERPARTNERBRANDCODE = o.CODE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = p.ABSUNIQUEID
            AND a.NAMENAME = 'OriginalPDCode'
        WHERE
            (
                p2.ITEMTYPEAFICODE = 'KGF'
                    OR p2.ITEMTYPEAFICODE = 'FKG'
            )
            AND (
                p.ITEMTYPEAFICODE = 'KFF'
                    OR p.ITEMTYPEAFICODE = 'FKF'
            )
            AND p2.PRODUCTIONORDERCODE IS NOT NULL
            AND s.LINETEMPLATECODE NOT IN (
                'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
            )
        GROUP BY
            p.ORIGDLVSALORDLINESALORDERCODE,
            p.ITEMTYPEAFICODE,
            p2.ITEMTYPEAFICODE,
            p2.USERPRIMARYUOMCODE,
            a.NAMENAME,
            a.VALUESTRING,
            o.ORDPRNCUSTOMERSUPPLIERCODE,
            o.LONGDESCRIPTION,
            s.LINETEMPLATECODE,
            s2.ORDERDATE
    )
WHERE
    NAMENAME IS NULL
GROUP BY
    PROJECTCODE,
    NAMA_BUYER,
    LINETEMPLATECODE,
    ORDERDATE,
    YEARORDER,    
    MONTHORDER,
    BRUTO_1,
    BRUTO_2,
    BRUTO_4,
    BRUTO_5,
    BRUTO_6,
    BRUTO_7,
    BRUTO_8,
    BRUTO_9,
    BRUTO_10,
    BRUTO_11,
    BRUTO_12,
    BRUTO_1SS,
    BRUTO_2SS,
    BRUTO_4SS,
    BRUTO_5SS,
    BRUTO_6SS,
    BRUTO_7SS,
    BRUTO_8SS,
    BRUTO_9SS,
    BRUTO_10SS,
    BRUTO_11SS,
    BRUTO_12SS;


-- DB2ADMIN.ITXVIEW_KK_TAS source

CREATE VIEW ITXVIEW_KK_TAS AS
SELECT
    P1.CODE AS NO_PROD_ORDER,
    P3.PRODUCTIONDEMANDCODE AS NO_DEMAND,
    PROJECT.LONGDESCRIPTION AS PROJECTCODE,
    P2.ORIGDLVSALORDLINESALORDERCODE,
    P2.ORIGDLVSALORDERLINEORDERLINE,
    TRIM(P2.SUBCODE02) || '-' || TRIM(P2.SUBCODE03) AS NO_HANGER,
    PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
    ITXVIEW_SUB_KK_TAS.SUBCODE03 AS ARTICLE_CODE,
    ITXVIEW_SUB_KK_TAS.QTY,
    ITXVIEW_SUB_KK_TAS.QTY2,
    ITXVIEW_SUB_KK_TAS.SATUAN,
    trim(ITXVIEW_SUB_KK_TAS.SUBCODE05) NO_WARNA,
    trim(ITXVIEW_SUB_KK_TAS.SUBCODE05) || ' ' || '(' || USERGENERICGROUP.LONGDESCRIPTION || ')' AS WARNA,
    BP.ADDRESSLINE1 AS TEMPAT_KIRIM,
    ADS_LEBAR.VALUEDECIMAL AS LEBAR,
    ADS_GRAMASI.VALUEDECIMAL AS GRAMASI,
    ITXVIEW_JENISBENANG.DESCRIP AS JENIS_BENANG,
    ADS_TGL_KIRIM.VALUEDATE AS TGL_KIRIM,
    ADS_NOTE.VALUESTRING AS NOTE1,
    ADS_NOTES.VALUESTRING AS NOTE2,
    CASE
        WHEN TRIM(ADS_NOTES.VALUESTRING) IS NULL THEN TRIM(ADS_NOTE.VALUESTRING)
        WHEN TRIM(ADS_NOTE.VALUESTRING) IS NULL THEN TRIM(ADS_NOTES.VALUESTRING)
        ELSE TRIM(ADS_NOTE.VALUESTRING) || ' ' || TRIM(ADS_NOTES.VALUESTRING)
    END AS NOTES,
    ADS_BUYER.VALUESTRING AS BUYER,
    ADS_TRACKINGDEV.VALUESTRING AS TRACKINGDEV,
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID
FROM
    PRODUCTIONORDER P1
LEFT JOIN PRODUCTIONDEMANDSTEP P3 ON
    P1.CODE = P3.PRODUCTIONORDERCODE
LEFT JOIN PRODUCTIONDEMAND P2 ON
    P2.CODE = P3.PRODUCTIONDEMANDCODE
LEFT JOIN ITXVIEW_SUB_KK_TAS ITXVIEW_SUB_KK_TAS ON
    P3.PRODUCTIONDEMANDCODE = ITXVIEW_SUB_KK_TAS.NO_DEMAND
LEFT JOIN CUSTOMERSUPPLIERDATA CSD ON
    ITXVIEW_SUB_KK_TAS.CUSTOMERCODE = CSD.CODE
LEFT JOIN BUSINESSPARTNER BP ON
    CSD.BUSINESSPARTNERNUMBERID = BP.NUMBERID
LEFT JOIN ITXVIEW_JENISBENANG ITXVIEW_JENISBENANG ON
    ITXVIEW_SUB_KK_TAS.SUBCODE01 = ITXVIEW_JENISBENANG.SUBCODE01
    AND ITXVIEW_SUB_KK_TAS.SUBCODE02 = ITXVIEW_JENISBENANG.SUBCODE02
    AND ITXVIEW_SUB_KK_TAS.SUBCODE03 = ITXVIEW_JENISBENANG.SUBCODE03
    AND ITXVIEW_SUB_KK_TAS.SUBCODE04 = ITXVIEW_JENISBENANG.SUBCODE04
LEFT JOIN PRODUCT PRODUCT ON
    ITXVIEW_SUB_KK_TAS.SUBCODE01 = PRODUCT.SUBCODE01
    AND ITXVIEW_SUB_KK_TAS.SUBCODE02 = PRODUCT.SUBCODE02
    AND ITXVIEW_SUB_KK_TAS.SUBCODE03 = PRODUCT.SUBCODE03
    AND ITXVIEW_SUB_KK_TAS.SUBCODE04 = PRODUCT.SUBCODE04
    AND ITXVIEW_SUB_KK_TAS.SUBCODE05 = PRODUCT.SUBCODE05
    AND ITXVIEW_SUB_KK_TAS.SUBCODE06 = PRODUCT.SUBCODE06
LEFT JOIN ADSTORAGE ADS_LEBAR ON
    PRODUCT.ABSUNIQUEID = ADS_LEBAR.UNIQUEID
    AND ADS_LEBAR.NAMENAME = 'Width'
LEFT JOIN ADSTORAGE ADS_GRAMASI ON
    PRODUCT.ABSUNIQUEID = ADS_GRAMASI.UNIQUEID
    AND ADS_GRAMASI.NAMENAME = 'GSM'
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    ITXVIEW_SUB_KK_TAS.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ADSTORAGE ADS_TGL_KIRIM
        WHERE
            ADS_TGL_KIRIM.NAMENAME = 'DevSamDelivery'
    ) ADS_TGL_KIRIM ON
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID = ADS_TGL_KIRIM.UNIQUEID
LEFT JOIN (
        SELECT
            *
        FROM
            ADSTORAGE ADS_NOTE
        WHERE
            ADS_NOTE.NAMENAME = 'NoteDevSam'
    ) ADS_NOTE ON
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID = ADS_NOTE.UNIQUEID
LEFT JOIN (
        SELECT
            *
        FROM
            ADSTORAGE ADS_NOTES
        WHERE
            ADS_NOTES.NAMENAME = 'NotesDevSam'
    ) ADS_NOTES ON
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID = ADS_NOTES.UNIQUEID
LEFT JOIN (
        SELECT
            *
        FROM
            ADSTORAGE ADS_BUYER
        WHERE
            ADS_BUYER.NAMENAME = 'BuyerDevSam'
    ) ADS_BUYER ON
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID = ADS_BUYER.UNIQUEID
LEFT JOIN (
        SELECT
            *
        FROM
            ADSTORAGE ADS_TRACKINGDEV
        WHERE
            ADS_TRACKINGDEV.NAMENAME = 'NoTrackingDev'
    ) ADS_TRACKINGDEV ON
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID = ADS_TRACKINGDEV.UNIQUEID
LEFT JOIN PROJECT PROJECT ON
    PROJECT.CODE = P2.PROJECTCODE
GROUP BY
    P1.CODE,
    P3.PRODUCTIONDEMANDCODE,
    PROJECT.LONGDESCRIPTION,
    P2.ORIGDLVSALORDLINESALORDERCODE,
    P2.ORIGDLVSALORDERLINEORDERLINE,
    P2.SUBCODE02,
    P2.SUBCODE03,
    PRODUCT.LONGDESCRIPTION,
    P2.SUBCODE03,
    BP.LEGALNAME1,
    USERGENERICGROUP.LONGDESCRIPTION,
    ADS_LEBAR.VALUEDECIMAL,
    ADS_GRAMASI.VALUEDECIMAL,
    BP.ADDRESSLINE1,
    ITXVIEW_JENISBENANG.DESCRIP,
    ADS_TGL_KIRIM.VALUEDATE,
    ADS_NOTE.VALUESTRING,
    ADS_NOTES.VALUESTRING,
    ADS_BUYER.VALUESTRING,
    ADS_TRACKINGDEV.VALUESTRING,
    ITXVIEW_SUB_KK_TAS.SUBCODE03,
    ITXVIEW_SUB_KK_TAS.SUBCODE05,
    ITXVIEW_SUB_KK_TAS.QTY,
    ITXVIEW_SUB_KK_TAS.QTY2,
    ITXVIEW_SUB_KK_TAS.SATUAN,
    ITXVIEW_SUB_KK_TAS.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEW_KNTORDER_KNTA source

CREATE VIEW ITXVIEW_KNTORDER_KNTA AS
SELECT
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.PROJECTCODE,
    PRODUCTIONDEMAND.ORIGDLVSALORDLINESALORDERCODE,
    PRODUCTIONDEMAND.ITEMTYPEAFICODE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.USERPRIMARYQUANTITY,
    PRODUCTIONDEMAND.USERPRIMARYUOMCODE,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.EXTERNALREFERENCE,
    PRODUCTIONDEMAND.INTERNALREFERENCE,
    PRODUCTIONDEMAND.ABSUNIQUEID,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1,
    PRODUCTIONDEMANDCOMMENT.COMMENTTEXT
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
LEFT OUTER JOIN DB2ADMIN.PRODUCTIONCUSTOMIZEDOPTIONS PRODUCTIONCUSTOMIZEDOPTIONS ON
    PRODUCTIONDEMAND.COMPANYCODE = PRODUCTIONCUSTOMIZEDOPTIONS.COMPANYCODE
LEFT OUTER JOIN DB2ADMIN.COMPANY COMPANY ON
    PRODUCTIONDEMAND.COMPANYCODE = COMPANY.CODE
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONDEMAND.COMPANYCODE = FULLITEMKEYDECODER.COMPANYCODE
    AND PRODUCTIONDEMAND.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT OUTER JOIN DB2ADMIN.PRODUCTIONDEMANDCOMMENT PRODUCTIONDEMANDCOMMENT ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONDEMANDCOMMENT.PRODUCTIONDEMANDCODE;


-- DB2ADMIN.ITXVIEW_KODE_SM source

CREATE VIEW ITXVIEW_KODE_SM AS 
SELECT
    a.UNIQUEID,
    a.VALUESTRING AS KODE_SM,
    a2.VALUESTRING AS PICEXT
FROM
    ADSTORAGE a
LEFT JOIN ADSTORAGE a2 ON
    a.UNIQUEID = a2.UNIQUEID
WHERE
    a.NAMENAME = 'KodeSM'
    AND a2.NAMENAME = 'PICEXT';


-- DB2ADMIN.ITXVIEW_LAPKAINJADI_GKJ source

CREATE VIEW ITXVIEW_LAPKAINJADI_GKJ AS
SELECT
    sd.PROVISIONALCODE AS no_sj,
    ALLOCATION.CODE AS code_allocation,
    ITXVIEW_EXIM_FOC.QUALITYREASONCODE,
    ALLOCATION.LOTCODE,
    sdl.PROJECTCODE,
    sdl.PREVIOUSCODE,
    CASE
        WHEN sdl.EXTERNALREFERENCE IS NULL THEN sd.EXTERNALREFERENCE
        ELSE sdl.EXTERNALREFERENCE
    END AS NO_PO
FROM
    SALESDOCUMENT sd
LEFT JOIN SALESDOCUMENTLINE sdl ON
    sd.PROVISIONALCODE = sdl.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            AND ALLOCATION.DESTINATIONTYPE = '7'
    ) ALLOCATION ON
    sdl.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND sdl.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND sdl.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND sdl.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND sdl.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND sdl.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND sdl.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND sdl.PROJECTCODE = ALLOCATION.PROJECTCODE
    AND sdl.PREVIOUSCODE = ALLOCATION.ORDERCODE
    AND sdl.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
LEFT JOIN ITXVIEW_EXIM_FOC ITXVIEW_EXIM_FOC ON
    ALLOCATION.CODE = ITXVIEW_EXIM_FOC.CODE
LEFT JOIN DESIGN DESIGN ON
    DESIGN.SUBCODE01 = sdl.SUBCODE07
LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
    DESIGNCOMPONENT.VARIANTCODE = sdl.SUBCODE08
    AND DESIGNCOMPONENT.DESIGNNUMBERID = DESIGN.NUMBERID
LEFT JOIN (
        SELECT
            ITXVIEWRESEPCOLOR.LONGDESCRIPTION,
            ITXVIEWRESEPCOLOR.ARTIKEL,
            ITXVIEWRESEPCOLOR.NO_WARNA
        FROM
            ITXVIEWRESEPCOLOR ITXVIEWRESEPCOLOR
        GROUP BY
            ITXVIEWRESEPCOLOR.LONGDESCRIPTION,
            ITXVIEWRESEPCOLOR.ARTIKEL,
            ITXVIEWRESEPCOLOR.NO_WARNA
    ) ITXVIEWRESEPCOLOR ON
    ITXVIEWRESEPCOLOR.ARTIKEL = sdl.SUBCODE03
    AND ITXVIEWRESEPCOLOR.NO_WARNA = sdl.SUBCODE05
LEFT JOIN PRODUCT PRODUCT ON
    sdl.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
    AND sdl.SUBCODE01 = PRODUCT.SUBCODE01
    AND sdl.SUBCODE02 = PRODUCT.SUBCODE02
    AND sdl.SUBCODE03 = PRODUCT.SUBCODE03
    AND sdl.SUBCODE04 = PRODUCT.SUBCODE04
    AND sdl.SUBCODE05 = PRODUCT.SUBCODE05
    AND sdl.SUBCODE06 = PRODUCT.SUBCODE06
    AND sdl.SUBCODE07 = PRODUCT.SUBCODE07
    AND sdl.SUBCODE08 = PRODUCT.SUBCODE08;


-- DB2ADMIN.ITXVIEW_LAPKIRIM_GKJ source

CREATE VIEW ITXVIEW_LAPKIRIM_GKJ AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ORDERLINE,
    ITXVIEW_ALLOCATION_LAPKIRIMGKJ.CODE
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ITXVIEW_ALLOCATION_LAPKIRIMGKJ ITXVIEW_ALLOCATION_LAPKIRIMGKJ ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = ITXVIEW_ALLOCATION_LAPKIRIMGKJ.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ITXVIEW_ALLOCATION_LAPKIRIMGKJ.ORDERLINE
    AND SALESDOCUMENT.PROVISIONALDOCUMENTDATE = ITXVIEW_ALLOCATION_LAPKIRIMGKJ.THEORETICISSUEDATE;


-- DB2ADMIN.ITXVIEW_LAP_BULANAN_EXIM source

CREATE VIEW ITXVIEW_LAP_BULANAN_EXIM AS
SELECT
    ADDRESS.ADDRESSEE AS nama_consignee,
    OPB.LONGDESCRIPTION AS buyer,
    TRIM(ADS20.VALUESTRING) AS no_shipping,
    CASE
        WHEN GRANDTOTAL_PACKINGLIST_EXIM2.JML_KG = 0 THEN GRANDTOTAL_PACKINGLIST_EXIM2.FOC_KG
        ELSE GRANDTOTAL_PACKINGLIST_EXIM2.JML_KG
    END AS qty_kgs,
    --    GRANDTOTAL_PACKINGLIST_EXIM2.JML_KG AS qty_kgs,
    SD.PROVISIONALCODE AS no_suratjalan,
    SD.GOODSISSUEDATE AS tgl_suratjalan,
    SD.CREATIONUSER AS author,
    COUNTRY.LONGDESCRIPTION AS dest,
    TRIM(ADS19.VALUESTRING) AS port,
    SD.TERMSOFDELIVERYCODE AS term,
    SO.COUNTERCODE AS jenis_order,
    tos.LONGDESCRIPTION AS status_by,
    TRIM(ADS18.VALUESTRING) AS status_meas,
    trim(TD.LONGDESCRIPTION) AS forwarder,
    TRIM(ADS.VALUEDATE) AS ETD_shippment,
    TRIM(ADS21.VALUEDATE) AS ETA,
    SD.ONDOCUMENTTOTALAMOUNT AS TOTAL,
    TRIM(ADS17.VALUESTRING) AS note,
    TRIM(ADS16.VALUEDATE) AS terimadok_khusus,
    TRIM(ADS15.VALUEDATE) AS penyerahan_dok,
    ADS15.VALUEDATE-ADS16.VALUEDATE AS tgl_lamapenyerahan_doc,
    LEGALDOCUMENTTYPE.LONGDESCRIPTION AS remarkshippemnt,
    CASE
        WHEN SD.TERMSOFSHIPPINGCODE IN(
            'SE', 'SA'
        ) THEN '040300 KPU TANJUNG PRIOK'
        ELSE '050100 KPPBC SOEKARNO HATTA'
    END AS NM_KPPBC,
    VIEW_NPE.PROJECT AS NO_PI,
    TRIM(ADS2.VALUESTRING) AS BL_AWB,
    TRIM(EXIM_CONTAINER.NO_CONTAINER) AS NO_CONTAINER,
    PAYTOD.LONGDESCRIPTION AS pembayaran_jenis,
    TRIM(ADS3.VALUEDATE) AS tgl_terimadok,
    TRIM(ADS4.VALUEDATE) AS tgl_kemkt,
    TRIM(ADS5.VALUEINT) AS no_peb,
    TRIM(ADS6.VALUESTRING) AS LCNUMBER,
    TRIM(ADS7.VALUEDATE) AS tgl_peb,
    TRIM(ADS8.VALUEINT) AS NPE,
    TRIM(ADS9.VALUESTRING) AS AWB,
    TRIM(ADS10.VALUESTRING) AS Tagihan_noinv,
    TRIM(ADS11.VALUEINT) AS Tagihan_nilai,
    TRIM(ADS12.VALUEINT) AS inv_actual,
    TRIM(ADS13.VALUESTRING) AS keterangan,
    TRIM(ADS14.VALUESTRING) AS ket_rmkShipment,
    SD.ABSUNIQUEID
FROM
    SALESDOCUMENT SD
LEFT JOIN ITXVIEW_NO_PROJECTS_EXIM VIEW_NPE ON
    SD.PROVISIONALCODE = VIEW_NPE.PROVISIONALCODE
LEFT JOIN ITXVIEW_GRANDTOTAL_PACKINGLIST_EXIM2 GRANDTOTAL_PACKINGLIST_EXIM2 ON
    SD.PROVISIONALCODE = GRANDTOTAL_PACKINGLIST_EXIM2.PROVISIONALCODE
LEFT JOIN SALESORDER SO ON
    SD.PROJECTCODE = SO.CODE
LEFT JOIN TERMSOFSHIPPING tos ON
    SD.TERMSOFSHIPPINGCODE = tos.CODE
LEFT JOIN ORDERPARTNERBRAND OPB ON
    SD.ORDERPARTNERBRANDCODE = OPB.CODE
    AND SD.ORDPRNCUSTOMERSUPPLIERCODE = OPB.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN ADDRESS ADDRESS ON
    SD.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SD.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN TRUCKDRIVER TD ON
    SD.TRUCKDRIVERCODE = TD.CODE
LEFT JOIN PAYMENTMETHOD PAYTOD ON
    SD.PAYMENTMETHODCODE = PAYTOD.CODE
LEFT JOIN ADSTORAGE ADS ON
    SD.ABSUNIQUEID = ADS.UNIQUEID
    AND ADS.NAMENAME = 'TransportDate'
LEFT JOIN ADSTORAGE ADS2 ON
    SD.ABSUNIQUEID = ADS2.UNIQUEID
    AND ADS2.NAMENAME = 'BLAWB'
LEFT JOIN ADSTORAGE ADS3 ON
    SD.ABSUNIQUEID = ADS3.UNIQUEID
    AND ADS3.NAMENAME = 'TglTerima'
LEFT JOIN ADSTORAGE ADS4 ON
    SD.ABSUNIQUEID = ADS4.UNIQUEID
    AND ADS4.NAMENAME = 'KeMKT'
LEFT JOIN ADSTORAGE ADS5 ON
    SD.ABSUNIQUEID = ADS5.UNIQUEID
    AND ADS5.NAMENAME = 'PEB'
LEFT JOIN ADSTORAGE ADS6 ON
    SD.ABSUNIQUEID = ADS6.UNIQUEID
    AND ADS6.NAMENAME = 'LCNumber'
LEFT JOIN ADSTORAGE ADS7 ON
    SD.ABSUNIQUEID = ADS7.UNIQUEID
    AND ADS7.NAMENAME = 'TglPEB'
LEFT JOIN ADSTORAGE ADS8 ON
    SD.ABSUNIQUEID = ADS8.UNIQUEID
    AND ADS8.NAMENAME = 'NPE'
LEFT JOIN ADSTORAGE ADS9 ON
    SD.ABSUNIQUEID = ADS9.UNIQUEID
    AND ADS9.NAMENAME = 'AWB'
LEFT JOIN ADSTORAGE ADS10 ON
    SD.ABSUNIQUEID = ADS10.UNIQUEID
    AND ADS10.NAMENAME = 'TagihanInvoice'
LEFT JOIN ADSTORAGE ADS11 ON
    SD.ABSUNIQUEID = ADS11.UNIQUEID
    AND ADS11.NAMENAME = 'TagihanNilai'
LEFT JOIN ADSTORAGE ADS12 ON
    SD.ABSUNIQUEID = ADS12.UNIQUEID
    AND ADS12.NAMENAME = 'InvoiceUSD'
LEFT JOIN ADSTORAGE ADS13 ON
    SD.ABSUNIQUEID = ADS13.UNIQUEID
    AND ADS13.NAMENAME = 'Keterangan'
LEFT JOIN ADSTORAGE ADS14 ON
    SD.ABSUNIQUEID = ADS14.UNIQUEID
    AND ADS14.NAMENAME = 'KITE'
LEFT JOIN ADSTORAGE ADS15 ON
    SD.ABSUNIQUEID = ADS15.UNIQUEID
    AND ADS15.NAMENAME = 'SerahDok'
LEFT JOIN ADSTORAGE ADS16 ON
    SD.ABSUNIQUEID = ADS16.UNIQUEID
    AND ADS16.NAMENAME = 'TerimaDok'
LEFT JOIN ADSTORAGE ADS17 ON
    SD.ABSUNIQUEID = ADS17.UNIQUEID
    AND ADS17.NAMENAME = 'Note'
LEFT JOIN ADSTORAGE ADS18 ON
    SD.ABSUNIQUEID = ADS18.UNIQUEID
    AND ADS18.NAMENAME = 'StatusMeasurement'
LEFT JOIN ADSTORAGE ADS19 ON
    SD.ABSUNIQUEID = ADS19.UNIQUEID
    AND ADS19.NAMENAME = 'Port'
LEFT JOIN ADSTORAGE ADS20 ON
    SD.ABSUNIQUEID = ADS20.UNIQUEID
    AND ADS20.NAMENAME = 'shipping'
LEFT JOIN ADSTORAGE ADS21 ON
    SD.ABSUNIQUEID = ADS21.UNIQUEID
    AND ADS21.NAMENAME = 'ETA'
LEFT JOIN ITXVIEW_ADITIONALDATA_EXIM_CONTAINER EXIM_CONTAINER ON
    SD.ABSUNIQUEID = EXIM_CONTAINER.UNIQUEID
LEFT JOIN LEGALDOCUMENTTYPE LEGALDOCUMENTTYPE ON
    SD.LEGALDOCUMENTTYPECODE = LEGALDOCUMENTTYPE.CODE
WHERE
    SD.TEMPLATECODE IN(
        'EXD', 'GSE', 'CES', 'SFE', 'DRE', 'DSE'
    )
    --            AND SD.PROVISIONALCODE ='ESP2400083';


-- DB2ADMIN.ITXVIEW_LB source

CREATE VIEW ITXVIEW_LB AS
SELECT
    q2.QUALITYDOCPRODUCTIONORDERCODE,
    q.HEADERNUMBERID,
    trim(q2.CHARACTERISTICCODE) AS CHARACTERISTICCODE,
    q2.VALUEQUANTITY
FROM
    QUALITYDOCUMENT q
LEFT JOIN QUALITYDOCLINE q2 ON
    q2.QUALITYDOCUMENTHEADERNUMBERID = q.HEADERNUMBERID
    AND q2.QUALITYDOCPRODUCTIONORDERCODE = q.PRODUCTIONORDERCODE
WHERE
    CHARACTERISTICCODE IN (
        'LB1', 'LB2', 'LB3', 'LB4', 'LB5', 'LB6', 'LB7', 'LB8'
    );


-- DB2ADMIN.ITXVIEW_LEBAR source

CREATE VIEW ITXVIEW_LEBAR AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'Width';


-- DB2ADMIN.ITXVIEW_LEBARGRAMASI_BUKTIMUTASI_KNT source

CREATE VIEW ITXVIEW_LEBARGRAMASI_BUKTIMUTASI_KNT AS
SELECT
    ADSTORAGE.VALUEDECIMAL,
    ELEMENTSINSPECTION.ELEMENTCODE,
    ELEMENTSINSPECTION.WIDTHNET
FROM
    ADSTORAGE ADSTORAGE
LEFT OUTER JOIN DB2ADMIN.ELEMENTS ELEMENTS ON
    ADSTORAGE.UNIQUEID = ELEMENTS.ABSUNIQUEID
LEFT OUTER JOIN DB2ADMIN.ELEMENTSINSPECTION ELEMENTSINSPECTION ON
    ELEMENTS.CODE = ELEMENTSINSPECTION.ELEMENTCODE
    AND ELEMENTS.ENTRYDOCUMENTNUMBER = ELEMENTSINSPECTION.DEMANDCODE;


-- DB2ADMIN.ITXVIEW_LEBAR_KNT source

CREATE VIEW ITXVIEW_LEBAR_KNT AS
SELECT
    ADSTORAGE.UNIQUEID,
    ADSTORAGE.FIELDNAME,
    ADSTORAGE.VALUEDECIMAL
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    ADSTORAGE.FIELDNAME = 'lebar';


-- DB2ADMIN.ITXVIEW_LOSSORDER source

CREATE VIEW ITXVIEW_LOSSORDER AS
SELECT
    SALESORDER.COMPANYCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10,
    SALESORDERLINE.USERPRIMARYUOMCODE,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    SALESORDERLINE.BASEPRIMARYUOMCODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1
FROM
    ORDERPARTNER ORDERPARTNER
RIGHT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.SALESORDERLINE SALESORDERLINE ON
    SALESORDER.COMPANYCODE = SALESORDERLINE.SALESORDERCOMPANYCODE
    AND SALESORDER.COUNTERCODE = SALESORDERLINE.SALESORDERCOUNTERCODE
    AND SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT OUTER JOIN DB2ADMIN.BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
GROUP BY
    SALESORDER.COMPANYCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.SALESORDERCODE,
    SALESORDERLINE.ORDERLINE,
    SALESORDERLINE.ITEMTYPEAFICODE,
    SALESORDERLINE.SUBCODE01,
    SALESORDERLINE.SUBCODE02,
    SALESORDERLINE.SUBCODE03,
    SALESORDERLINE.SUBCODE04,
    SALESORDERLINE.SUBCODE05,
    SALESORDERLINE.SUBCODE06,
    SALESORDERLINE.SUBCODE07,
    SALESORDERLINE.SUBCODE08,
    SALESORDERLINE.SUBCODE09,
    SALESORDERLINE.SUBCODE10,
    SALESORDERLINE.USERPRIMARYUOMCODE,
    SALESORDERLINE.USERSECONDARYUOMCODE,
    SALESORDERLINE.BASEPRIMARYUOMCODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1;


-- DB2ADMIN.ITXVIEW_LR source

CREATE VIEW ITXVIEW_LR AS
SELECT
    VIEWPRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    VIEWPRODUCTIONRESERVATION.PICKUPQUANTITY
FROM
    DB2ADMIN.VIEWPRODUCTIONRESERVATION VIEWPRODUCTIONRESERVATION
LEFT OUTER JOIN DB2ADMIN.VIEWPRODUCTIONDEMANDSTEP VIEWPRODUCTIONDEMANDSTEP ON
    VIEWPRODUCTIONRESERVATION.PRODUCTIONORDERCODE = VIEWPRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE
    AND VIEWPRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE = VIEWPRODUCTIONDEMANDSTEP.OPERATIONCODE
WHERE
    VIEWPRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'RFD';


-- DB2ADMIN.ITXVIEW_MACHINE source

CREATE VIEW ITXVIEW_MACHINE AS
SELECT
    p.PRODUCTIONORDERCODE,
    p.PROGRESSTEMPLATECODE,
    p.OPERATIONCODE,
    p.MACHINECODE,
    p.OPERATORCODE,
    r2.LONGDESCRIPTION AS NAMA_MESIN,
    r.LONGDESCRIPTION AS NAMA_OPERATOR,
    r.BATHVOLUME,
    p.PROGRESSSTARTPROCESSDATE,
    p.PROGRESSSTARTPROCESSTIME,
    p.PROGRESSENDDATE,
    p.PROGRESSENDTIME
FROM
    PRODUCTIONPROGRESS p
LEFT JOIN RESOURCES r ON
    p.OPERATORCODE = r.CODE
LEFT JOIN RESOURCES r2 ON
    p.MACHINECODE = r2.CODE
WHERE
    p.OPERATIONCODE IN (
        'DYE1', 'DYE2', 'DYE3', 'DYE4', 'DYE5', 'DYE6', 'DYE7', 'DYE8'
    );


-- DB2ADMIN.ITXVIEW_MAPPING_KK source

CREATE VIEW ITXVIEW_MAPPING_KK AS
SELECT
    TRIM(p2.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(p2.PRODUCTIONDEMANDCODE) AS PRODUCTIONDEMANDCODE,
    RIGHT(a.VALUESTRING, 8) AS ORIGINALPDCODE
FROM
    PRODUCTIONDEMAND p
LEFT JOIN (
        SELECT
            DISTINCT PRODUCTIONDEMANDCODE,
            PRODUCTIONORDERCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
    ) p2 ON
      p2.PRODUCTIONDEMANDCODE = p.CODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.FIELDNAME = 'OriginalPDCode';


-- DB2ADMIN.ITXVIEW_MEMOPENTINGPPC source

CREATE VIEW ITXVIEW_MEMOPENTINGPPC AS
SELECT
    DISTINCT
	i.ITEMTYPEAFICODE,
    i.ITEMTYPEAFICODE_YND,
    i.CREATIONDATETIME_PRODORDER AS ORDERDATE,
    ip.LANGGANAN || '|' || 
    CASE
        WHEN ip.BUYER IS NULL THEN 'Data tidak ditemukan, silahkan periksa kembali'
        ELSE ip.BUYER
    END AS PELANGGAN,
    ip.ORDPRNCUSTOMERSUPPLIERCODE,
    ip.LANGGANAN AS LANGGANAN,
    ip.BUYER AS BUYER,
    i.PROJECTCODE AS NO_ORDER,
    ik.EXTERNALREFERENCE AS NO_PO,
    TRIM(i.SUBCODE02) AS SUBCODE02,
    TRIM(i.SUBCODE03) AS SUBCODE03,
    TRIM(i.SUBCODE01) || '-' || TRIM(i.SUBCODE02) || '-' || TRIM(i.SUBCODE03) || '-' || TRIM(i.SUBCODE04) || '-' ||
    TRIM(i.SUBCODE05) || '-' || TRIM(i.SUBCODE06) || '-' || TRIM(i.SUBCODE07) || '-' || TRIM(i.SUBCODE08) AS KETERANGAN_PRODUCT,
    i.ITEMDESCRIPTION AS JENIS_KAIN,
    i.WARNA AS WARNA,
    i.SUBCODE05 AS NO_WARNA,
    i.DELIVERYDATE AS DELIVERY,
    p.USEDUSERPRIMARYQUANTITY AS QTY_BAGIKAIN,
    p.USEDUSERSECONDARYQUANTITY AS QTY_BAGIKAIN_YD_MTR,
    in2.USERPRIMARYQUANTITY AS NETTO,
    CASE
        WHEN DAYS(now()) - DAYS(Timestamp_Format(i.DELIVERYDATE, 'YYYY-MM-DD')) < 0 THEN 0
        ELSE DAYS(now()) - DAYS(Timestamp_Format(i.DELIVERYDATE, 'YYYY-MM-DD'))
    END AS DELAY,
    i.PRODUCTIONORDERCODE AS NO_KK,
    i.DEAMAND AS DEMAND,
    i.LOT,
    i.ORDERLINE,
    TRIM(i.PROGRESSSTATUS) AS PROGRESSSTATUS,
    CASE
        WHEN u.LONGDESCRIPTION IS NULL THEN ''
        ELSE u.LONGDESCRIPTION
    END || CASE
        WHEN a4.VALUESTRING IS NULL THEN ''
        ELSE a4.VALUESTRING
    END AS KETERANGAN,
    i.ABSUNIQUEID_DEMAND,
    i.REQUIREDDUEDATE,
    a2.VALUESTRING AS OriginalPDCode,
    a3.VALUESTRING AS SplittedFrom,
    i.CREATIONDATETIME_SALESORDER,
    i.PROGRESSSTATUS_DEMAND,
    i.EXTERNALITEM AS NO_ITEM
FROM
    --    ITXVIEWKK i
    ITXVIEWKK_UNTUK_MEMOPENTING_PPC i
LEFT JOIN (
        SELECT
            ik.CODE,
            ik.EXTERNALREFERENCE,
            ik.PROJECTCODE,
            ik.ORIGDLVSALORDERLINEORDERLINE
        FROM
            ITXVIEW_KGBRUTO ik
    ) ik ON
    ik.PROJECTCODE = i.PROJECTCODE
    AND ik.ORIGDLVSALORDERLINEORDERLINE = i.ORIGDLVSALORDERLINEORDERLINE
    AND ik.CODE = i.DEAMAND
LEFT JOIN (
        SELECT
            p.ORDERCODE,
            p.USEDUSERPRIMARYQUANTITY,
            p.USEDUSERSECONDARYQUANTITY
        FROM
            ITXVIEW_RESERVATION_KK p
    ) p ON
    p.ORDERCODE = i.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            a.UNIQUEID,
            a.FIELDNAME,
            a.VALUESTRING
        FROM
            ADSTORAGE a
    ) a ON
    a.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a.FIELDNAME = 'DefectTypeCode'
LEFT JOIN (
        SELECT
            a2.UNIQUEID,
            a2.FIELDNAME,
            a2.VALUESTRING
        FROM
            ADSTORAGE a2
    ) a2 ON
    a2.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a2.FIELDNAME = 'OriginalPDCode'
LEFT JOIN (
        SELECT
            a3.UNIQUEID,
            a3.FIELDNAME,
            a3.VALUESTRING
        FROM
            ADSTORAGE a3
    ) a3 ON
    a3.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a3.FIELDNAME = 'SplittedFrom'
LEFT JOIN (
        SELECT
            u.CODE,
            u.USERGENERICGROUPTYPECODE,
            u.LONGDESCRIPTION
        FROM
            USERGENERICGROUP u
    ) u ON
    u.CODE = a.VALUESTRING
    AND u.USERGENERICGROUPTYPECODE = '006'
LEFT JOIN (
        SELECT
            a4.UNIQUEID,
            a4.FIELDNAME,
            a4.VALUESTRING
        FROM
            ADSTORAGE a4
    ) a4 ON
    a4.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a4.FIELDNAME = 'DefectNote'
LEFT JOIN (
        SELECT
            in2.USERPRIMARYQUANTITY,
            in2.CODE,
            in2.SALESORDERLINESALESORDERCODE
        FROM
            ITXVIEW_NETTO in2
    ) in2 ON
    in2.CODE = i.DEAMAND
    AND in2.SALESORDERLINESALESORDERCODE = i.PROJECTCODE
LEFT JOIN (
        SELECT
            ip.ORDPRNCUSTOMERSUPPLIERCODE AS ORDPRNCUSTOMERSUPPLIERCODE2,
            ip.CODE,
            ip.ORDPRNCUSTOMERSUPPLIERCODE,
            ip.LANGGANAN,
            ip.BUYER
        FROM
            ITXVIEW_PELANGGAN ip
    ) ip ON
    ip.ORDPRNCUSTOMERSUPPLIERCODE = i.ORDPRNCUSTOMERSUPPLIERCODE
    AND ip.CODE = i.BONORDER
WHERE
    NOT i.ITEMTYPEAFICODE = 'KGF'
    --	(p.USEDUSERPRIMARYQUANTITY IS NOT NULL OR NOT p.USEDUSERPRIMARYQUANTITY = 0) 
    --	CASE
    --        WHEN i.ITEMTYPEAFICODE = 'KFF' THEN (p.USEDUSERPRIMARYQUANTITY IS NOT NULL OR NOT p.USEDUSERPRIMARYQUANTITY = 0)
    --        WHEN i.ITEMTYPEAFICODE = 'FKF' THEN i.ITEMTYPEAFICODE = 'FKF'
    --    END
    --    AND 
    --    i.PRODUCTIONORDERCODE = '00118771'
    --	AND
    --	TRIM(i.SUBCODE01) || '-' || TRIM(i.SUBCODE02) || '-' || TRIM(i.SUBCODE03) || '-' || TRIM(i.SUBCODE04) || '-' ||
    --    TRIM(i.SUBCODE05) || '-' || TRIM(i.SUBCODE06) || '-' || TRIM(i.SUBCODE07) || '-' || TRIM(i.SUBCODE08) = 'C-SJY-21046-L01-230577L-F106----'
    --    i4.WARNA = '15-4101 TCX'
    --	AND ik.EXTERNALREFERENCE = '230412-SS24-FI-00413'
    --	AND i.SUBCODE02 = 'DKI' AND i.SUBCODE03 = '18019'
    --	AND v.OPERATIONCODE = 'DYE2'
    --	i.DELIVERYDATE BETWEEN '2024-01-01' AND '2024-12-19';


-- DB2ADMIN.ITXVIEW_MEMOPENTINGPPC_WITHOPERATIONS source

CREATE VIEW ITXVIEW_MEMOPENTINGPPC_WITHOPERATIONS AS
SELECT
    DISTINCT v.OPERATIONCODE,
    o.OPERATIONGROUPCODE,
    i.ITEMTYPEAFICODE,
    i.ITEMTYPEAFICODE_YND,
    p2.CREATIONDATETIME AS ORDERDATE,
    TRIM(ip.LANGGANAN) || '|' || TRIM(ip.BUYER) AS PELANGGAN,
    i.PROJECTCODE AS NO_ORDER,
    ik.EXTERNALREFERENCE AS NO_PO,
    TRIM(i.SUBCODE01) || '-' || TRIM(i.SUBCODE02) || '-' || TRIM(i.SUBCODE03) || '-' || TRIM(i.SUBCODE04) || '-' || TRIM(i.SUBCODE05) || '-' || TRIM(i.SUBCODE06) || '-' || TRIM(i.SUBCODE07) || '-' || TRIM(i.SUBCODE08) AS KETERANGAN_PRODUCT,
    i4.WARNA AS WARNA,
    i.SUBCODE05 AS NO_WARNA,
    i.DELIVERYDATE AS DELIVERY,
    p.USEDUSERPRIMARYQUANTITY AS QTY_BAGIKAIN,
    in2.USERPRIMARYQUANTITY AS NETTO,
    CASE
        WHEN DAYS(now()) - DAYS(Timestamp_Format(i.DELIVERYDATE, 'YYYY-MM-DD')) < 0 THEN 0
        ELSE DAYS(now()) - DAYS(Timestamp_Format(i.DELIVERYDATE, 'YYYY-MM-DD'))
    END AS DELAY,
    i.PRODUCTIONORDERCODE AS NO_KK,
    i.DEAMAND AS DEMAND,
    i.ORDERLINE,
    TRIM(i.PROGRESSSTATUS) AS PROGRESSSTATUS,
    CASE
        WHEN u.LONGDESCRIPTION IS NULL THEN ''
        ELSE u.LONGDESCRIPTION
    END || CASE
        WHEN a4.VALUESTRING IS NULL THEN ''
        ELSE a4.VALUESTRING
    END AS KETERANGAN,
    i.ABSUNIQUEID_DEMAND,
    i.REQUIREDDUEDATE,
    a2.VALUESTRING AS OriginalPDCode,
    a3.VALUESTRING AS SplittedFrom,
    i.CREATIONDATETIME_SALESORDER,
    i.PROGRESSSTATUS_DEMAND
FROM
    ITXVIEWKK i
LEFT JOIN ITXVIEW_KGBRUTO ik ON
    ik.PROJECTCODE = i.PROJECTCODE
    AND ik.ORIGDLVSALORDERLINEORDERLINE = i.ORIGDLVSALORDERLINEORDERLINE
    AND ik.CODE = i.DEAMAND
LEFT JOIN ITXVIEW_RESERVATION_KK p ON
    p.ORDERCODE = i.PRODUCTIONDEMANDCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a.FIELDNAME = 'DefectTypeCode'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a2.FIELDNAME = 'OriginalPDCode'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a3.FIELDNAME = 'SplittedFrom'
LEFT JOIN USERGENERICGROUP u ON
    u.CODE = a.VALUESTRING
    AND u.USERGENERICGROUPTYPECODE = '006'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = i.ABSUNIQUEID_DEMAND
    AND a4.FIELDNAME = 'DefectNote'
LEFT JOIN ITXVIEWCOLOR i4 ON
    i4.ITEMTYPECODE = i.ITEMTYPEAFICODE
    AND i4.SUBCODE01 = i.SUBCODE01
    AND i4.SUBCODE02 = i.SUBCODE02
    AND i4.SUBCODE03 = i.SUBCODE03
    AND i4.SUBCODE04 = i.SUBCODE04
    AND i4.SUBCODE05 = i.SUBCODE05
    AND i4.SUBCODE06 = i.SUBCODE06
    AND i4.SUBCODE07 = i.SUBCODE07
    AND i4.SUBCODE08 = i.SUBCODE08
    AND i4.SUBCODE09 = i.SUBCODE09
    AND i4.SUBCODE10 = i.SUBCODE10
LEFT JOIN ITXVIEW_NETTO in2 ON
    in2.CODE = i.DEAMAND
    AND in2.SALESORDERLINESALESORDERCODE = i.PROJECTCODE
LEFT JOIN ITXVIEW_PELANGGAN ip ON
    ip.ORDPRNCUSTOMERSUPPLIERCODE = i.ORDPRNCUSTOMERSUPPLIERCODE
    AND ip.CODE = i.BONORDER
LEFT JOIN PRODUCTIONORDER p2 ON
    p2.CODE = i.PRODUCTIONORDERCODE
LEFT JOIN VIEWPRODUCTIONDEMANDSTEP v ON
    v.PRODUCTIONORDERCODE = i.PRODUCTIONORDERCODE
    AND NOT i.PROGRESSSTATUS = 6
LEFT JOIN OPERATION o ON
    o.CODE = v.OPERATIONCODE
WHERE
    CASE
        WHEN i.ITEMTYPEAFICODE = 'KFF' THEN (
            p.USEDUSERPRIMARYQUANTITY IS NOT NULL
                OR NOT p.USEDUSERPRIMARYQUANTITY = 0
        )
        WHEN i.ITEMTYPEAFICODE = 'FKF' THEN i.ITEMTYPEAFICODE = 'FKF'
    END;


-- DB2ADMIN.ITXVIEW_MRNHEADER_NOINVOICE source

CREATE VIEW ITXVIEW_MRNHEADER_NOINVOICE AS
SELECT
    MRNHEADER.PURCHASEORDERCODE ,
    MRNHEADER.CHALLANNO AS no_sj,
    MRNHEADER.INVOICENO AS no_invoice,
    LISTAGG(
        MRNHEADER.INVOICEDATE,
        '|'
    ) WITHIN GROUP(
    ORDER BY
        MRNHEADER.INVOICEDATE DESC
    ) AS tgl_invoice,
    MRNHEADER.BASICVALUE AS nilai_invoice,
    MRNHEADER.GROSSVALUECC AS nilai_invoiceCC,
    MRNHEADER.CODE AS no_MRN,
    LISTAGG(
        MRNHEADER.CHALLANDATE,
        '|'
    ) WITHIN GROUP(
    ORDER BY
        MRNHEADER.CHALLANDATE DESC
    ) AS TGL_SJ
FROM
    MRNHEADER MRNHEADER
GROUP BY
    MRNHEADER.PURCHASEORDERCODE,
    MRNHEADER.CHALLANNO,
    MRNHEADER.INVOICENO,
    MRNHEADER.BASICVALUE,
    MRNHEADER.GROSSVALUECC,
    MRNHEADER.CODE;


-- DB2ADMIN.ITXVIEW_NETTO source

CREATE VIEW ITXVIEW_NETTO AS
SELECT
    p.CODE,
    s.SALESORDERLINESALESORDERCODE,
    s2.PRICEUNITOFMEASURECODE,
    s2.USERPRIMARYQUANTITY,
    s2.USERPRIMARYUOMCODE,
    s2.USERSECONDARYQUANTITY,
    s2.USERSECONDARYUOMCODE,
    s2.BASESECONDARYQUANTITY,
    s2.BASESECONDARYUOMCODE,
    p2.SECONDARYUNSTEADYCVSFACTOR
FROM
    PRODUCTIONDEMAND p
LEFT JOIN SALESORDERDELIVERY s ON
    s.SALORDLINESALORDERCOMPANYCODE = p.COMPANYCODE
    AND s.SALORDLINESALORDERCOUNTERCODE = p.DLVSALORDLINESALORDCNTCODE
    AND s.SALESORDERLINESALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
    AND s.SALESORDERLINEORDERLINE = p.DLVSALESORDERLINEORDERLINE
    AND s.SALESORDERLINEORDERSUBLINE = p.DLVSALESORDERLINEORDERSUBLINE
    AND s.SALORDLINECOMPONENTORDERLINE = p.DLVSALORDLINECMPORDERLINE
    AND s.DELIVERYLINE = p.DELIVERYDELIVERYLINE
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s.SALESORDERLINESALESORDERCODE
    AND s2.ORDERLINE = s.SALESORDERLINEORDERLINE
LEFT JOIN PRODUCT p2 ON
    p2.SUBCODE01 = s.SUBCODE01
    AND p2.SUBCODE02 = s.SUBCODE02
    AND p2.SUBCODE03 = s.SUBCODE03
    AND p2.SUBCODE04 = s.SUBCODE04
    AND p2.SUBCODE05 = s.SUBCODE05
    AND p2.SUBCODE06 = s.SUBCODE06
    AND p2.SUBCODE07 = s.SUBCODE07
    AND p2.SUBCODE08 = s.SUBCODE08
    AND p2.SUBCODE09 = s.SUBCODE09
    AND p2.SUBCODE10 = s.SUBCODE10;


-- DB2ADMIN.ITXVIEW_NETTO_1 source

CREATE VIEW ITXVIEW_NETTO_1 AS
SELECT
    PROJECTCODE,
    ITEMTYPEAFICODE,
    NAMENAME,
    VALUESTRING,
    CASE
        WHEN ITEMTYPEAFICODE IN (
            'KFF', 'KGF'
        ) THEN
    	SUM(USERPRIMARYQUANTITY)
        ELSE 0
    END AS NETTO,   
    CASE
        WHEN ITEMTYPEAFICODE IN (
            'FKF', 'FKG'
        ) THEN
    	SUM(USERPRIMARYQUANTITY)
        ELSE 0
    END AS NETTO_FK, 
    USERPRIMARYUOMCODE
FROM
    (
        SELECT
            s.SALESORDERLINESALESORDERCODE AS PROJECTCODE,
            s.ITEMTYPEAFICODE AS ITEMTYPEAFICODE,
            a.NAMENAME AS NAMENAME,
            a.VALUESTRING AS VALUESTRING,
            s2.USERPRIMARYQUANTITY AS USERPRIMARYQUANTITY,
            s2.USERPRIMARYUOMCODE AS USERPRIMARYUOMCODE
        FROM
            SALESORDERDELIVERY s
        LEFT JOIN SALESORDERLINE s2 ON
            s2.SALESORDERCODE = s.SALESORDERLINESALESORDERCODE
            AND s2.ORDERLINE = s.SALESORDERLINEORDERLINE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = s.ABSUNIQUEID
            AND a.NAMENAME = 'SampleComments5'
        WHERE
            s2.ITEMTYPEAFICODE IN (
                'FKF', 'FKG', 'KFF', 'KGF'
            )
            --    AND s.SALESORDERLINESALESORDERCODE LIKE '%EXP23%'
            AND a.VALUESTRING IS NULL
        GROUP BY
            s.SALESORDERLINESALESORDERCODE,
            s.ITEMTYPEAFICODE,
            a.NAMENAME,
            a.VALUESTRING,
            s2.USERPRIMARYQUANTITY,
            s2.USERPRIMARYUOMCODE
    )
GROUP BY
    PROJECTCODE,
    ITEMTYPEAFICODE,
    NAMENAME,
    VALUESTRING,
    USERPRIMARYUOMCODE;


-- DB2ADMIN.ITXVIEW_NETTO_SALINAN source

CREATE VIEW ITXVIEW_NETTO_SALINAN AS
SELECT
    p.CODE,
    s.SALESORDERLINESALESORDERCODE,
    s2.PRICEUNITOFMEASURECODE,
    p.USERPRIMARYQUANTITY,
    s2.USERPRIMARYUOMCODE,
    p.USERSECONDARYQUANTITY,
    s2.USERSECONDARYUOMCODE,
    p.BASESECONDARYQUANTITY,
    s2.BASESECONDARYUOMCODE,
    p2.SECONDARYUNSTEADYCVSFACTOR
FROM
    PRODUCTIONDEMAND p
LEFT JOIN SALESORDERDELIVERY s ON
    s.SALORDLINESALORDERCOMPANYCODE = p.COMPANYCODE
    AND s.SALORDLINESALORDERCOUNTERCODE = p.DLVSALORDLINESALORDCNTCODE
    AND s.SALESORDERLINESALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
    AND s.SALESORDERLINEORDERLINE = p.DLVSALESORDERLINEORDERLINE
    AND s.SALESORDERLINEORDERSUBLINE = p.DLVSALESORDERLINEORDERSUBLINE
    AND s.SALORDLINECOMPONENTORDERLINE = p.DLVSALORDLINECMPORDERLINE
    AND s.DELIVERYLINE = p.DELIVERYDELIVERYLINE
LEFT JOIN SALESORDERLINE s2 ON
    s2.PROJECTCODE = s.SALESORDERLINESALESORDERCODE
    AND s2.ORDERLINE = s.SALESORDERLINEORDERLINE
LEFT JOIN PRODUCT p2 ON
    p2.SUBCODE01 = s.SUBCODE01
    AND p2.SUBCODE02 = s.SUBCODE02
    AND p2.SUBCODE03 = s.SUBCODE03
    AND p2.SUBCODE04 = s.SUBCODE04
    AND p2.SUBCODE05 = s.SUBCODE05
    AND p2.SUBCODE06 = s.SUBCODE06
    AND p2.SUBCODE07 = s.SUBCODE07
    AND p2.SUBCODE08 = s.SUBCODE08
    AND p2.SUBCODE09 = s.SUBCODE09
    AND p2.SUBCODE10 = s.SUBCODE10;


-- DB2ADMIN.ITXVIEW_NOITEM source

CREATE VIEW ITXVIEW_NOITEM AS
SELECT
    s.CODE,
    s.ORDPRNCUSTOMERSUPPLIERCODE,
    s2.ORDERLINE,
    s2.ITEMTYPEAFICODE,
    s2.SUBCODE01,
    s2.SUBCODE02,
    s2.SUBCODE03,
    s2.SUBCODE04,
    s2.SUBCODE05,
    s2.SUBCODE06,
    s2.SUBCODE07,
    s2.SUBCODE08,
    s2.SUBCODE09,
    s2.SUBCODE10,
    s2.EXTERNALITEM
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s.CODE
    AND s2.SALESORDERCOUNTERCODE = s.COUNTERCODE;


-- DB2ADMIN.ITXVIEW_NOTEBUKTIMUTASI_KNT source

CREATE VIEW ITXVIEW_NOTEBUKTIMUTASI_KNT AS
SELECT
    ADSTORAGE.FIELDNAME,
    ADSTORAGE.VALUESTRING,
    ADSTORAGE.UNIQUEID,
    ELEMENTS.CODE
FROM
    DB2ADMIN.ELEMENTS ELEMENTS
LEFT OUTER JOIN DB2ADMIN.ADSTORAGE ADSTORAGE ON
    ELEMENTS.ABSUNIQUEID = ADSTORAGE.UNIQUEID
WHERE
    ADSTORAGE.NAMENAME = 'Note';


-- DB2ADMIN.ITXVIEW_NOTE_BENANG source

CREATE VIEW ITXVIEW_NOTE_BENANG AS
SELECT
    s.*,
    a.VALUESTRING AS SP,
    a1.VALUESTRING AS NT,
    a2.VALUEDATE AS TG,
    ft.SUMMARIZEDDESCRIPTION
FROM
    STOCKTRANSACTION s
LEFT OUTER JOIN ADSTORAGE a ON
    s.ABSUNIQUEID = a.UNIQUEID
    AND a.NAMENAME = 'CodeSupp'
LEFT OUTER JOIN ADSTORAGE a1 ON
    s.ABSUNIQUEID = a1.UNIQUEID
    AND a1.NAMENAME = 'NoteGYR'
LEFT OUTER JOIN ADSTORAGE a2 ON
    s.ABSUNIQUEID = a2.UNIQUEID
    AND a2.NAMENAME = 'ProdDate'
LEFT OUTER JOIN DB2ADMIN.FULLITEMKEYDECODER ft ON
    s.FULLITEMIDENTIFIER = ft.IDENTIFIER;


-- DB2ADMIN.ITXVIEW_NO_ORDER_EXIM source

CREATE VIEW ITXVIEW_NO_ORDER_EXIM AS
SELECT
    ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE,
    TRIM(ITXVIEW_SURATJALAN_EXIM.PROJECTCODE) AS NO_ORDER
FROM
    ITXVIEW_SURATJALAN_EXIM ITXVIEW_SURATJALAN_EXIM
GROUP BY
    ITXVIEW_SURATJALAN_EXIM.PROVISIONALCODE,
    ITXVIEW_SURATJALAN_EXIM.PROJECTCODE;


-- DB2ADMIN.ITXVIEW_NO_PROJECTS_EXIM source

CREATE VIEW ITXVIEW_NO_PROJECTS_EXIM AS
SELECT
    ITXVIEW_SURATJALAN_EXIM2A.PROVISIONALCODE,
    LISTAGG(
        DISTINCT(
            TRIM(ITXVIEW_SURATJALAN_EXIM2A.PROJECTCODE)
        ),
        ', '
    ) AS PROJECT
FROM
    ITXVIEW_SURATJALAN_EXIM2A ITXVIEW_SURATJALAN_EXIM2A
GROUP BY
    ITXVIEW_SURATJALAN_EXIM2A.PROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_NO_PR_PURCHASE source

--DROP VIEW ITXVIEW_NO_PR_PURCHASE
CREATE VIEW ITXVIEW_NO_PR_PURCHASE AS
SELECT
    REPLENISHMENTREQUISITION.LINEPURCHASEORDERCODE ,
    LISTAGG(
        DISTINCT(
            TRIM(REPLENISHMENTREQUISITION.HEADERCODE)
        ),
        ', '
    ) AS HEADER_CODE,
    LISTAGG(
        DISTINCT(
            TRIM(REPLENISHMENTREQUISITION.RFQDETAILRFQHEADERCODE)
        ),
        ', '
    ) AS RFQHEADER_CODE
FROM
    REPLENISHMENTREQUISITION REPLENISHMENTREQUISITION
WHERE
    LINEPURCHASEORDERCODE <> ''
GROUP BY
    REPLENISHMENTREQUISITION.LINEPURCHASEORDERCODE;


-- DB2ADMIN.ITXVIEW_OPENTICKET_MTC source

CREATE VIEW ITXVIEW_OPENTICKET_MTC AS
SELECT
    p.CODE,
    p.CREATIONUSER,
    p.CREATIONDATETIME,
    p.PMBOMCODE,
    p.DEPARTMENTCODE,
    d.LONGDESCRIPTION AS DEPTNAME,
    p.RESPONSIBLEOFSCHEDULINGUSERID,
    p.DEFAULTASSIGNEDTOUSERID,
    CASE
        WHEN p.PRIORITYLEVEL = '0' THEN 'Very High'
        WHEN p.PRIORITYLEVEL = '1' THEN 'High'
        WHEN p.PRIORITYLEVEL = '2' THEN 'Medium'
        WHEN p.PRIORITYLEVEL = '3' THEN 'Normal'
        WHEN p.PRIORITYLEVEL = '4' THEN 'Low'
    END AS PRIORITYLEVEL,
    CASE
        WHEN p.STATUS = '1' THEN 'Open'
        WHEN p.STATUS = '2' THEN 'In Progress'
        WHEN p.STATUS = '3' THEN 'Closed'
        WHEN p.STATUS = '4' THEN 'Suspended'
    END AS STATUS,
    p.SYMPTOM AS PERMASALAHAN,
    p2.REMARKS AS PERBAIKAN
FROM
    PMBREAKDOWNENTRY p
LEFT JOIN PMWORKORDER p2 ON
    p2.PMBREAKDOWNENTRYCODE = p.CODE
LEFT JOIN DEPARTMENT d ON
    d.CODE = p.DEPARTMENTCODE
    --WHERE
    --	TRIM(p.DEPARTMENTCODE) = 'D005';


-- DB2ADMIN.ITXVIEW_ORDER_INVOICE source

CREATE VIEW ITXVIEW_ORDER_INVOICE AS
SELECT
    ITXVIEW_HEADERINVOICE.NO_INVOICE,
    LISTAGG(
        DISTINCT(
            TRIM(ITXVIEW_HEADERINVOICE.BON_ORDER)
        ),
        ', '
    ) AS BON_ORDER
FROM
    ITXVIEW_HEADERINVOICE ITXVIEW_HEADERINVOICE
    --    WHERE NO_INVOICE = 'SE2200182'
GROUP BY
    ITXVIEW_HEADERINVOICE.NO_INVOICE;


-- DB2ADMIN.ITXVIEW_PACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_PACKINGLIST_EXIM AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.COMPANYCODE,
    SALESDOCUMENT.PROVISIONALCOUNTERCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.NUMBERPLATE AS VESSEL_NM,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.ABSUNIQUEID,
    SALESORDER.CODE AS PROJECTCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    LOGICALWAREHOUSE.CODE AS LOGICALWAREHOUSE_CODE,
    LOGICALWAREHOUSE.LONGDESCRIPTION,
    ALLOCATION.CODE,
    ALLOCATION.LOTCODE,
    ALLOCATION.DESTINATIONTYPE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE,
    ALLOCATION.ITEMELEMENTCODE,
    BUSINESSPARTNER.COUNTRYCODE AS PARTNER_COUNTRYCODE,
    BUSINESSPARTNER.NUMBERID AS MESSRS_ID,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSLINE1 AS PARTNER_ADDRES1,
    BUSINESSPARTNER.ADDRESSLINE2 AS PARTNER_ADDRES2,
    BUSINESSPARTNER.ADDRESSLINE3 AS PARTNER_ADDRES3,
    BUSINESSPARTNER.ADDRESSLINE4 AS PARTNER_ADDRES4,
    BUSINESSPARTNER.TOWN AS PARTNER_TOWN,
    BUSINESSPARTNER.DISTRICT AS PARTNER_DISTRICT,
    BUSINESSPARTNER.ADDRESSPHONENUMBER AS PARTNER_PHONE,
    PAYMENTMETHOD.LONGDESCRIPTION AS TERM_DESC,
    USERGENERICGROUP.LONGDESCRIPTION AS COLOR_DESC,
    SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    ADDRESS.CODE AS CONSIGNEE_ID,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND SALESDOCUMENT.PROVISIONALCOUNTERCODE = SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE
    AND SALESDOCUMENT.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE = SALESORDER.CODE
    AND SALESDOCUMENTLINE.DLVSALORDLINESALORDCNTCODE = SALESORDER.COUNTERCODE
LEFT JOIN ADDRESS ADDRESS ON
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND SALESDOCUMENT.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
    AND SALESDOCUMENT.COMPANYCODE = ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENTLINE.SUBCODE08 = ALLOCATION.DECOSUBCODE08
    AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
WHERE
    ALLOCATION.ORDERCODE IS NOT NULL;


-- DB2ADMIN.ITXVIEW_PACKINGLIST_EXIM_SINTEX source

CREATE VIEW ITXVIEW_PACKINGLIST_EXIM_SINTEX AS
SELECT
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.COMPANYCODE,
    SALESDOCUMENT.PROVISIONALCOUNTERCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.NUMBERPLATE AS VESSEL_NM,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.ABSUNIQUEID,
    SALESORDER.CODE AS PROJECTCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    LEFT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 12) AS SP#,
    RIGHT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 2) AS SEQ1,
    RIGHT(SALESDOCUMENTLINE.EXTERNALREFERENCE, 2) AS SEQ2,
    CASE
        WHEN SALESDOCUMENTLINE.EXTERNALITEM IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02)|| TRIM(SALESDOCUMENTLINE.SUBCODE03)
        ELSE SALESDOCUMENTLINE.EXTERNALITEM
    END AS EXTERNALITEM,
    CASE
        WHEN SALESDOCUMENTLINE.EXTERNALITEM IS NULL THEN TRIM(SALESDOCUMENTLINE.SUBCODE02)|| TRIM(SALESDOCUMENTLINE.SUBCODE03)
    END AS ket_ref#,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    LOGICALWAREHOUSE.CODE AS LOGICALWAREHOUSE_CODE,
    LOGICALWAREHOUSE.LONGDESCRIPTION,
    ALLOCATION.CODE,
    ALLOCATION2.LOTCODE,
    ALLOCATION.DESTINATIONTYPE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE,
    E.CODE AS ELEMENTCODE,
    USERGENERICGROUP.LONGDESCRIPTION AS COLOR_DESC,
    SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    count(ALLOCATION.CODE) AS jml_roll,
    ALLOCATION2.USERPRIMARYQUANTITY AS jml_kg,
    ALLOCATION2.USERSECONDARYQUANTITY AS jml_yd,
    ALLOCATION2.USERPRIMARYQUANTITY + 0.6 AS jml_gw,
    round(ALLOCATION2.USERSECONDARYQUANTITY * 0.9144 , 2) AS jml_meter,
    CASE
            WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION2.USERPRIMARYQUANTITY
        ELSE 0
    END AS QTY_FOC_kg,
        CASE
            WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION2.USERSECONDARYQUANTITY
        ELSE 0
    END AS QTY_FOC_yd,
        CASE
        WHEN E.QUALITYREASONCODE = 'FOC' THEN E.QUALITYREASONCODE
        ELSE '-'
    END AS QUALITYREASON,
    i.EXTERNALREFERENCE AS hscode
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND SALESDOCUMENT.PROVISIONALCOUNTERCODE = SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE
    AND SALESDOCUMENT.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
LEFT JOIN SALESORDER SALESORDER ON
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE = SALESORDER.CODE
    AND SALESDOCUMENTLINE.DLVSALORDLINESALORDCNTCODE = SALESORDER.COUNTERCODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN LOGICALWAREHOUSE LOGICALWAREHOUSE ON
    SALESDOCUMENTLINE.WAREHOUSECODE = LOGICALWAREHOUSE.CODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENTLINE.SUBCODE08 = ALLOCATION.DECOSUBCODE08
    AND SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
    AND SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
LEFT JOIN ITXVIEWORDERITEMLINKACTIVE i ON
    ALLOCATION.ITEMTYPECODE = i.ITEMTYPEAFICODE
    AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
    AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
    AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
    AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
    AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
    AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
    AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
    AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '0'
    )ALLOCATION2 ON
        ALLOCATION.CODE = ALLOCATION2.CODE
    AND ALLOCATION.DECOSUBCODE01 = ALLOCATION2.DECOSUBCODE01
    AND ALLOCATION.DECOSUBCODE02 = ALLOCATION2.DECOSUBCODE02
    AND ALLOCATION.DECOSUBCODE03 = ALLOCATION2.DECOSUBCODE03
    AND ALLOCATION.DECOSUBCODE04 = ALLOCATION2.DECOSUBCODE04
    AND ALLOCATION.DECOSUBCODE05 = ALLOCATION2.DECOSUBCODE05
    AND ALLOCATION.DECOSUBCODE06 = ALLOCATION2.DECOSUBCODE06
    AND ALLOCATION.DECOSUBCODE07 = ALLOCATION2.DECOSUBCODE07
    AND ALLOCATION.DECOSUBCODE08 = ALLOCATION2.DECOSUBCODE08
LEFT JOIN ELEMENTS E ON
        E.CODE = ALLOCATION2.ITEMELEMENTCODE
WHERE
    ALLOCATION.ORDERCODE IS NOT NULL
    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    --    AND SALESDOCUMENT.PROVISIONALCODE = 'PED2300448'
GROUP BY 
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.COMPANYCODE,
    SALESDOCUMENT.PROVISIONALCOUNTERCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.NUMBERPLATE,
    SALESDOCUMENT.TRANSPORTSTARTDATE,
    SALESDOCUMENT.TERMSOFSHIPPINGCODE,
    SALESDOCUMENT.DELIVERYPOINTUNIQUEID,
    SALESDOCUMENT.PAYMENTCUSTOMERCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.ABSUNIQUEID,
    SALESORDER.CODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.EXTERNALITEM,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    LOGICALWAREHOUSE.CODE,
    LOGICALWAREHOUSE.LONGDESCRIPTION,
    ALLOCATION.CODE,
    ALLOCATION2.LOTCODE,
    ALLOCATION.DESTINATIONTYPE,
    ALLOCATION.ORDERCODE,
    ALLOCATION.ORDERLINE,
    E.CODE,
    USERGENERICGROUP.LONGDESCRIPTION,
    SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    E.QUALITYREASONCODE,
    i.EXTERNALREFERENCE,
    ALLOCATION2.USERSECONDARYQUANTITY,
    ALLOCATION2.USERPRIMARYQUANTITY;


-- DB2ADMIN.ITXVIEW_PACKINGLIST_PPC source

CREATE VIEW ITXVIEW_PACKINGLIST_PPC AS
SELECT
    DISTINCT 
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.CODE,
    ALLOCATION.PROJECTCODE,
    SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.LOTCODE,
    ALLOCATION.BASESECONDARYUOMCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
LEFT OUTER JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    CUSTOMERSUPPLIERDATA.CODE = ALLOCATION.CUSTOMERCODE
LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID
RIGHT OUTER JOIN DB2ADMIN.WRKDOCUMENTPRINT WRKDOCUMENTPRINT ON
    ALLOCATION.ORDERCODE = WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.SALESDOCUMENT SALESDOCUMENT ON
    ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND ALLOCATION.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
    AND ALLOCATION.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND ALLOCATION.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND ALLOCATION.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND ALLOCATION.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND ALLOCATION.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND ALLOCATION.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND ALLOCATION.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND ALLOCATION.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND ALLOCATION.DECOSUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
    AND ALLOCATION.DECOSUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
    AND ALLOCATION.ORDERLINE = SALESDOCUMENTLINE.ORDERLINE
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL;


-- DB2ADMIN.ITXVIEW_PACKINGLIST_PPCX source

CREATE VIEW ITXVIEW_PACKINGLIST_PPCX AS
SELECT
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.CODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ITXVIEWALLOCATION0.LOTCODE,
    ALLOCATION.BASESECONDARYUOMCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    BUSINESSPARTNER BUSINESSPARTNER
LEFT OUTER JOIN DB2ADMIN.CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    BUSINESSPARTNER.NUMBERID = CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID
LEFT OUTER JOIN DB2ADMIN.ALLOCATION ALLOCATION ON
    CUSTOMERSUPPLIERDATA.CODE = ALLOCATION.CUSTOMERCODE
RIGHT OUTER JOIN DB2ADMIN.WRKDOCUMENTPRINT WRKDOCUMENTPRINT ON
    ALLOCATION.PROJECTCODE = WRKDOCUMENTPRINT.PROJECTLONGDESCRIPTION
    AND ALLOCATION.ORDERCODE = WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.SALESDOCUMENT SALESDOCUMENT ON
    WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
    AND WRKDOCUMENTPRINT.PROJECTLONGDESCRIPTION = SALESDOCUMENT.PROJECTCODE
RIGHT OUTER JOIN DB2ADMIN.SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT OUTER JOIN ITXVIEWALLOCATION0 ON
    ALLOCATION.CODE = ITXVIEWALLOCATION0.CODE
GROUP BY
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.CODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ITXVIEWALLOCATION0.LOTCODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.BASESECONDARYUOMCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    ORDERPARTNERBRAND.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_PACKINGLIST_PPC_PFD source

CREATE VIEW ITXVIEW_PACKINGLIST_PPC_PFD AS
SELECT
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.CODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.LOTCODE,
    ALLOCATION.BASESECONDARYUOMCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    DB2ADMIN.ALLOCATION ALLOCATION
LEFT OUTER JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    CUSTOMERSUPPLIERDATA.CODE = ALLOCATION.CUSTOMERCODE
LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID
RIGHT OUTER JOIN DB2ADMIN.WRKDOCUMENTPRINT WRKDOCUMENTPRINT ON
    ALLOCATION.PROJECTCODE = WRKDOCUMENTPRINT.PROJECTLONGDESCRIPTION
    AND ALLOCATION.ORDERCODE = WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.SALESDOCUMENT SALESDOCUMENT ON
    ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND ALLOCATION.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
    AND ALLOCATION.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND ALLOCATION.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND ALLOCATION.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND ALLOCATION.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND ALLOCATION.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND ALLOCATION.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND ALLOCATION.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND ALLOCATION.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND ALLOCATION.DECOSUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
    AND ALLOCATION.DECOSUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
GROUP BY
    BUSINESSPARTNER.LEGALNAME1,
    ALLOCATION.CODE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.LOTCODE,
    ALLOCATION.PROJECTCODE,
    ALLOCATION.BASESECONDARYUOMCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.EXTERNALREFERENCE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE,
    ORDERPARTNERBRAND.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_PANJANGKAIN source

CREATE VIEW ITXVIEW_PANJANGKAIN AS
SELECT
    ir.ORDERCODE,
    ir.USERPRIMARYQUANTITY,
    in2.SECONDARYUNSTEADYCVSFACTOR,
    (
        (ir.USERPRIMARYQUANTITY) * (in2.SECONDARYUNSTEADYCVSFACTOR) * 0.9144
    ) AS PANJANG_KAIN
FROM
    ITXVIEW_RESERVATION ir
LEFT JOIN ITXVIEW_NETTO in2 ON
    in2.CODE = ir.ORDERCODE;


-- DB2ADMIN.ITXVIEW_PAYMENTINV source

CREATE VIEW ITXVIEW_PAYMENTINV AS
SELECT
    ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
    trim(PLANTINVOICE.CODE) AS Invoice,
    trim(SALESDOCUMENTLINE.PREVIOUSCODE) AS no_sj,
    trim(PLANTINVOICE.INVOICEDATE) AS tgl_inv,
    trim(PLANTINVOICE.TERMSOFPAYMENTCODE) AS payment_terms,
    trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
    trim(PLANTINVOICE.CONSIGNEECUSTOMERSUPPLIERCODE) AS kode_cus,
    trim(BUSINESSPARTNER.LEGALNAME1) AS nama_cus,
    trim(PLANTINVOICE.ORDERCURRENCYCODE) AS curr,
    trim(PLANTINVOICE.EXCHANGERATEOFCONTRACT) AS rate,
    trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
    trim(PLANTINVOICELINE.TAXTEMPLATECODE) AS PPN,
    trim(PLANTINVOICE.BLNUMBER)AS FAKTUR_PAJAK,
    trim(BUSINESSPARTNER.TAXREGISTRATIONNUMBER) AS NPWP,
    SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))AS BERAT,
    SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))AS BERAT_LAIN,
    trim(SALESDOCUMENTLINE.price) AS harga_satuan
FROM
    PLANTINVOICE PLANTINVOICE
LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
    PLANTINVOICE.CODE = PLANTINVOICELINE.PLANTINVOICECODE
LEFT JOIN SALESORDER SALESORDER ON
    PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
    PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
    AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
    PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
LEFT JOIN ORDERPARTNERIE ORDERPARTNERIE ON
    SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERIE.CUSTOMERSUPPLIERCODE
LEFT JOIN GLMASTER GLMASTER ON
    ORDERPARTNERIE.GLCODE = GLMASTER.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '1'
    )ALLOCATION ON
    SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
    AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
    AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
    AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
    AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
    AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
    AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
    AND SALESDOCUMENTLINE.PROJECTCODE = ALLOCATION.PROJECTCODE
    AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
    ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
GROUP BY
    ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
    PLANTINVOICE.CODE,
    SALESDOCUMENTLINE.PREVIOUSCODE,
    PLANTINVOICE.INVOICEDATE,
    PLANTINVOICE.TERMSOFPAYMENTCODE,
    PLANTINVOICE.CONTRACTNOCODE,
    PLANTINVOICE.CONSIGNEECUSTOMERSUPPLIERCODE,
    BUSINESSPARTNER.LEGALNAME1,
    PLANTINVOICE.ORDERCURRENCYCODE,
    PLANTINVOICE.EXCHANGERATEOFCONTRACT,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    PLANTINVOICELINE.TAXTEMPLATECODE,
    PLANTINVOICE.BLNUMBER,
    BUSINESSPARTNER.TAXREGISTRATIONNUMBER,
    SALESDOCUMENTLINE.price;


-- DB2ADMIN.ITXVIEW_PELANGGAN source

CREATE VIEW ITXVIEW_PELANGGAN AS
SELECT
    s.CODE,
    s.ORDPRNCUSTOMERSUPPLIERCODE,
    trim(b.LEGALNAME1) AS LANGGANAN,
    trim(s.ORDERPARTNERBRANDCODE) AS BUYER
FROM
    SALESORDER s
LEFT JOIN ORDERPARTNER o ON
    o.CUSTOMERSUPPLIERCODE = s.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER b ON
    b.NUMBERID = o.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN ORDERPARTNERBRAND o2 ON
    o2.ORDPRNCUSTOMERSUPPLIERCODE = s.ORDPRNCUSTOMERSUPPLIERCODE
GROUP BY
    s.CODE,
    s.ORDPRNCUSTOMERSUPPLIERCODE,
    b.LEGALNAME1,
    s.ORDERPARTNERBRANDCODE;


-- DB2ADMIN.ITXVIEW_PENGIRIMAN source

CREATE VIEW ITXVIEW_PENGIRIMAN AS 
SELECT
    DISTINCT
    i.PROVISIONALCODE,
    TRIM(i.PRICEUNITOFMEASURECODE) AS PRICEUNITOFMEASURECODE,
    i.DEFINITIVECOUNTERCODE,
    i.DEFINITIVEDOCUMENTDATE,
    i.ORDERPARTNERBRANDCODE,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN ''
        ELSE i.PO_NUMBER
    END AS PO_NUMBER,
    i.PROJECTCODE,
    DAY(i.GOODSISSUEDATE) || '-' || MONTHNAME(i.GOODSISSUEDATE) || '-' || YEAR(i.GOODSISSUEDATE) AS GOODSISSUEDATE,
    i.ORDPRNCUSTOMERSUPPLIERCODE,
    i.PAYMENTMETHODCODE,   
    i.ITEMTYPEAFICODE,
    i.DLVSALORDERLINESALESORDERCODE AS NO_ORDER,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN ''
        ELSE i.DLVSALORDERLINESALESORDERCODE
    END AS DLVSALORDERLINESALESORDERCODE,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN 0
        ELSE i.DLVSALESORDERLINEORDERLINE
    END AS DLVSALESORDERLINEORDERLINE,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN ''
        ELSE 
            TRIM(i.SUBCODE01) || '-' || TRIM(i.SUBCODE02) || '-' || TRIM(i.SUBCODE03) || '-' || TRIM(i.SUBCODE04) || '-' ||
            TRIM(i.SUBCODE05) || '-' || TRIM(i.SUBCODE06) || '-' || TRIM(i.SUBCODE07) || '-' || TRIM(i.SUBCODE08)
    END AS ITEMDESCRIPTION,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
	        TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
	        TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
	        TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
	        TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
	        TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN ''
        ELSE iasp.LOTCODE
    END AS LOTCODE,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN ''
        ELSE i2.WARNA
    END AS WARNA,
    i.LEGALNAME1,
    CASE
        WHEN TRIM(i.DEFINITIVECOUNTERCODE) = 'CESDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'CESPROV'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DREDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'DREPROV'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'DSEDEF'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXDPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPDEF'
        OR
            TRIM(i.DEFINITIVECOUNTERCODE) = 'EXPPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEDEF'
        OR 
            TRIM(i.DEFINITIVECOUNTERCODE) = 'GSEPROV'
        OR TRIM(i.DEFINITIVECOUNTERCODE) = 'PSEPROV' THEN 'EXPORT'
        ELSE i.CODE
    END AS CODE
FROM 
    ITXVIEW_SURATJALAN_PPC_FOR_POSELESAI i
LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
    iasp.CODE = i.CODE
LEFT JOIN ITXVIEWCOLOR i2 ON
    i2.ITEMTYPECODE = i.ITEMTYPEAFICODE
    AND i2.SUBCODE01 = i.SUBCODE01
    AND i2.SUBCODE02 = i.SUBCODE02
    AND i2.SUBCODE03 = i.SUBCODE03
    AND i2.SUBCODE04 = i.SUBCODE04
    AND i2.SUBCODE05 = i.SUBCODE05
    AND i2.SUBCODE06 = i.SUBCODE06
    AND i2.SUBCODE07 = i.SUBCODE07
    AND i2.SUBCODE08 = i.SUBCODE08
    AND i2.SUBCODE09 = i.SUBCODE09
    AND i2.SUBCODE10 = i.SUBCODE10
WHERE
    --    i.DLVSALORDERLINESALESORDERCODE = 'RFD2300070' 
    --    AND
    i.DOCUMENTTYPETYPE = 05
    AND NOT i.CODE IS NULL
    AND i.PROGRESSSTATUS_SALDOC = 2
GROUP BY
    i.PROVISIONALCODE,
    i.PRICEUNITOFMEASURECODE,
    i.DEFINITIVEDOCUMENTDATE,
    i.ORDERPARTNERBRANDCODE,
    i.PO_NUMBER,
    i.PROJECTCODE,
    i.GOODSISSUEDATE,
    i.ORDPRNCUSTOMERSUPPLIERCODE,
    i.PAYMENTMETHODCODE,
    i.PO_NUMBER,    
    i.ITEMTYPEAFICODE,
    i.DLVSALORDERLINESALESORDERCODE,
    i.DLVSALESORDERLINEORDERLINE,
    i.ITEMDESCRIPTION,
    iasp.LOTCODE,
    i.DEFINITIVECOUNTERCODE,
    i2.WARNA,
    i.LEGALNAME1,
    i.CODE,
    i.SUBCODE01,
    i.SUBCODE02,
    i.SUBCODE03,
    i.SUBCODE04,
    i.SUBCODE05,
    i.SUBCODE06,
    i.SUBCODE07,
    i.SUBCODE08,
    i.SUBCODE09,
    i.SUBCODE10
    --ORDER BY 
    --    i.PROVISIONALCODE ASC;


-- DB2ADMIN.ITXVIEW_PERSEDIAANGKJ source

CREATE VIEW ITXVIEW_PERSEDIAANGKJ AS
SELECT
    VARCHAR_FORMAT(BALANCE.CREATIONDATETIME, 'dd MONTH yyyy') AS TGL_BALANCE,
    trim(BALANCE.DECOSUBCODE02) || trim(BALANCE.DECOSUBCODE03) AS NO_ITEM,
    trim(BUSINESSPARTNER.LEGALNAME1) AS LANGGANAN,
    CASE 
        WHEN trim(SALESORDER.ORDERPARTNERBRANDCODE) IS NULL THEN 'Periksa kembali kolom BRAND di SALESORDER. User : ' || trim(SALESORDER.CREATIONUSER)
        ELSE trim(SALESORDER.ORDERPARTNERBRANDCODE)
    END AS BUYER,
    CASE 
        WHEN trim(SALESORDER.EXTERNALREFERENCE) IS NULL THEN trim(SALESORDERLINE.EXTERNALREFERENCE)
        ELSE trim(SALESORDER.EXTERNALREFERENCE)
    END AS PO,
    BALANCE.PROJECTCODE AS NO_ORDER,
    trim(SALESORDERLINE.ITEMDESCRIPTION) AS JENIS_KAIN,
    BALANCE.DECOSUBCODE05 AS NO_WARNA,
    USERGENERICGROUP.LONGDESCRIPTION AS WARNA,
    CASE 
        WHEN trim(SALESORDER.REQUIREDDUEDATE) IS NULL THEN 'Periksa kembali kolom REQUEST DUE DATE & CONFIRM DUE DATE di SALESORDER. User : ' || trim(SALESORDER.CREATIONUSER)
        ELSE VARCHAR_FORMAT(SALESORDER.REQUIREDDUEDATE, 'dd MONTH yyyy')
    END AS DELIVERY,	
    BALANCE.LOTCODE AS LOT,
    BALANCE.ELEMENTSCODE AS SN ,
    BALANCE.BASEPRIMARYQUANTITYUNIT AS KG,
    CASE 
        WHEN BALANCE.QUALITYLEVELCODE = '1' THEN 'A'
        WHEN BALANCE.QUALITYLEVELCODE = '2' THEN 'B'
        ELSE 'C'
    END AS GRADE,
    BALANCE.BASESECONDARYQUANTITYUNIT AS LENGTH,
    BALANCE.BASESECONDARYUNITCODE AS SATUAN,
    BALANCE.WAREHOUSELOCATIONCODE AS LOKASI,
    trim(SALESORDER.CREATIONUSER) AS USER_SALESORDER,
    CASE
        WHEN STOCKTRANSACTION.QUALITYREASONCODE IS NULL THEN 
        CASE 
            WHEN SUBSTRING(STOCKTRANSACTION.PROJECTCODE, 0, 4) = 'OPN' THEN 'Booking'
            WHEN SUBSTRING(STOCKTRANSACTION.PROJECTCODE, 0, 4) = 'STO' THEN 'Booking'
            WHEN SUBSTRING(STOCKTRANSACTION.PROJECTCODE, 0, 4) = 'RPE' THEN 'Ganti Kain '
            ELSE 'Tunggu Kirim'
        END
        ELSE QUALITYREASON.LONGDESCRIPTION
    END AS STATUS_KAIN
FROM
    BALANCE BALANCE
LEFT JOIN SALESORDER SALESORDER ON
    BALANCE.PROJECTCODE = SALESORDER.CODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    BALANCE.DECOSUBCODE05 = USERGENERICGROUP.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE = BALANCE.LOTCODE
    AND PRODUCTIONRESERVATION.PROJECTCODE = BALANCE.PROJECTCODE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = BALANCE.PROJECTCODE
    AND BALANCE.DECOSUBCODE01 = SALESORDERLINE.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = SALESORDERLINE.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = SALESORDERLINE.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = SALESORDERLINE.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = SALESORDERLINE.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = SALESORDERLINE.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = SALESORDERLINE.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = SALESORDERLINE.SUBCODE08
    AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            *
        FROM
            (
                SELECT
                    ROW_NUMBER() OVER(
                    ORDER BY
                        STOCKTRANSACTION.CREATIONDATETIME DESC
                    ) AS MYROW,
                    STOCKTRANSACTION.ITEMELEMENTCODE,
                    STOCKTRANSACTION.PROJECTCODE,
                    STOCKTRANSACTION.QUALITYREASONCODE
                FROM
                    STOCKTRANSACTION
            )
    )STOCKTRANSACTION ON
    STOCKTRANSACTION.ITEMELEMENTCODE = BALANCE.ELEMENTSCODE
    AND STOCKTRANSACTION.PROJECTCODE = BALANCE.PROJECTCODE
LEFT JOIN QUALITYREASON QUALITYREASON ON
    STOCKTRANSACTION.QUALITYREASONCODE = QUALITYREASON.CODE
WHERE
    BALANCE.ITEMTYPECODE = 'KFF'
    AND BALANCE.LOGICALWAREHOUSECODE = 'M031'
    AND BALANCE.LOTCODE LIKE '%000%'
    AND VARCHAR_FORMAT(BALANCE.CREATIONDATETIME, 'yyyy') = '2022'
    AND NOT SALESORDER.CODE IS NULL
GROUP BY 
    BALANCE.CREATIONDATETIME,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BUSINESSPARTNER.LEGALNAME1,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.ITEMDESCRIPTION,
    BALANCE.PROJECTCODE,
    BALANCE.DECOSUBCODE05,
    USERGENERICGROUP.LONGDESCRIPTION,
    SALESORDER.REQUIREDDUEDATE,	
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.QUALITYLEVELCODE,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    SALESORDER.CREATIONUSER,
    STOCKTRANSACTION.QUALITYREASONCODE,
    STOCKTRANSACTION.PROJECTCODE,
    QUALITYREASON.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_PERSEDIAANKAINJADI source

CREATE VIEW ITXVIEW_PERSEDIAANKAINJADI AS
SELECT
    VARCHAR_FORMAT (
        BALANCE.CREATIONDATETIME,
        'dd MONTH yyyy'
    ) AS TGL_BALANCE,
    trim(BALANCE.DECOSUBCODE02) || trim(BALANCE.DECOSUBCODE03) AS NO_ITEM,
    trim(BUSINESSPARTNER.LEGALNAME1) AS LANGGANAN,
    CASE
        WHEN trim(SALESORDER.ORDERPARTNERBRANDCODE) IS NULL THEN 'Periksa kembali kolom BRAND di SALESORDER. User : ' || trim(SALESORDER.CREATIONUSER)
        ELSE trim(SALESORDER.ORDERPARTNERBRANDCODE)
    END AS BUYER,
    CASE
        WHEN trim(SALESORDER.EXTERNALREFERENCE) IS NULL THEN trim(SALESORDERLINE.EXTERNALREFERENCE)
        ELSE trim(SALESORDER.EXTERNALREFERENCE)
    END AS PO,
    BALANCE.PROJECTCODE AS NO_ORDER,
    trim(SALESORDERLINE.ITEMDESCRIPTION) AS JENIS_KAIN,
    BALANCE.DECOSUBCODE05 AS NO_WARNA,
    USERGENERICGROUP.LONGDESCRIPTION AS WARNA,
    CASE
        WHEN trim(SALESORDER.REQUIREDDUEDATE) IS NULL THEN 'Periksa kembali kolom REQUEST DUE DATE & CONFIRM DUE DATE di SALESORDER. User : ' || trim(SALESORDER.CREATIONUSER)
        ELSE VARCHAR_FORMAT (
            SALESORDER.REQUIREDDUEDATE,
            'dd MONTH yyyy'
        )
    END AS DELIVERY,
    BALANCE.LOTCODE AS LOT,
    BALANCE.ELEMENTSCODE AS SN,
    BALANCE.BASEPRIMARYQUANTITYUNIT AS KG,
    CASE
        WHEN BALANCE.QUALITYLEVELCODE = '1' THEN 'A'
        WHEN BALANCE.QUALITYLEVELCODE = '2' THEN 'B'
        ELSE 'C'
    END AS GRADE,
    BALANCE.BASESECONDARYQUANTITYUNIT AS LENGTH,
    BALANCE.BASESECONDARYUNITCODE AS SATUAN,
    BALANCE.WAREHOUSELOCATIONCODE AS LOKASI,
    trim(SALESORDER.CREATIONUSER) AS USER_SALESORDER,
    CASE
        WHEN STOCKTRANSACTION.QUALITYREASONCODE IS NULL THEN CASE
            WHEN SUBSTRING( STOCKTRANSACTION.PROJECTCODE, 0, 4 ) = 'OPN' THEN 'Booking'
            WHEN SUBSTRING( STOCKTRANSACTION.PROJECTCODE, 0, 4 ) = 'STO' THEN 'Booking'
            WHEN SUBSTRING( STOCKTRANSACTION.PROJECTCODE, 0, 4 ) = 'RPE' THEN 'Ganti Kain '
            ELSE 'Tunggu Kirim'
        END
        ELSE QUALITYREASON.LONGDESCRIPTION
    END AS STATUS_KAIN
FROM
    BALANCE BALANCE
LEFT JOIN SALESORDER SALESORDER ON
    BALANCE.PROJECTCODE = SALESORDER. CODE
LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
    BALANCE.DECOSUBCODE05 = USERGENERICGROUP. CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN PRODUCTIONRESERVATION PRODUCTIONRESERVATION ON
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE = BALANCE.LOTCODE
    AND PRODUCTIONRESERVATION.PROJECTCODE = BALANCE.PROJECTCODE
LEFT JOIN PRODUCTIONDEMAND PRODUCTIONDEMAND ON
    PRODUCTIONDEMAND.CODE = PRODUCTIONRESERVATION.ORDERCODE
LEFT JOIN SALESORDERLINE SALESORDERLINE ON
    SALESORDERLINE.SALESORDERCODE = BALANCE.PROJECTCODE
    AND BALANCE.DECOSUBCODE01 = SALESORDERLINE.SUBCODE01
    AND BALANCE.DECOSUBCODE02 = SALESORDERLINE.SUBCODE02
    AND BALANCE.DECOSUBCODE03 = SALESORDERLINE.SUBCODE03
    AND BALANCE.DECOSUBCODE04 = SALESORDERLINE.SUBCODE04
    AND BALANCE.DECOSUBCODE05 = SALESORDERLINE.SUBCODE05
    AND BALANCE.DECOSUBCODE06 = SALESORDERLINE.SUBCODE06
    AND BALANCE.DECOSUBCODE07 = SALESORDERLINE.SUBCODE07
    AND BALANCE.DECOSUBCODE08 = SALESORDERLINE.SUBCODE08
    AND SALESORDERLINE.ORDERLINE = PRODUCTIONDEMAND.DLVSALESORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            *
        FROM
            (
                SELECT
                    ROW_NUMBER() OVER (
                    ORDER BY
                        STOCKTRANSACTION.CREATIONDATETIME DESC
                    ) AS MYROW,
                    STOCKTRANSACTION.ITEMELEMENTCODE,
                    STOCKTRANSACTION.PROJECTCODE,
                    STOCKTRANSACTION.QUALITYREASONCODE
                FROM
                    STOCKTRANSACTION
            )
    ) STOCKTRANSACTION ON
    STOCKTRANSACTION.ITEMELEMENTCODE = BALANCE.ELEMENTSCODE
    AND STOCKTRANSACTION.PROJECTCODE = BALANCE.PROJECTCODE
LEFT JOIN QUALITYREASON QUALITYREASON ON
    STOCKTRANSACTION.QUALITYREASONCODE = QUALITYREASON.CODE
WHERE
    BALANCE.ITEMTYPECODE = 'KFF'
    AND BALANCE.LOGICALWAREHOUSECODE = 'M031'
    AND BALANCE.LOTCODE LIKE '%$lot%'
    AND VARCHAR_FORMAT (
        BALANCE.CREATIONDATETIME,
        'yyyy'
    ) = '$thn'
    AND NOT SALESORDER.CODE IS NULL
GROUP BY
    BALANCE.CREATIONDATETIME,
    BALANCE.DECOSUBCODE02,
    BALANCE.DECOSUBCODE03,
    BUSINESSPARTNER.LEGALNAME1,
    SALESORDER.ORDERPARTNERBRANDCODE,
    SALESORDER.EXTERNALREFERENCE,
    SALESORDERLINE.EXTERNALREFERENCE,
    SALESORDERLINE.ITEMDESCRIPTION,
    BALANCE.PROJECTCODE,
    BALANCE.DECOSUBCODE05,
    USERGENERICGROUP.LONGDESCRIPTION,
    SALESORDER.REQUIREDDUEDATE,
    BALANCE.LOTCODE,
    BALANCE.ELEMENTSCODE,
    BALANCE.BASEPRIMARYQUANTITYUNIT,
    BALANCE.QUALITYLEVELCODE,
    BALANCE.BASESECONDARYQUANTITYUNIT,
    BALANCE.BASESECONDARYUNITCODE,
    BALANCE.WAREHOUSELOCATIONCODE,
    SALESORDER.CREATIONUSER,
    STOCKTRANSACTION.QUALITYREASONCODE,
    STOCKTRANSACTION.PROJECTCODE,
    QUALITYREASON.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_PI_BIAYATAMBAHAN source

CREATE VIEW ITXVIEW_PI_BIAYATAMBAHAN AS
SELECT
    SALESORDERCODE,
    KET,
    sum(BIAYA_TAMBAHAN) AS BIAYA_TAMBAHAN,
    JUDUL
FROM
    (
        SELECT
            s.SALESORDERCODE AS SALESORDERCODE,
            i.ITAXCODE AS KET,
            sum(i.VALUE)AS BIAYA_TAMBAHAN,
            CASE
                WHEN i.ITAXCODE = 'SUR'
                OR i.ITAXCODE = 'CFR'
                AND i.VALUE <> 0 THEN 'Total Surcharge MOQ'
                WHEN i.ITAXCODE = 'MCQ'
                OR i.ITAXCODE = 'SCR'
                OR i.ITAXCODE = 'CRF'
                AND i.VALUE <> 0 THEN 'Total Surcharge MCQ'
                WHEN i.ITAXCODE = 'SUS'
                AND i.VALUE <> 0 THEN 'Total Surcharge'
            END AS JUDUL
        FROM
            SALESORDERLINE s
        LEFT JOIN INDTAXDETAIL i ON
            i.ABSUNIQUEID = s.ABSUNIQUEID
        WHERE
            (
                i.ITAXCODE = 'SUR'
                    OR i.ITAXCODE = 'SCR'
                    OR i.ITAXCODE = 'MCQ'
                    OR i.ITAXCODE = 'SUS'
                    OR i.ITAXCODE = 'CRF'
                    OR i.ITAXCODE = 'CFR'
            )
            AND NOT i.value = 0
            --                	    AND s.SALESORDERCODE ='EXP2300837'
        GROUP BY
            i.ITAXCODE,
            i.VALUE,
            s.SALESORDERCODE
    )
GROUP BY
    SALESORDERCODE,
    KET,
    JUDUL;


-- DB2ADMIN.ITXVIEW_PI_BIAYATAMBAHAN2 source

CREATE VIEW ITXVIEW_PI_BIAYATAMBAHAN2 AS
	SELECT
    DISTINCT 
	s.ABSUNIQUEID,
    s.SALESORDERCODE,
    i.VALUE AS bank_charge,
    CASE
        WHEN i.ITAXCODE IN(
            'OH1', 'OH3'
        )
        AND i.VALUE <> 0 THEN i.ITAXCODE
        WHEN i2.ITAXCODE IN(
            'SUR', 'MCQ', 'SCR'
        )
        AND i2.VALUE <> 0 THEN i2.ITAXCODE
        WHEN i3.ITAXCODE IN (
            'FR1', 'CFR', 'SUS'
        )
        AND i3.VALUE <> 0 THEN i3.ITAXCODE
    END AS ket,
    CASE
        WHEN i.ITAXCODE IN(
            'OH1', 'OH3'
        ) THEN 'Bank Charge'
    END AS ket_bankCharge,
    CASE
        WHEN i2.VALUE <> 0 THEN i2.VALUE
    END AS surcharge,
    CASE
        WHEN i2.ITAXCODE = 'SUR'
        AND i2.VALUE <> 0 THEN 'Total Surcharge MOQ'
        WHEN i2.ITAXCODE = 'MCQ'
        OR i2.ITAXCODE = 'SCR'
        AND i2.VALUE <> 0 THEN 'Total Surcharge MCQ'
    END AS ket_surCharge,
    CASE
        WHEN i3.value <> 0 THEN i3.value
    END AS freight,
    CASE
        WHEN i3.ITAXCODE = 'FR1'
        OR i3.ITAXCODE = 'CFR'
        OR i3.ITAXCODE = 'SUS'
        AND i3.VALUE <> 0 THEN 'Surcharge Export'
    END AS ket_Freight
FROM
    SALESORDERLINE s
LEFT JOIN INDTAXDETAIL i ON
    i.ABSUNIQUEID = s.ABSUNIQUEID
    AND i.ITAXCODE IN(
        'OH1', 'OH3'
    )
    AND i.VALUE <> 0
LEFT JOIN INDTAXDETAIL i2 ON
    i2.ABSUNIQUEID = s.ABSUNIQUEID
    AND i2.ITAXCODE IN(
        'SCR', 'MCQ', 'SUR'
    )
    AND i2.VALUE <> 0
LEFT JOIN INDTAXDETAIL i3 ON
    i3.ABSUNIQUEID = s.ABSUNIQUEID
    AND i3.ITAXCODE IN(
        'FR1', 'CFR', 'SUS', 'CRF'
    )
    AND i3.VALUE <> 0
WHERE
    (
        i.VALUE <> 0
            OR i2.VALUE <> 0
            OR i3.VALUE <> 0
    );


-- DB2ADMIN.ITXVIEW_PI_GRAMASI source

CREATE VIEW ITXVIEW_PI_GRAMASI AS 
SELECT
    s2.SALESORDERCODE,
    p.ITEMTYPECODE,
    p.LONGDESCRIPTION,
    p.SUBCODE01,
    p.SUBCODE02,
    p.SUBCODE03,
    p.SUBCODE04,
    p.SUBCODE05,
    p.SUBCODE06,
    p.SUBCODE07,
    p.SUBCODE08,
    p.SUBCODE09,
    p.SUBCODE10,
    CASE
        WHEN p.ITEMTYPECODE = 'FKF' THEN CAST(
            SUBSTR(p.SUBCODE04, 1, LOCATE('-', p.SUBCODE04)-1) AS CHARACTER(10)
        )
        WHEN p.ITEMTYPECODE = 'KFF' THEN a6.VALUEDECIMAL
    END width,
    CASE
        WHEN p.ITEMTYPECODE = 'FKF' THEN SUBSTR(SUBSTR(p.SUBCODE04, 3, LOCATE('-', p.SUBCODE04)+ 1), LOCATE('-', p.SUBCODE04)- 1)
        WHEN p.ITEMTYPECODE = 'KFF' THEN a5.VALUEDECIMAL
    END AS GSM
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s.CODE
LEFT JOIN PRODUCT p ON
    p.ITEMTYPECODE = s2.ITEMTYPEAFICODE
    AND p.SUBCODE01 = s2.SUBCODE01
    AND p.SUBCODE02 = s2.SUBCODE02
    AND p.SUBCODE03 = s2.SUBCODE03
    AND p.SUBCODE04 = s2.SUBCODE04
    AND p.SUBCODE05 = s2.SUBCODE05
    AND p.SUBCODE06 = s2.SUBCODE06
    AND p.SUBCODE07 = s2.SUBCODE07
    AND p.SUBCODE08 = s2.SUBCODE08
    AND p.SUBCODE09 = s2.SUBCODE09
    AND p.SUBCODE10 = s2.SUBCODE10
LEFT JOIN ADSTORAGE a5 ON
    p.ABSUNIQUEID = a5.UNIQUEID
    AND a5.NAMENAME = 'GSM'
LEFT JOIN ADSTORAGE a6 ON
    p.ABSUNIQUEID = a6.UNIQUEID
    AND a6.NAMENAME = 'Width'
    --WHERE 
    --s2.SALESORDERCODE ='SME2300384';


-- DB2ADMIN.ITXVIEW_PI_KETBIAYATAMBAHAN source

CREATE VIEW ITXVIEW_PI_KETBIAYATAMBAHAN AS
    SELECT
       	i.ABSUNIQUEID,
        i.ITAXCODE AS KET,
        sum(i.VALUE)AS BIAYA_TAMBAHAN,
        CASE
            WHEN i.ITAXCODE = 'SUR'
        AND i.VALUE <> 0 THEN 'Surcharge MOQ'
        WHEN i.ITAXCODE = 'MCQ'
        OR i.ITAXCODE = 'SCR'
        AND i.VALUE <> 0 THEN 'Surcharge MCQ'
    END AS JUDUL
FROM
       INDTAXDETAIL i
WHERE
        (
        i.ITAXCODE = 'SUR'
            OR i.ITAXCODE = 'SCR'
            OR i.ITAXCODE = 'MCQ'
    )
    AND NOT i.value = 0
    --        	    AND s.SALESORDERCODE ='EXP2300538'
GROUP BY
        i.ITAXCODE,
        i.ABSUNIQUEID,
        i.VALUE;


-- DB2ADMIN.ITXVIEW_PLY_KNT source

CREATE VIEW ITXVIEW_PLY_KNT AS
SELECT
    ADSTORAGE.UNIQUEID,
    ADSTORAGE.FIELDNAME,
    ADSTORAGE.VALUEDECIMAL
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    ADSTORAGE.FIELDNAME = 'ply';


-- DB2ADMIN.ITXVIEW_POBUYER source

CREATE VIEW ITXVIEW_POBUYER AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUESTRING,
    SALESORDER.CODE
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.SALESORDER SALESORDER ON
    ADSTORAGE.UNIQUEID = SALESORDER.ABSUNIQUEID
WHERE
    NAMENAME = 'BuyersPONumber';


-- DB2ADMIN.ITXVIEW_POSELESAI source

CREATE VIEW ITXVIEW_POSELESAI AS
SELECT
    NO_ORDER,
    PO_NUMBER,
    LEGALNAME1,
    WARNA,
    SUM(QTY_KEBUTUHAN_KG) AS QTY_KEBUTUHAN_KG,
    SUM(QTY_KEBUTUHAN_YD_MTR) AS QTY_KEBUTUHAN_YD_MTR,
    SUM(QTY_PACKING_KG) AS QTY_PACKING_KG,
    SUM(QTY_PACKING_YD_MTR) AS QTY_PACKING_YD_MTR,
    SUM(QTY_KEBUTUHAN_KG) - SUM(QTY_KIRIM_KG) AS QTY_KURANG_KG,
    SUM(QTY_KEBUTUHAN_YD_MTR) - SUM(QTY_KIRIM_YD_MTR) AS QTY_KURANG_YD_MTR,
    NO_SJ,
    CASE
        WHEN FOC = 'FOC' THEN FOC
        ELSE ''
    END AS FOC,
    TGL_KIRIM,
    SUM(QTY_KIRIM_KG) AS QTY_KIRIM_KG,
    SUM(QTY_KIRIM_YD_MTR) AS QTY_KIRIM_YD_MTR
FROM
    (
        SELECT
            isp.DLVSALORDERLINESALESORDERCODE AS NO_ORDER,
            isp.PO_NUMBER,
            isp.LEGALNAME1,
            TRIM(isp.DECOSUBCODE01) || '-' || TRIM(isp.DECOSUBCODE02) || '-' || TRIM(isp.DECOSUBCODE03) || '-' || TRIM(isp.DECOSUBCODE04) || '-' || TRIM(isp.DECOSUBCODE05) || '-' || TRIM(isp.DECOSUBCODE06) || '-' || TRIM(isp.DECOSUBCODE07) || '-' || TRIM(isp.DECOSUBCODE08) || '-' || TRIM(isp.DECOSUBCODE09) || '-' || TRIM(isp.DECOSUBCODE10) AS KODE_ITEM,
            i.WARNA,
            ik.QTY_KEBUTUHAN_KG,
            ik.QTY_KEBUTUHAN_YD_MTR,
            QTY_PACKING_KG,
            QTY_PACKING_YD_MTR,
            isp.PROVISIONALCODE AS NO_SJ,
            isp.PAYMENTMETHODCODE AS FOC,
            isp.GOODSISSUEDATE AS TGL_KIRIM,
            SUM(iasp.BASEPRIMARYQUANTITY) AS QTY_KIRIM_KG,
            CASE
                WHEN isp.PRICEUNITOFMEASURECODE = 'yd' THEN SUM(iasp.BASESECONDARYQUANTITY)
                WHEN isp.PRICEUNITOFMEASURECODE = 'kg' THEN SUM(iasp.BASESECONDARYQUANTITY)
                WHEN isp.PRICEUNITOFMEASURECODE = 'm' THEN SUM(round(iasp.BASESECONDARYQUANTITY, 2) * 0.9144)
            END AS QTY_KIRIM_YD_MTR
        FROM
            ITXVIEW_SURATJALAN_PPC isp
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
            iasp.CODE = isp.CODE
        LEFT JOIN ITXVIEWCOLOR i ON
            i.ITEMTYPECODE = isp.ITEMTYPEAFICODE
            AND i.SUBCODE01 = isp.DECOSUBCODE01
            AND i.SUBCODE02 = isp.DECOSUBCODE02
            AND i.SUBCODE03 = isp.DECOSUBCODE03
            AND i.SUBCODE04 = isp.DECOSUBCODE04
            AND i.SUBCODE05 = isp.DECOSUBCODE05
            AND i.SUBCODE06 = isp.DECOSUBCODE06
            AND i.SUBCODE07 = isp.DECOSUBCODE07
            AND i.SUBCODE08 = isp.DECOSUBCODE08
            AND i.SUBCODE09 = isp.DECOSUBCODE09
            AND i.SUBCODE10 = isp.DECOSUBCODE10
        LEFT JOIN (
                SELECT
                    ik.PROJECTCODE,
                    ik.ORIGDLVSALORDERLINEORDERLINE,
                    SUM(ik.USERPRIMARYQUANTITY) AS QTY_KEBUTUHAN_KG,
                    SUM(ik.USERSECONDARYQUANTITY) AS QTY_KEBUTUHAN_YD_MTR
                FROM
                    ITXVIEW_KGBRUTO ik
                WHERE
                    ik.VALUESTRING IS NULL
                GROUP BY
                    ik.PROJECTCODE,
                    ik.ORIGDLVSALORDERLINEORDERLINE
            ) ik ON
            ik.PROJECTCODE = isp.DLVSALORDERLINESALESORDERCODE
            AND ik.ORIGDLVSALORDERLINEORDERLINE = isp.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    QTY_PACKING.PRODUCTIONORDERCODE,
                    QTY_PACKING.DLVSALESORDERLINEORDERLINE,
                    SUM(QTY_PACKING_KG) AS QTY_PACKING_KG,
                    SUM(QTY_PACKING_YD_MTR) AS QTY_PACKING_YD_MTR
                FROM
                    (
                        SELECT
                            p.PRODUCTIONORDERCODE,
                            p.PRODUCTIONDEMANDCODE,
                            p2.DLVSALESORDERLINEORDERLINE,
                            p2.ENTEREDUSERPRIMARYQUANTITY AS QTY_PACKING_KG,
                            p2.ENTEREDUSERSECONDARYQUANTITY AS QTY_PACKING_YD_MTR
                        FROM
                            PRODUCTIONDEMANDSTEP p
                        LEFT JOIN PRODUCTIONDEMAND p2 ON
                            p2.CODE = p.PRODUCTIONDEMANDCODE
                        GROUP BY
                            p.PRODUCTIONORDERCODE,
                            p2.DLVSALESORDERLINEORDERLINE,
                            p.PRODUCTIONDEMANDCODE,
                            p2.ENTEREDUSERPRIMARYQUANTITY,
                            p2.ENTEREDUSERSECONDARYQUANTITY
                    ) QTY_PACKING
                GROUP BY
                    QTY_PACKING.PRODUCTIONORDERCODE,
                    QTY_PACKING.DLVSALESORDERLINEORDERLINE
            ) QTY_PACKING ON
            QTY_PACKING.PRODUCTIONORDERCODE = iasp.LOTCODE
            AND QTY_PACKING.DLVSALESORDERLINEORDERLINE = isp.DLVSALESORDERLINEORDERLINE
        GROUP BY
            isp.DLVSALORDERLINESALESORDERCODE,
            isp.PO_NUMBER,
            isp.LEGALNAME1,
            isp.DECOSUBCODE01,
            isp.DECOSUBCODE02,
            isp.DECOSUBCODE03,
            isp.DECOSUBCODE04,
            isp.DECOSUBCODE05,
            isp.DECOSUBCODE06,
            isp.DECOSUBCODE07,
            isp.DECOSUBCODE08,
            isp.DECOSUBCODE09,
            isp.DECOSUBCODE10,
            i.WARNA,
            ik.QTY_KEBUTUHAN_KG,
            ik.QTY_KEBUTUHAN_YD_MTR,
            QTY_PACKING_KG,
            QTY_PACKING_YD_MTR,
            isp.PRICEUNITOFMEASURECODE,
            isp.PROVISIONALCODE,
            isp.GOODSISSUEDATE,
            isp.PAYMENTMETHODCODE
    )
WHERE
    NOT NO_ORDER IS NULL
GROUP BY
    NO_ORDER,
    PO_NUMBER,
    LEGALNAME1,
    WARNA,
    NO_SJ,
    TGL_KIRIM,
    FOC;


-- DB2ADMIN.ITXVIEW_POSISIKK source

CREATE VIEW ITXVIEW_POSISIKK AS
SELECT
    *
FROM
    (
        SELECT
            p.PRODUCTIONORDERCODE,
            p.PRODUCTIONDEMANDCODE,
            p.STEPNUMBER,
            TRIM(p.OPERATIONCODE) AS OPERATIONCODE,
            (iptip.MULAI) AS MULAI,
            (iptop.SELESAI) AS SELESAI
        FROM
            PRODUCTIONDEMANDSTEP p
        LEFT JOIN ITXVIEW_POSISIKK_TGL_IN_PRODORDER iptip ON
            iptip.PRODUCTIONORDERCODE = p.PRODUCTIONORDERCODE
            AND iptip.DEMANDSTEPSTEPNUMBER = p.STEPNUMBER
        LEFT JOIN ITXVIEW_POSISIKK_TGL_OUT_PRODORDER iptop ON
            iptop.PRODUCTIONORDERCODE = p.PRODUCTIONORDERCODE
            AND iptop.DEMANDSTEPSTEPNUMBER = p.STEPNUMBER
        ORDER BY
            p.STEPNUMBER ASC
    );


-- DB2ADMIN.ITXVIEW_POSISIKK_MUTASI source

CREATE VIEW ITXVIEW_POSISIKK_MUTASI AS
SELECT
    DISTINCT 
	p.PROGRESSSTARTPROCESSDATE,
    p.OPERATIONCODE,
    p.PRODUCTIONORDERCODE,
    p2.DEMANDSTEPPRODUCTIONDEMANDCODE
FROM
    PRODUCTIONPROGRESS p
LEFT JOIN PRODUCTIONPROGRESSSTEPUPDATED p2 ON
    p2.PROPROGRESSPROGRESSNUMBER = p.PROGRESSNUMBER
    AND p.PROGRESSTEMPLATECODE = 'S01'
WHERE
    --	p.PROGRESSSTARTPROCESSDATE BETWEEN '2023-10-01' AND '2023-10-07'
    --	AND
    p.OPERATIONCODE = 'GKJ1';


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_IN_PRODDEMAND source

CREATE VIEW ITXVIEW_POSISIKK_TGL_IN_PRODDEMAND AS
SELECT
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    LISTAGG(
        p2.PROGRESSSTARTPROCESSDATE || ' ' || PROGRESSSTARTPROCESSTIME ,
        ','
    ) AS MULAI
FROM
    PRODUCTIONPROGRESSSTEPUPDATED p
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'S01'
    --WHERE p.DEMANDSTEPPRODUCTIONDEMANDCODE = '$rowdb2[PRODUCTIONDEMANDCODE]' AND p.DEMANDSTEPSTEPNUMBER = '$rowdb2[STEPNUMBER]'
GROUP BY
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER;


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_IN_PRODORDER source

CREATE VIEW ITXVIEW_POSISIKK_TGL_IN_PRODORDER AS
SELECT
    DISTINCT 
    v.PRODUCTIONORDERCODE,
    v.OPERATIONCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    p2.PROGRESSTEMPLATECODE,
    p2.PROGRESSSTARTPROCESSDATE,
    p2.PROGRESSSTARTPROCESSTIME,
    (
        p2.PROGRESSSTARTPROCESSDATE || ' ' || p2.PROGRESSSTARTPROCESSTIME
    ) AS MULAI,
    p2.MACHINECODE,
    p2.INACTIVE,
    r.LONGDESCRIPTION
FROM
    PRODUCTIONDEMANDSTEP v
LEFT JOIN PRODUCTIONPROGRESSSTEPUPDATED p ON
    p.DEMANDSTEPPRODUCTIONDEMANDCODE = v.PRODUCTIONDEMANDCODE
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'S01'
LEFT JOIN RESOURCES r ON
    r.CODE = p2.OPERATORCODE
WHERE
    p2.INACTIVE = 1
    --	AND p2.PROGRESSSTARTPROCESSDATE BETWEEN '2024-04-01' AND '2024-04-01'
    --	AND v.OPERATIONCODE = 'BAT1'
    --	AND v.PRODUCTIONORDERCODE  = '00084354' 
    --		AND p.DEMANDSTEPSTEPNUMBER = '600';


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_IN_PRODORDER_CNP1 source

CREATE VIEW ITXVIEW_POSISIKK_TGL_IN_PRODORDER_CNP1 AS
SELECT
    DISTINCT 
    v.PRODUCTIONORDERCODE,
    p2.OPERATIONCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    p2.PROGRESSTEMPLATECODE,
    (
        p2.PROGRESSPARTIALENDDATE || ' ' || p2.PROGRESSPARTIALENDTIME
    ) AS MULAI,
    r.LONGDESCRIPTION AS OP
FROM
    PRODUCTIONDEMANDSTEP v
LEFT JOIN PRODUCTIONPROGRESSSTEPUPDATED p ON
    p.DEMANDSTEPPRODUCTIONDEMANDCODE = v.PRODUCTIONDEMANDCODE
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'P01'
    AND p2.OPERATIONCODE = 'CNP1'
LEFT JOIN RESOURCES r ON
    r.CODE = p2.OPERATORCODE
    --WHERE 
    --	v.PRODUCTIONORDERCODE = '00076899' 
    --		AND p.DEMANDSTEPSTEPNUMBER = '600';


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_IN_PRODORDER_INS3 source

CREATE VIEW ITXVIEW_POSISIKK_TGL_IN_PRODORDER_INS3 AS
SELECT
    DISTINCT 
    v.PRODUCTIONORDERCODE,
    p2.OPERATIONCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    p2.PROGRESSTEMPLATECODE,
    (
        p2.PROGRESSPARTIALENDDATE || ' ' || p2.PROGRESSPARTIALENDTIME
    ) AS MULAI,
    r.LONGDESCRIPTION AS OP
FROM
    PRODUCTIONDEMANDSTEP v
LEFT JOIN PRODUCTIONPROGRESSSTEPUPDATED p ON
    p.DEMANDSTEPPRODUCTIONDEMANDCODE = v.PRODUCTIONDEMANDCODE
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'P01'
    AND p2.OPERATIONCODE = 'INS3'
LEFT JOIN RESOURCES r ON
    r.CODE = p2.OPERATORCODE
    --WHERE 
    --	v.PRODUCTIONORDERCODE = '00083822' 
    --		AND p.DEMANDSTEPSTEPNUMBER = '600';


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_OUT_PRODDEMAND source

CREATE VIEW ITXVIEW_POSISIKK_TGL_OUT_PRODDEMAND AS
SELECT
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    LISTAGG(
        p2.PROGRESSENDDATE || ' ' || PROGRESSENDTIME,
        ','
    ) AS SELESAI
FROM
    PRODUCTIONPROGRESSSTEPUPDATED p
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'E01'
    --WHERE p.DEMANDSTEPPRODUCTIONDEMANDCODE = '$rowdb2[PRODUCTIONDEMANDCODE]' AND p.DEMANDSTEPSTEPNUMBER = '$rowdb2[STEPNUMBER]'
GROUP BY
    p.DEMANDSTEPPRODUCTIONDEMANDCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER;


-- DB2ADMIN.ITXVIEW_POSISIKK_TGL_OUT_PRODORDER source

CREATE VIEW ITXVIEW_POSISIKK_TGL_OUT_PRODORDER AS
SELECT
    DISTINCT
	v.PRODUCTIONORDERCODE,
    p.PROPROGRESSPROGRESSNUMBER,
    p.DEMANDSTEPSTEPNUMBER,
    p2.PROGRESSTEMPLATECODE,
    --    p2.PROGRESSENDDATE,
    --    p2.PROGRESSENDTIME,
    (
        p2.PROGRESSENDDATE || ' ' || PROGRESSENDTIME
    ) AS SELESAI,
    p2.MACHINECODE,
    r.LONGDESCRIPTION
FROM
    PRODUCTIONDEMANDSTEP v
LEFT JOIN PRODUCTIONPROGRESSSTEPUPDATED p ON
    p.DEMANDSTEPPRODUCTIONDEMANDCODE = v.PRODUCTIONDEMANDCODE
RIGHT JOIN PRODUCTIONPROGRESS p2 ON
    p2.PROGRESSNUMBER = p.PROPROGRESSPROGRESSNUMBER
    AND p2.PROGRESSTEMPLATECODE = 'E01'
LEFT JOIN RESOURCES r ON
    r.CODE = p2.OPERATORCODE
WHERE
    p2.INACTIVE = 1
    --AND v.PRODUCTIONORDERCODE  = '00083822' 
    --		AND p.DEMANDSTEPSTEPNUMBER = '600';


-- DB2ADMIN.ITXVIEW_PO_INVOICE source

CREATE VIEW ITXVIEW_PO_INVOICE AS
SELECT
    NO_INVOICE,
    COMPANYCODE,
    DIVISIONCODE,    
    LISTAGG(
        DISTINCT(
            TRIM(NO_PO)
        ),
        ', '
    ) AS NO_PO
FROM
    (
        SELECT
            p.CODE AS NO_INVOICE,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            CASE
                WHEN s2.EXTERNALREFERENCE IS NULL
                AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s4.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
                WHEN s2.EXTERNALREFERENCE IS NOT NULL
                AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s2.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
                ELSE s2.EXTERNALREFERENCE
            END AS NO_PO
        FROM
            PLANTINVOICE p
        LEFT JOIN SALESDOCUMENT s4 ON
            s4.PROVISIONALCODE = p.CODE
            AND s4.COMPANYCODE = p.COMPANYCODE
            AND s4.PROVISIONALCOUNTERCODE = p.SALINVOICEPRVCOUNTERCODE
        LEFT JOIN SALESDOCUMENTLINE s2 ON
            s2.SALESDOCUMENTPROVISIONALCODE = p.CODE
            AND s2.SALESDOCUMENTCOMPANYCODE = s4.COMPANYCODE
            AND s2.SALDOCPROVISIONALCOUNTERCODE = s4.PROVISIONALCOUNTERCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = s2.PREVIOUSCODE
            AND SALESDOCUMENT2.COMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
            AND SALESDOCUMENT2.PROVISIONALCOUNTERCODE = s2.SALDOCPROVISIONALCOUNTERCODE
        LEFT JOIN SALESORDER s ON
            s.CODE = p.CONTRACTNOCODE
            AND s.COMPANYCODE = p.COMPANYCODE
            AND s.COUNTERCODE = p.CONTRACTNOCOUNTERCODE
        LEFT JOIN SALESORDERLINE s3 ON
            s3.SALESORDERCODE = s.CODE
            AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
            AND s3.SALESORDERCOMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
        GROUP BY
            s.ORDERPARTNERBRANDCODE,
            s2.PREVIOUSCODE,
            p.CODE,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            s2.DLVSALORDERLINESALESORDERCODE,
            s4.EXTERNALREFERENCE,
            s2.EXTERNALREFERENCE
    )
    --                WHERE NO_INVOICE = 'CA24010001'
GROUP BY 
    NO_INVOICE,
    COMPANYCODE,
    DIVISIONCODE;


-- DB2ADMIN.ITXVIEW_PO_INVOICE2 source

CREATE VIEW ITXVIEW_PO_INVOICE2 AS
SELECT
    DISTINCT
    NO_INVOICE,
    COMPANYCODE,
    DIVISIONCODE,    
    LISTAGG(
        DISTINCT(
            TRIM(NO_PO)
        ),
        ', '
    ) AS NO_PO,
    SALDOCPROVISIONALCOUNTERCODE,
    LISTAGG(
        DISTINCT(
            TRIM(ITEMTYPEAFICODE)
        ),
        ', '
    ) AS ITEMTYPEAFICODE
FROM
    (
        SELECT
            p.CODE AS NO_INVOICE,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            SALESDOCUMENT2.SALDOCPROVISIONALCOUNTERCODE,
            SALESDOCUMENT2.ITEMTYPEAFICODE,
            CASE
                WHEN s2.EXTERNALREFERENCE IS NULL
                AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s4.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
                WHEN s2.EXTERNALREFERENCE IS NOT NULL
                AND s.ORDERPARTNERBRANDCODE IS NOT NULL THEN s2.EXTERNALREFERENCE || ' (' || trim(s.ORDERPARTNERBRANDCODE) || ')'
                ELSE s2.EXTERNALREFERENCE
            END AS NO_PO
        FROM
            PLANTINVOICE p
        LEFT JOIN SALESDOCUMENT s4 ON
            s4.PROVISIONALCODE = p.CODE
            AND s4.COMPANYCODE = p.COMPANYCODE
            AND s4.PROVISIONALCOUNTERCODE = p.SALINVOICEPRVCOUNTERCODE
        LEFT JOIN SALESDOCUMENTLINE s2 ON
            s2.SALESDOCUMENTPROVISIONALCODE = p.CODE
            AND s2.SALESDOCUMENTCOMPANYCODE = s4.COMPANYCODE
            AND s2.SALDOCPROVISIONALCOUNTERCODE = s4.PROVISIONALCOUNTERCODE
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENT2 ON
            SALESDOCUMENT2.SALESDOCUMENTPROVISIONALCODE = s2.PREVIOUSCODE
        LEFT JOIN SALESORDER s ON
            s.CODE = p.CONTRACTNOCODE
            AND s.COMPANYCODE = p.COMPANYCODE
            AND s.COUNTERCODE = p.CONTRACTNOCOUNTERCODE
        LEFT JOIN SALESORDERLINE s3 ON
            s3.SALESORDERCODE = s.CODE
            AND s3.ORDERLINE = s2.DLVSALESORDERLINEORDERLINE
            AND s3.SALESORDERCOMPANYCODE = s2.SALESDOCUMENTCOMPANYCODE
        GROUP BY
            s.ORDERPARTNERBRANDCODE,
            s2.PREVIOUSCODE,
            p.CODE,
            p.COMPANYCODE,
            p.DIVISIONCODE,
            SALESDOCUMENT2.ITEMTYPEAFICODE,
            SALESDOCUMENT2.SALDOCPROVISIONALCOUNTERCODE,
            s2.DLVSALORDERLINESALESORDERCODE,
            s4.EXTERNALREFERENCE,
            s2.EXTERNALREFERENCE
    )
    --                    WHERE NO_INVOICE = 'CA24010005'
GROUP BY 
    NO_INVOICE,
    COMPANYCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    DIVISIONCODE;


-- DB2ADMIN.ITXVIEW_PO_SHIPPING_MARK source

CREATE VIEW ITXVIEW_PO_SHIPPING_MARK AS
SELECT
    DISTINCT 	
    s2.CODE AS PROJECTCODE,
    b.ELEMENTSCODE,
    CASE
        WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
        ELSE s2.EXTERNALREFERENCE
    END AS EXTERNALREFERENCE,
    s.INTERNALREFERENCE
FROM
    BALANCE b
LEFT JOIN SALESORDERLINE s ON
    s.SALESORDERCODE = b.PROJECTCODE
    AND s.SUBCODE01 = b.DECOSUBCODE01
    AND s.SUBCODE02 = b.DECOSUBCODE02
    AND s.SUBCODE03 = b.DECOSUBCODE03
    AND s.SUBCODE04 = b.DECOSUBCODE04
    AND s.SUBCODE05 = b.DECOSUBCODE05
    AND s.SUBCODE06 = b.DECOSUBCODE06
    AND s.SUBCODE07 = b.DECOSUBCODE07
    AND s.SUBCODE08 = b.DECOSUBCODE08
    AND s.SUBCODE09 = b.DECOSUBCODE09
    AND s.SUBCODE10 = b.DECOSUBCODE10
LEFT JOIN SALESORDER s2 ON
    s2.CODE = s.SALESORDERCODE;


-- DB2ADMIN.ITXVIEW_PO_SHIPPING_MARK_ELEMENT source

CREATE VIEW ITXVIEW_PO_SHIPPING_MARK_ELEMENT AS   
   SELECT
    --   p.CODE,
    p.DLVSALORDERLINESALESORDERCODE,
    e.ELEMENTCODE,
    CASE
        WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
        ELSE s2.EXTERNALREFERENCE
    END AS EXTERNALREFERENCE,
    s.INTERNALREFERENCE
FROM
    PRODUCTIONDEMAND p
LEFT JOIN ELEMENTSINSPECTION e ON
    e.DEMANDCODE = p.CODE
LEFT JOIN SALESORDERLINE s ON
    s.SALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
    AND s.ORDERLINE = p.DLVSALESORDERLINEORDERLINE
    AND s.SUBCODE01 = p.SUBCODE01
    AND s.SUBCODE02 = p.SUBCODE02
    AND s.SUBCODE03 = p.SUBCODE03
    AND s.SUBCODE04 = p.SUBCODE04
    AND s.SUBCODE05 = p.SUBCODE05
    AND s.SUBCODE06 = p.SUBCODE06
    AND s.SUBCODE07 = p.SUBCODE07
    AND s.SUBCODE08 = p.SUBCODE08
    AND s.SUBCODE09 = p.SUBCODE09
    AND s.SUBCODE10 = p.SUBCODE10
LEFT JOIN SALESORDER s2 ON
    s2.CODE = p.DLVSALORDERLINESALESORDERCODE
WHERE
    e.ELEMENTCODE IS NOT NULL
    --   AND p.DLVSALORDERLINESALESORDERCODE ='EXP2400003';


-- DB2ADMIN.ITXVIEW_PO_SURATJALAN_PPC source

CREATE VIEW ITXVIEW_PO_SURATJALAN_PPC AS 
        SELECT 
        PROVISIONALCODE,
        PROVISIONALCOUNTERCODE,
         LISTAGG(
        DISTINCT(
            TRIM(PO_NUMBER)
        ),
        ', '
    ) AS PO_NUMBER,
          LISTAGG(
        DISTINCT(
            TRIM(SAP_CODE)
        ),
        ', '
    ) AS SAP_CODE
FROM
        (
        SELECT
            s.PROVISIONALCODE,
            s.PROVISIONALCOUNTERCODE,
            CASE
                WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
                ELSE s2.EXTERNALREFERENCE
            END AS PO_NUMBER,
            a.EXTERNALDRAWINGNUMBER AS SAP_CODE
        FROM
            SALESDOCUMENT s
        LEFT JOIN SALESDOCUMENTLINE s2 ON
            s2.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
            s.ORDPRNCUSTOMERSUPPLIERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
            AND s2.SUBCODE01 = a.SUBCODE01
            AND s2.SUBCODE02 = a.SUBCODE02
            AND s2.SUBCODE03 = a.SUBCODE03
            AND s2.SUBCODE04 = a.SUBCODE04
            AND s2.SUBCODE05 = a.SUBCODE05
            AND s2.SUBCODE06 = a.SUBCODE06
            AND s2.SUBCODE07 = a.SUBCODE07
            AND s2.SUBCODE08 = a.SUBCODE08
            AND s2.SUBCODE09 = a.SUBCODE09
            AND s2.SUBCODE10 = a.SUBCODE10
            --        WHERE  s.PROVISIONALCODE = 'POD2400998'
    )
GROUP BY 
        PROVISIONALCODE,
        PROVISIONALCOUNTERCODE;


-- DB2ADMIN.ITXVIEW_PPA_DIT source

CREATE VIEW ITXVIEW_PPA_DIT AS 
SELECT
    p.CODE AS NO_BD,
    p3.CODE AS NO_WO,
    'PPA' || SUBSTR(p3.CREATIONDATETIME, 3, 2) || SUBSTR(p3.CREATIONDATETIME, 6, 2) || LTRIM(SUBSTR(p3.CODE, 6, 6), '0') AS NO_PPA,  
    SUBSTR(d.LONGDESCRIPTION, 1, 4) AS DEPT,
    CASE
        WHEN a17.VALUESTRING = 1 THEN ' - MAYOR'
        WHEN a17.VALUESTRING = 2 THEN ' - MINOR'
        ELSE ''
    END AS JENIS_KERUSAKAN,
    p2.LONGDESCRIPTION AS NAMA_APLIKASI,
    CASE
        WHEN a2.VALUESTRING = '1' THEN 'Baru'
        WHEN a2.VALUESTRING = '2' THEN 'Penambahan'
        WHEN a2.VALUESTRING = '3' THEN 'Perubahan'
        WHEN a2.VALUESTRING = '4' THEN 'Perbaikan'
    END AS JENIS_PERMOHONAN,
    SUBSTR(p3.STARTDATE, 1, 10) AS TGL_MULAI,
    CASE
        --        WHEN DAYOFWEEK_ISO(p3.STARTDATE) = 1 THEN SUBSTR(p3.STARTDATE  + 3 DAYS, 1,10)
        --        WHEN DAYOFWEEK_ISO(p3.STARTDATE) = 2 THEN SUBSTR(p3.STARTDATE  + 3 DAYS, 1,10)
        --        WHEN DAYOFWEEK_ISO(p3.STARTDATE) = 3 THEN SUBSTR(p3.STARTDATE  + 5 DAYS, 1,10)
        --        WHEN DAYOFWEEK_ISO(p3.STARTDATE) = 4 THEN SUBSTR(p3.STARTDATE  + 5 DAYS, 1,10)
        --        WHEN DAYOFWEEK_ISO(p3.STARTDATE) = 5 THEN SUBSTR(p3.STARTDATE  + 6 DAYS, 1,10)
	    WHEN DAYOFWEEK_ISO(a6.VALUEDATE) = 1 THEN SUBSTR(a6.VALUEDATE + 3 DAYS, 1, 10)
        WHEN DAYOFWEEK_ISO(a6.VALUEDATE) = 2 THEN SUBSTR(a6.VALUEDATE + 3 DAYS, 1, 10)
        WHEN DAYOFWEEK_ISO(a6.VALUEDATE) = 3 THEN SUBSTR(a6.VALUEDATE + 5 DAYS, 1, 10)
        WHEN DAYOFWEEK_ISO(a6.VALUEDATE) = 4 THEN SUBSTR(a6.VALUEDATE + 5 DAYS, 1, 10)
        WHEN DAYOFWEEK_ISO(a6.VALUEDATE) = 5 THEN SUBSTR(a6.VALUEDATE + 6 DAYS, 1, 10)
    END AS TGL_TARGET,
    p.SYMPTOM AS DESKRIPSI_PEMOHON,
    p.CREATIONUSER AS DIBUAT_OLEH,
    a4.MENUDESCR AS JABATAN_DIBUATOLEH,
    SUBSTR(p.CREATIONDATETIME, 1, 10) AS TGL_DIBUATOLEH,
    TIMESTAMP(
        SUBSTR(p.CREATIONDATETIME, 1, 10)
    ) AS TGL_DIBUATOLEH_CONV_DATE,
    u.LONGDESCRIPTION AS KEPALA_DEPT_PEMOHON,
    u.SEARCHDESCRIPTION AS JABATAN_KEPALA_DEPT,
    a6.VALUEDATE AS TGL_KEPALA_DEPT_PEMOHON,
    p3.ASSIGNEDBYUSERID AS DITERIMA_OLEH_DIT,
    a8.MENUDESCR AS JABATAN_DITERIMA_DIT,
    --    p3.PLANNEDSCHDDATE AS TGL_DITERIMA_DIT,
    a6.VALUEDATE AS TGL_DITERIMA_DIT,
    u2.LONGDESCRIPTION AS DIKETAHUI_OLEH_DIT,
    u2.SEARCHDESCRIPTION AS JABATAN_DEPT_DIT,
    a10.VALUEDATE AS TGL_DIKETAHUI_DIT,
    SUBSTR(p3.ENDDATE, 1, 10) AS TGL_SELESAI,
    p3.ASSIGNEDTOUSERID AS PROGRAMMER,
    a11.SENDEREMAIL AS EMAIL_PROGRAMMER,
    a13.MENUDESCR AS JABATAN_PROGRAMMER,
    u3.LONGDESCRIPTION AS KEPALA_DEPT_USER_SELESAI,
    u3.SEARCHDESCRIPTION AS JABATAN_DEPT_USER_SELESAI,
    u4.LONGDESCRIPTION AS KEPALA_DEPT_DIT_SELESAI,
    u4.SEARCHDESCRIPTION AS JABATAN_DEPT_DIT_SELESAI,
    CASE
        WHEN p3.STATUS = 3 THEN 'Done'
        WHEN p3.STATUS = 2 THEN 'In Progress'
    END AS STATUS
FROM
    PMBREAKDOWNENTRY p
LEFT JOIN DEPARTMENT d ON
    d.CODE = p.DEPARTMENTCODE
LEFT JOIN PMBOM p2 ON
    p2.CODE = p.PMBOMCODE
RIGHT JOIN PMWORKORDER p3 ON
    p3.PMBREAKDOWNENTRYCODE = p.CODE
    AND NOT p3.ASSIGNEDTOUSERID IS NULL
LEFT JOIN ABSUSERDEF a ON
    a.USERID = p3.ASSIGNEDTOUSERID
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = p.ABSUNIQUEID
    AND a2.FIELDNAME = 'JenisPermohonan'
LEFT JOIN ABSUIINITIALMENU a3 ON
    a3.USERUSERID = p.CREATIONUSER
LEFT JOIN ABSUIMENU a4 ON
    a4.CODE = a3.MENU4CODE
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = p.ABSUNIQUEID
    AND a5.FIELDNAME = 'ApprovalDeptUserCode'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = p.ABSUNIQUEID
    AND a6.FIELDNAME = 'TglApprvDeptUser'
LEFT JOIN USERGENERICGROUP u ON
    u.CODE = a5.VALUESTRING
    AND u.USERGENERICGROUPTYPECODE = 'HED'
LEFT JOIN ABSUIINITIALMENU a7 ON
    a7.USERUSERID = p3.ASSIGNEDBYUSERID
LEFT JOIN ABSUIMENU a8 ON
    a8.CODE = a7.MENU4CODE
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = p.ABSUNIQUEID
    AND a9.FIELDNAME = 'ApprovalDeptDITCode'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = p.ABSUNIQUEID
    AND a10.FIELDNAME = 'TglApprvDeptDIT'
LEFT JOIN USERGENERICGROUP u2 ON
    u2.CODE = a9.VALUESTRING
    AND u2.USERGENERICGROUPTYPECODE = 'DIT'
LEFT JOIN ABSUSERDEF a11 ON
    a11.USERID = p3.ASSIGNEDTOUSERID
LEFT JOIN ABSUIINITIALMENU a12 ON
    a12.USERUSERID = p3.ASSIGNEDTOUSERID
LEFT JOIN ABSUIMENU a13 ON
    a13.CODE = a12.MENU4CODE
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = p3.ABSUNIQUEID
    AND a14.FIELDNAME = 'ApprovalDeptUserCode'
LEFT JOIN USERGENERICGROUP u3 ON
    u3.CODE = a14.VALUESTRING
    AND u3.USERGENERICGROUPTYPECODE = 'HED'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = p3.ABSUNIQUEID
    AND a15.FIELDNAME = 'ApprovalDeptDITCode'
LEFT JOIN ADSTORAGE a16 ON
    a16.UNIQUEID = p3.ABSUNIQUEID
    AND a16.FIELDNAME = 'TglApprvDeptDIT'
LEFT JOIN USERGENERICGROUP u4 ON
    u4.CODE = a15.VALUESTRING
    AND u4.USERGENERICGROUPTYPECODE = 'DIT'
LEFT JOIN ADSTORAGE a17 ON
    a17.UNIQUEID = p3.ABSUNIQUEID
    AND a17.FIELDNAME = 'JenisKerusakan'
WHERE
    p.BREAKDOWNTYPE = 'SF'
    --    AND p.CODE = 'BDIT240000645'
    --ORDER BY
    --	p3.CODE ASC;


-- DB2ADMIN.ITXVIEW_PRODUCTIONDEMANDSTEP source

CREATE VIEW ITXVIEW_PRODUCTIONDEMANDSTEP AS
SELECT
    PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDCODE
FROM
    PRODUCTIONDEMANDSTEP
GROUP BY
    PRODUCTIONORDERCODE,
    PRODUCTIONDEMANDCODE;


-- DB2ADMIN.ITXVIEW_PRODUCTNOTEKNT source

CREATE VIEW ITXVIEW_PRODUCTNOTEKNT AS
SELECT
    UNIQUEID,
    NAMENAME,
    VALUESTRING AS NOTE_KNT
FROM
    ADSTORAGE
WHERE
    NAMENAME = 'NoteKnitt ';


-- DB2ADMIN.ITXVIEW_PURCHASEORDER_APPROVED source

CREATE VIEW ITXVIEW_PURCHASEORDER_APPROVED AS 
SELECT
    no_po,
    approvedby,
    tgl_approve
FROM
    (
        SELECT
            SUBSTR(SUBSTR(ahp.BUSINESS_KEY_, LOCATE('|', ahp.BUSINESS_KEY_)+ 1), LOCATE('|', SUBSTR(ahp.BUSINESS_KEY_, LOCATE('|', ahp.BUSINESS_KEY_)+ 1))+ 1) AS no_po,
            aiu.FIRST_ AS approvedby,
            DATE(
                SUBSTRING(aht.START_TIME_, 1, 10)
            ) AS tgl_approve
        FROM
            ACT_HI_PROCINST ahp
        LEFT JOIN ACT_HI_TASKINST aht ON
            aht.PROC_INST_ID_ = ahp.PROC_INST_ID_
        LEFT JOIN WFMLINKEDENTITY wfm ON
            wfm.WFMPROCESSID = ahp.PROC_INST_ID_
        LEFT JOIN ACT_ID_USER aiu ON
            aiu.ID_ = aht.ASSIGNEE_
        ORDER BY
            aht.START_TIME_ ASC
    );


-- DB2ADMIN.ITXVIEW_PURCHASEORDER_STATUS_APPROVE source

CREATE VIEW ITXVIEW_PURCHASEORDER_STATUS_APPROVE AS	
SELECT
    COMPANYCODE || '|' || TRIM(COUNTERCODE)|| '|' || CODE AS wfmcode,
    CODE,
    WFMORDERSTATUS
FROM
    PURCHASEORDER p;


-- DB2ADMIN.ITXVIEW_PURCHASEORDER_TAX source

CREATE VIEW ITXVIEW_PURCHASEORDER_TAX AS
SELECT
    i.ABSUNIQUEID,
    i2.LONGDESCRIPTION,
    i.SEQUENCENO,
    i2.TAXTEMPLATECODE,
    i.ITAXCODE,
    i.CALCULATEDVALUE,
    i.CALCULATEDVALUERCC,
    i.COMPANYCURRENCYCODE
FROM
    INDTAXTOTAL i
LEFT JOIN INDTAXDETAIL i2 ON
    i2.ABSUNIQUEID = i.ABSUNIQUEID
    AND i2.ITAXCODE = i.ITAXCODE
    AND i2.TAXCATEGORYCODE = i.TAXCATEGORYCODE
WHERE
    i.ITAXCODE IN (
        '999', 'AD1', 'AD2', 'AD3', 'AD4', 'AD5', 'ADA', 'ADB', 'D01', 'D02', 'FR1', 'IN1', 'OH1', 'P21', 'VT4'
    );


-- DB2ADMIN.ITXVIEW_PURCHASE_ADDITIONAL_COSTS source

CREATE VIEW ITXVIEW_PURCHASE_ADDITIONAL_COSTS AS
SELECT
    *
FROM
    INDTAXTOTAL
WHERE
    ITAXCODE IN (
        'OH1', 'AD1', 'AD2', 'AD3', 'AD4', 'AD5', 'ADA'
    );


-- DB2ADMIN.ITXVIEW_PURCHASE_APPROVE_TOP1 source

CREATE VIEW ITXVIEW_PURCHASE_APPROVE_TOP1 AS
--(ID_,
--PROC_INST_ID_,
--BUSINESS_KEY_)
--AS
--SELECT
--    *
--FROM
--    (
--    SELECT
--        ID_,
--        PROC_INST_ID_,
--        BUSINESS_KEY_
--    FROM
--        ACT_HI_PROCINST
--    ORDER BY
--        PROC_INST_ID_ DESC);
SELECT
    A.BUSINESS_KEY_,
    B.PROC_INST_ID_,
    B.ID_,
    C.TASK_ID_,
    C.TEXT_,
    C.NAME_,
    B.END_TIME_,
    B.ASSIGNEE_
FROM
    ACT_HI_PROCINST A
LEFT JOIN ACT_HI_TASKINST B ON
    A.PROC_INST_ID_ = B.PROC_INST_ID_
LEFT JOIN ACT_HI_VARINST C ON
    B.ID_ = C.TASK_ID_
WHERE
    B.END_TIME_ IS NOT NULL
    AND C.NAME_ = 'decision'
GROUP BY
    A.BUSINESS_KEY_,
    B.PROC_INST_ID_,
    B.ID_,
    C.TASK_ID_,
    C.TEXT_,
    C.NAME_,
    B.END_TIME_,
    B.ASSIGNEE_
    --ORDER BY
    --	B.PROC_INST_ID_ DESC;


-- DB2ADMIN.ITXVIEW_PURCHASE_DETAIL source

CREATE VIEW ITXVIEW_PURCHASE_DETAIL AS
SELECT
    no_po,
    kode_item,
    count(jml_item) AS jml_item,
    ASSORTMENTNUMBERID
    --    QTY,
    --    KET_QTY
FROM
    (
        SELECT
            PURCHASEORDERCODE AS no_po,
            ITEMTYPEAFICODE AS kode_item,
            FULLITEMIDENTIFIER AS jml_item,
            ASSORTMENTNUMBERID
            --        PURCHASE_QTY.QTY,
            --        PURCHASE_QTY.KET_QTY
        FROM
            PURCHASEORDERLINE P
            --    LEFT JOIN ITXVIEW_PURCHASE_QTY PURCHASE_QTY ON
            --        P.PURCHASEORDERCODE = PURCHASE_QTY.po
            --        WHERE ITEMTYPEAFICODE = 'PRY' 
            --                where PURCHASEORDERCODE = 'GEL2201153'
            --                SRL2200076 
            --                WHERE 
            --                ASSORTMENTNUMBERID IS NULL
            --                AND
            --                PURCHASEORDERCODE IN ('PRY2200205','SPL2200003','PRY2200219','PRY2200083')
        GROUP BY
            PURCHASEORDERCODE,
            ITEMTYPEAFICODE,
            FULLITEMIDENTIFIER,
            ASSORTMENTNUMBERID
    )
GROUP BY
    no_po,
    kode_item,
    ASSORTMENTNUMBERID;


-- DB2ADMIN.ITXVIEW_PURCHASE_DISKON source

CREATE VIEW ITXVIEW_PURCHASE_DISKON AS
SELECT
    PURCHASEORDERCODE,
    ITAXCODE,
    DOCUMENTCURRENCYCODE,
    sum(CALCULATEDVALUE) AS CALCULATEDVALUE,
    sum(BASEVALUE) AS BASEVALUE
FROM
    (
        SELECT
            INDTAXDETAIL.ITAXCODE,
            INDTAXDETAIL.CALCULATEDVALUE,
            INDTAXDETAIL.BASEVALUE,
            INDTAXDETAIL.DOCUMENTCURRENCYCODE,
            p.PURCHASEORDERCODE
        FROM
            PURCHASEORDERLINE p
        LEFT JOIN INDTAXDETAIL INDTAXDETAIL ON
            p.ABSUNIQUEID = INDTAXDETAIL.ABSUNIQUEID
        WHERE
            INDTAXDETAIL.ITAXCODE IN(
                'D01', 'D02'
            )
            AND INDTAXDETAIL.CALCULATEDVALUE <> 0
            --  AND p.PURCHASEORDERCODE ='SPI2300081'
    )
GROUP BY
    PURCHASEORDERCODE,
    ITAXCODE,
    DOCUMENTCURRENCYCODE;


-- DB2ADMIN.ITXVIEW_PURCHASE_KET_DISKON source

CREATE VIEW ITXVIEW_PURCHASE_KET_DISKON AS
SELECT
    *
FROM
    INDTAXDETAIL
WHERE
    ITAXCODE = 'D02';


-- DB2ADMIN.ITXVIEW_PURCHASE_NOPURCHASE source

CREATE VIEW ITXVIEW_PURCHASE_NOPURCHASE AS
SELECT
    TRIM(PURCHASEORDER.CODE) AS NO_PO,
    PURCHASEORDER.ORDERDATE AS TGL_PO,
    TRIM(REPLENISHMENTREQUISITION.HEADERCODE) AS KODE_PR,
    REPLENISHMENTREQUISITION.PROPOSALDATE AS TGL_PR,
    ITXVIEW_PURCHASE_WFM_APPROVE.TGL_APPROVED,
    TRIM(REPLENISHMENTREQUISITION.RFQDETAILRFQHEADERCODE)AS RFQ_CODE,
    CASE
        WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NULL THEN '-'
        ELSE 
    	 PURCHASEORDERLINE.ITEMDESCRIPTION
    END AS ITEMDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1 AS SUPPLIER_NAME,
    PURCHASEORDERline.PRICE AS UNITPRICE,
    PURCHASEORDERLINE.USERPRIMARYQUANTITY AS JML_ORDUNIT,
    CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR MRNDETAIL.PRIMARYQTY IS NULL THEN 0
        ELSE 
    	 MRNDETAIL.PRIMARYQTY
    END AS QTY_TERIMA,  
      CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR PURCHASEORDERLINE.NETVALUE IS NULL THEN 0
        ELSE 
    	 PURCHASEORDERLINE.NETVALUE
    END AS TOTAL_HARGA,
       CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR MRNDETAIL.GROSSVALUE IS NULL THEN 0
        ELSE 
    	 MRNDETAIL.GROSSVALUE
    END AS TOTAL_HARGA_PPN,
           CASE
        WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NOT NULL
        AND TRIM(MRNHEADER.CHALLANNO) IS NULL THEN 'Belum ada penerimaan'
        ELSE 
        CASE
            WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NULL
            AND PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL 
    		THEN 'Data line Kosong'
            ELSE 
    	 TRIM(MRNHEADER.CHALLANNO)
        END
    END AS no_sj,
    CASE
        WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NOT NULL
        AND TRIM(MRNHEADER.CHALLANNO) IS NOT NULL
        AND TRIM(MRNHEADER.INVOICENO) IS NULL THEN '-'
        WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NOT NULL
        AND TRIM(MRNHEADER.CHALLANNO) IS NULL
        AND TRIM(MRNHEADER.INVOICENO) IS NULL THEN 'Belum ada penerimaan'
        ELSE 
    		CASE
            WHEN PURCHASEORDERLINE.ITEMDESCRIPTION IS NULL
            AND TRIM(MRNHEADER.CHALLANNO) IS NULL
            AND PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL 
    			THEN 'Data line Kosong'
            ELSE 
    	 TRIM(MRNHEADER.INVOICENO)
        END
    END AS no_invoice,
     MRNHEADER.CHALLANDATE AS tgl_sj,
    MRNHEADER.INVOICEDATE AS tgl_invoice,
    PURCHASEORDERLINE.ENTRYEXCHANGERATE AS EXCHANGERATE,
    PURCHASEORDER.CURRENCYCODE AS CUR,
    CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR MRNDETAIL.BASICVALUECC IS NULL THEN 0
        ELSE 
    	 MRNDETAIL.BASICVALUECC
    END AS nilai_invoice,
      CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR MRNDETAIL.GROSSVALUECC IS NULL THEN 0
        ELSE 
    	 MRNDETAIL.GROSSVALUECC
    END AS nilai_invoiceCC,
        CASE
        WHEN PURCHASEORDERLINE.USERPRIMARYQUANTITY IS NULL
        OR CAST(
            MRNHEADER.CODE AS varchar(20)
        ) IS NULL THEN 0
        ELSE 
    	 MRNHEADER.CODE
    END AS no_MRN,
    ITXVIEW_PURCHASE_WFM_APPROVE.REASONCODE,
    ITXVIEW_PURCHASE_WFM_APPROVE.WFMPROCESSID
FROM
    PURCHASEORDER PURCHASEORDER
LEFT JOIN PURCHASEORDERLINE PURCHASEORDERLINE ON
    PURCHASEORDERLINE.PURCHASEORDERCODE = PURCHASEORDER.CODE
LEFT JOIN MRNDETAIL MRNDETAIL ON
    MRNDETAIL.PURCHASEORDERCODE = PURCHASEORDERLINE.PURCHASEORDERCODE
    AND MRNDETAIL.ORDERLINE = PURCHASEORDERLINE.ORDERLINE
    AND MRNDETAIL.SUBCODE01 = PURCHASEORDERLINE.SUBCODE01
    AND MRNDETAIL.SUBCODE02 = PURCHASEORDERLINE.SUBCODE02
    --    AND MRNDETAIL.SUBCODE03 = PURCHASEORDERLINE.SUBCODE03
    --    AND MRNDETAIL.UNITPRICE = PURCHASEORDERline.PRICE
    --    AND MRNDETAIL.BASICVALUE =PURCHASEORDERline.NETVALUE
LEFT JOIN MRNHEADER MRNHEADER ON
    MRNHEADER.CODE = MRNDETAIL.MRNHEADERCODE
LEFT JOIN REPLENISHMENTREQUISITION REPLENISHMENTREQUISITION ON
    REPLENISHMENTREQUISITION.LINEPURCHASEORDERCODE = PURCHASEORDERLINE.PURCHASEORDERCODE
    AND REPLENISHMENTREQUISITION.LINEORDERLINE = PURCHASEORDERLINE.ORDERLINE
    AND REPLENISHMENTREQUISITION.SUBCODE01 = PURCHASEORDERLINE.SUBCODE01
    AND REPLENISHMENTREQUISITION.SUBCODE02 = PURCHASEORDERLINE.SUBCODE02
    AND REPLENISHMENTREQUISITION.SUBCODE03 = PURCHASEORDERLINE.SUBCODE03
    AND REPLENISHMENTREQUISITION.SUBCODE04 = PURCHASEORDERLINE.SUBCODE04
    AND REPLENISHMENTREQUISITION.SUBCODE05 = PURCHASEORDERLINE.SUBCODE05
    AND REPLENISHMENTREQUISITION.SUBCODE06 = PURCHASEORDERLINE.SUBCODE06
    AND REPLENISHMENTREQUISITION.SUBCODE07 = PURCHASEORDERLINE.SUBCODE07
LEFT JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    CUSTOMERSUPPLIERDATA.CODE = PURCHASEORDER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID
LEFT JOIN ITXVIEW_PURCHASE_WFM_APPROVE ITXVIEW_PURCHASE_WFM_APPROVE ON
    ITXVIEW_PURCHASE_WFM_APPROVE.ORDER_KODE = PURCHASEORDER.CODE
WHERE
    YEAR(PURCHASEORDEr.ORDERDATE) IN (
        2022, 2023, 2024
    )
    --    AND NOT ITXVIEW_PURCHASE_WFM_APPROVE.REASONCODE ='Rejected'
    --    AND NOT ITXVIEW_PURCHASE_WFM_APPROVE.REASONCODE IS NULL
    --    	AND YEAR (ITXVIEW_PURCHASE_WFM_APPROVE.TGL_APPROVED ) IN ( 2022, 2023, 2024)
GROUP BY
    REPLENISHMENTREQUISITION.HEADERCODE,
    REPLENISHMENTREQUISITION.PROPOSALDATE,
    PURCHASEORDER.CODE,
    PURCHASEORDER.ORDERDATE,
    ITXVIEW_PURCHASE_WFM_APPROVE.TGL_APPROVED,
    PURCHASEORDER.ORDPRNCUSTOMERSUPPLIERCODE,
    --    MRNHEADER.ORDPRNCUSTOMERSUPPLIERCODE,
    BUSINESSPARTNER.LEGALNAME1,
    REPLENISHMENTREQUISITION.RFQDETAILRFQHEADERCODE,
    PURCHASEORDERLINE.ITEMDESCRIPTION,
    PURCHASEORDERLINE.ENTRYEXCHANGERATE,
    PURCHASEORDER.CURRENCYCODE,
    PURCHASEORDERline.PRICE,
    PURCHASEORDERLINE.NETVALUE,
    MRNDETAIL.GROSSVALUE,
    PURCHASEORDERLINE.USERPRIMARYQUANTITY,
    MRNDETAIL.PRIMARYQTY,
    MRNHEADER.CHALLANNO,
    MRNHEADER.INVOICENO,
    MRNHEADER.CHALLANDATE,
    MRNHEADER.INVOICEDATE,
    MRNDETAIL.BASICVALUECC,
    MRNDETAIL.GROSSVALUECC,
    MRNHEADER.CODE,
    ITXVIEW_PURCHASE_WFM_APPROVE.REASONCODE,
     ITXVIEW_PURCHASE_WFM_APPROVE.WFMPROCESSID;


-- DB2ADMIN.ITXVIEW_PURCHASE_NO_IDENTITY source

CREATE VIEW ITXVIEW_PURCHASE_NO_IDENTITY AS
SELECT
    trim(purchaseorder.COMPANYCODE)|| '|' || trim(purchaseorder.COUNTERCODE)|| '|' || trim(purchaseorder.CODE) AS no_POidentity,
    PURCHASEORDER.CODE
FROM
    PURCHASEORDER purchaseorder;


-- DB2ADMIN.ITXVIEW_PURCHASE_PERMINTAAN source

CREATE VIEW ITXVIEW_PURCHASE_PERMINTAAN AS
SELECT
    trim(purchaseorder.COMPANYCODE)|| '|' || trim(purchaseorder.COUNTERCODE)|| '|' || trim(purchaseorder.CODE) AS no_POidentity,
    purchaseorder.CODE,
    purchaseorder.COUNTERCODE,
    purchaseorder.ORDERDATE,
    businesspartner.LEGALNAME1 AS NAMA_CUSTOMER,
    BUSINESSPARTNER.PERSON,
    PAYMENTMETHOD.LONGDESCRIPTION AS paymenmethode,
    termsofshipping.LONGDESCRIPTION AS SHIPPINGTERM,
    PURCHASEORDER.TEMPLATECODE,
    PURCHASEORDER.EXTERNALREFERENCE,
    PURCHASEORDER.INTERNALREFERENCE,
    PURCHASEORDER.DESCRIPTION,
    PURCHASEORDER.TERMSOFDELIVERYCODE,
    PURCHASEORDER.DELIVERYDESCRIPTION,
    PURCHASEORDER.TERMSOFSHIPPINGCODE,
    PURCHASEORDER.SHIPPINGDESCRIPTION,
    PURCHASEORDER.REQUIREDDUEDATE,
    PURCHASEORDER.CONFIRMEDDUEDATE,
    PURCHASEORDER.CURRENCYCODE,
    PURCHASEORDER.PAYMENTMETHODCODE,
    PURCHASEORDER.WFMORDERSTATUS,
    PURCHASEORDER.ORDERCATEGORYCODE,
    --    PURCHASEORDERLINE.ITEMDESCRIPTION,
    --    PURCHASEORDERLINE.USERPRIMARYUOMCODE,
    --    PURCHASEORDERLINE.USERPRIMARYQUANTITY,
    --    PURCHASEORDERLINE.USERSECONDARYUOMCODE,
    --    PURCHASEORDERLINE.USERSECONDARYQUANTITY,
    --    PURCHASEORDERLINE.QUALITYCODE,
    --    PURCHASEORDERLINE.WAREHOUSECODE,
    --    PURCHASEORDERLINE.COSTCENTERCODE,
    --    PURCHASEORDERLINE.PRICEUNITOFMEASURECODE,
    --    PURCHASEORDERLINE.PRICE,
    --    PURCHASEORDERLINE.NETVALUE AS pORDERLINE_NETTVALUE,
    PURCHASEORDERIE.BASICVALUE AS pORDERIE_BASICVALUE,
    PURCHASEORDERIE.NETTVALUE AS pORDERIE_NETTVALUE,
    --    PURCHASEORDERLINEIE.TAXTEMPLATECODE,
    --    PURCHASEORDERLINEIE.BASICVALUE AS pORDERLINEIE_NETTVALUE,
    --    PURCHASEORDERLINE.CREATIONUSER,
    PURCHASEORDER.ABSUNIQUEID
FROM
    PURCHASEORDER purchaseorder
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = PURCHASEORDER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
    PAYMENTMETHOD.CODE = PURCHASEORDER.PAYMENTMETHODCODE
LEFT JOIN TERMSOFSHIPPING TERMSOFSHIPPING ON
    TERMSOFSHIPPING.CODE = PURCHASEORDER.TERMSOFSHIPPINGCODE
LEFT JOIN PURCHASEORDERIE PURCHASEORDERIE ON
    PURCHASEORDERIE.CODE = PURCHASEORDER.CODE
    --LEFT JOIN PURCHASEORDERLINE PURCHASEORDERLINE ON
    --    PURCHASEORDERLINE.PURCHASEORDERCODE = PURCHASEORDER.CODE
    --LEFT JOIN PURCHASEORDERLINEIE PURCHASEORDERLINEIE ON
    --    PURCHASEORDERLINEIE.PURCHASEORDERCODE = PURCHASEORDERLINE.PURCHASEORDERCODE
    --    AND PURCHASEORDERLINEIE.ORDERLINE = PURCHASEORDERLINE.ORDERLINE
    --WHERE 
    --PURCHASEORDERLINEIE.TAXTEMPLATECODE = 'Y01'
GROUP BY
    purchaseorder.COMPANYCODE,
    purchaseorder.COUNTERCODE,
    purchaseorder.CODE,
    purchaseorder.ORDERDATE,
    businesspartner.LEGALNAME1,
    BUSINESSPARTNER.PERSON,
    PAYMENTMETHOD.LONGDESCRIPTION,
    termsofshipping.LONGDESCRIPTION,
    PURCHASEORDER.TEMPLATECODE,
    PURCHASEORDER.ORDERDATE,
    PURCHASEORDER.EXTERNALREFERENCE,
    PURCHASEORDER.INTERNALREFERENCE,
    PURCHASEORDER.DESCRIPTION,
    PURCHASEORDER.TERMSOFDELIVERYCODE,
    PURCHASEORDER.DELIVERYDESCRIPTION,
    PURCHASEORDER.TERMSOFSHIPPINGCODE,
    PURCHASEORDER.SHIPPINGDESCRIPTION,
    PURCHASEORDER.REQUIREDDUEDATE,
    PURCHASEORDER.CONFIRMEDDUEDATE,
    PURCHASEORDER.CURRENCYCODE,
    PURCHASEORDER.PAYMENTMETHODCODE,
    PURCHASEORDER.WFMORDERSTATUS,
     PURCHASEORDER.ORDERCATEGORYCODE,
    --    PURCHASEORDERLINE.ITEMDESCRIPTION,
    --    PURCHASEORDERLINE.USERPRIMARYUOMCODE,
    --    PURCHASEORDERLINE.USERPRIMARYQUANTITY,
    --    PURCHASEORDERLINE.USERSECONDARYUOMCODE,
    --    PURCHASEORDERLINE.USERSECONDARYQUANTITY,
    --    PURCHASEORDERLINE.QUALITYCODE,
    --    PURCHASEORDERLINE.WAREHOUSECODE,
    --    PURCHASEORDERLINE.COSTCENTERCODE,
    --    PURCHASEORDERLINE.PRICEUNITOFMEASURECODE,
    --    PURCHASEORDERLINE.PRICE,
    --    PURCHASEORDERLINE.NETVALUE,
    --    PURCHASEORDERLINE.CREATIONUSER,
    PURCHASEORDERIE.BASICVALUE,
    PURCHASEORDERIE.NETTVALUE,
    --    PURCHASEORDERLINEIE.TAXTEMPLATECODE,
    --    PURCHASEORDERLINEIE.BASICVALUE,
    PURCHASEORDER.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEW_PURCHASE_PPN source

CREATE VIEW ITXVIEW_PURCHASE_PPN AS
SELECT
    *
FROM
    INDTAXTOTAL
WHERE
    TAXCATEGORYCODE = 'TAX'
    AND ITAXCODE = 'VT4';


-- DB2ADMIN.ITXVIEW_PURCHASE_QTY source

CREATE VIEW ITXVIEW_PURCHASE_QTY AS
SELECT
    PURCHASEORDERCODE AS PO,
    P.CURRENCYCODE,
    CASE
        WHEN Pl.PRICEUNITOFMEASURECODE = 'BL' THEN sum(Pl.USERSECONDARYQUANTITY)
        ELSE
	sum(Pl.USERPRIMARYQUANTITY)
    END AS QTY,
    CASE
        WHEN Pl.PRICEUNITOFMEASURECODE = 'BL' THEN Pl.USERSECONDARYUOMCODE
        ELSE
	Pl.USERPRIMARYUOMCODE
    END AS KET_QTY
FROM
    PURCHASEORDER p
LEFT JOIN PURCHASEORDERLINE Pl ON
    p.code = pl.PURCHASEORDERCODE
    --     WHERE PURCHASEORDERCODE = 'GEL2201153'
    --WHERE PURCHASEORDERCODE IN ('PRY2200205','GEL2200013')
GROUP BY
    PURCHASEORDERCODE,
    P.CURRENCYCODE,
    PRICEUNITOFMEASURECODE,
    USERSECONDARYUOMCODE,
    USERPRIMARYUOMCODE;


-- DB2ADMIN.ITXVIEW_PURCHASE_SHIPPING_COSTS source

CREATE VIEW ITXVIEW_PURCHASE_SHIPPING_COSTS AS
SELECT
    *
FROM
    INDTAXTOTAL
WHERE
    ITAXCODE = 'FR1';


-- DB2ADMIN.ITXVIEW_PURCHASE_WFM_APPROVE source

CREATE VIEW ITXVIEW_PURCHASE_WFM_APPROVE AS
SELECT
    trim(VIEWWFMLINKEDENTITYFULL.WFMPROCESSID) AS WFMPROCESSID ,
    TRIM(SUBSTR(SUBSTR(VIEWWFMLINKEDENTITYFULL.REFERENCEDENTITYPK, LOCATE('|', VIEWWFMLINKEDENTITYFULL.REFERENCEDENTITYPK)+ 1), LOCATE('|', SUBSTR(VIEWWFMLINKEDENTITYFULL.REFERENCEDENTITYPK, LOCATE('|', VIEWWFMLINKEDENTITYFULL.REFERENCEDENTITYPK)+ 1))+ 1)) AS ORDER_KODE,
    SUBSTR(VIEWWFMLINKEDENTITYFULL.LASTUPDATEDATETIME , 1, LOCATE('.', VIEWWFMLINKEDENTITYFULL.LASTUPDATEDATETIME)-4) AS TGL_APPROVED,
    VIEWWFMLINKEDENTITYFULL.REASONCODE
FROM
    VIEWWFMLINKEDENTITYFULL VIEWWFMLINKEDENTITYFULL
WHERE
    REASONCODE = 'Approve'
GROUP BY
    VIEWWFMLINKEDENTITYFULL.WFMPROCESSID,
    VIEWWFMLINKEDENTITYFULL.REFERENCEDENTITYPK,
    VIEWWFMLINKEDENTITYFULL.LASTUPDATEDATETIME,
    VIEWWFMLINKEDENTITYFULL.REASONCODE;


-- DB2ADMIN.ITXVIEW_QTYPACKING source

CREATE VIEW ITXVIEW_QTYPACKING AS
SELECT
    e.DEMANDCODE,
    CASE
        WHEN sum(b.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN sum(b2.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b2.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(b3.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE SUM(b3.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(s.BASEPRIMARYQUANTITY) IS NULL THEN 0
        ELSE SUM(s.BASEPRIMARYQUANTITY)
    END +
    CASE
        WHEN sum(s2.BASEPRIMARYQUANTITY) IS NULL THEN 0
        ELSE sum(s2.BASEPRIMARYQUANTITY)
    END AS QTY_PACKING,
    CASE
        WHEN sum(b.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN sum(b2.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b2.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(b3.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE SUM(b3.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(s.BASESECONDARYQUANTITY) IS NULL THEN 0
        ELSE SUM(s.BASESECONDARYQUANTITY)
    END +
    CASE
        WHEN sum(s2.BASESECONDARYQUANTITY) IS NULL THEN 0
        ELSE sum(s2.BASESECONDARYQUANTITY)
    END AS QTY_PACKING_YARD
FROM
    ELEMENTSINSPECTION e
LEFT JOIN BALANCE b ON
    b.ELEMENTSCODE = e.ELEMENTCODE
    AND b.LOGICALWAREHOUSECODE = 'M039'
LEFT JOIN BALANCE b2 ON
    b2.ELEMENTSCODE = e.ELEMENTCODE
    AND b2.LOGICALWAREHOUSECODE = 'M031'
LEFT JOIN BALANCE b3 ON
    b3.ELEMENTSCODE = e.ELEMENTCODE
    AND b3.LOGICALWAREHOUSECODE = 'M504'
LEFT JOIN STOCKTRANSACTION s ON
    s.ITEMELEMENTCODE = e.ELEMENTCODE
    AND s.LOGICALWAREHOUSECODE = 'M031'
    AND s.TEMPLATECODE = 'S02'
LEFT JOIN STOCKTRANSACTION s2 ON
    s2.TEMPLATECODE = '098'
    AND s2.ITEMELEMENTCODE = e.ELEMENTCODE
WHERE
    LENGTH(TRIM(e.ELEMENTCODE))= 13
    --AND e.DEMANDCODE = '00145671'
GROUP BY
    e.DEMANDCODE;


-- DB2ADMIN.ITXVIEW_QTYPACKING_SUM source

CREATE VIEW ITXVIEW_QTYPACKING_SUM AS
SELECT
    p.ORIGDLVSALORDLINESALORDERCODE,
    p.ORIGDLVSALORDERLINEORDERLINE,
    CASE
        WHEN sum(b.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN sum(b2.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b2.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(b3.BASEPRIMARYQUANTITYUNIT) IS NULL THEN 0
        ELSE SUM(b3.BASEPRIMARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(s.BASEPRIMARYQUANTITY) IS NULL THEN 0
        ELSE SUM(s.BASEPRIMARYQUANTITY)
    END +
    CASE
        WHEN sum(s2.BASEPRIMARYQUANTITY) IS NULL THEN 0
        ELSE sum(s2.BASEPRIMARYQUANTITY)
    END AS QTY_PACKING,
    CASE
        WHEN sum(b.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN sum(b2.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE sum(b2.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(b3.BASESECONDARYQUANTITYUNIT) IS NULL THEN 0
        ELSE SUM(b3.BASESECONDARYQUANTITYUNIT)
    END +
    CASE
        WHEN SUM(s.BASESECONDARYQUANTITY) IS NULL THEN 0
        ELSE SUM(s.BASESECONDARYQUANTITY)
    END +
    CASE
        WHEN sum(s2.BASESECONDARYQUANTITY) IS NULL THEN 0
        ELSE sum(s2.BASESECONDARYQUANTITY)
    END AS QTY_PACKING_YARD
FROM
    ELEMENTSINSPECTION e
LEFT JOIN BALANCE b ON
    b.ELEMENTSCODE = e.ELEMENTCODE
    AND b.LOGICALWAREHOUSECODE = 'M039'
LEFT JOIN BALANCE b2 ON
    b2.ELEMENTSCODE = e.ELEMENTCODE
    AND b2.LOGICALWAREHOUSECODE = 'M031'
LEFT JOIN BALANCE b3 ON
    b3.ELEMENTSCODE = e.ELEMENTCODE
    AND b3.LOGICALWAREHOUSECODE = 'M504'
LEFT JOIN STOCKTRANSACTION s ON
    s.ITEMELEMENTCODE = e.ELEMENTCODE
    AND s.LOGICALWAREHOUSECODE = 'M031'
    AND s.TEMPLATECODE = 'S02'
LEFT JOIN STOCKTRANSACTION s2 ON
    s2.TEMPLATECODE = '098'
    AND s2.ITEMELEMENTCODE = e.ELEMENTCODE
LEFT JOIN PRODUCTIONDEMAND p ON
    p.CODE = e.DEMANDCODE
WHERE
    LENGTH(TRIM(e.ELEMENTCODE))= 13
    --	AND p.ORIGDLVSALORDLINESALORDERCODE = 'DOM2300256'
    --	AND p.ORIGDLVSALORDERLINEORDERLINE = '30'
GROUP BY
    p.ORIGDLVSALORDLINESALORDERCODE,
    p.ORIGDLVSALORDERLINEORDERLINE;


-- DB2ADMIN.ITXVIEW_QUALITYDATA source

CREATE VIEW ITXVIEW_QUALITYDATA AS
SELECT
    q.OPERATIONCODE,
    q.PRODUCTIONORDERCODE,
    trim(q2.CHARACTERISTICCODE) AS CHARACTERISTICCODE,
    q2.VALUEQUANTITY
FROM
    QUALITYDOCUMENT q
LEFT JOIN QUALITYDOCLINE q2 ON
    q2.QUALITYDOCUMENTHEADERNUMBERID = q.HEADERNUMBERID
    AND q2.QUALITYDOCPRODUCTIONORDERCODE = q.PRODUCTIONORDERCODE
WHERE
    NOT q.PRODUCTIONORDERCODE IS NULL
    AND NOT q.PRODUCTIONORDERCODE = ''
    AND NOT q2.VALUEQUANTITY IS NULL;


-- DB2ADMIN.ITXVIEW_QUALITYDOCLINE_STATUS_TEST_TAS source

CREATE VIEW ITXVIEW_QUALITYDOCLINE_STATUS_TEST_TAS AS
SELECT
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.TESTLINESTATUS
FROM
    QUALITYDOCLINE QUALITYDOCLINE
WHERE
    CASE
        WHEN (
            QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01 = 'R'
                OR QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01 = 'D'
        ) THEN QUALITYDOCLINE.CHARACTERISTICCODE = 'DL'
        OR QUALITYDOCLINE.CHARACTERISTICCODE = 'DE'
        ELSE QUALITYDOCLINE.CHARACTERISTICCODE <> 'DL'
        OR QUALITYDOCLINE.CHARACTERISTICCODE <> 'DE'
    END
GROUP BY
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.TESTLINESTATUS;


-- DB2ADMIN.ITXVIEW_QUALITYDOCLINE_TAS source

CREATE VIEW ITXVIEW_QUALITYDOCLINE_TAS AS
SELECT
    QUALITYDOCLINE.QUALITYDOCUMENTHEADERLINE,
    QUALITYDOCLINE.QUALITYDOCUMENTLOTCODE,
    QUALITYDOCLINE.CHARACTERISTICCODE,
    QUALITYCHARACTERISTICTYPE.SHORTDESCRIPTION,
    QUALITYDOCLINE.VALUEQUANTITY,
    QUALITYDOCLINE.VALUEQUANTITY2,
    QUALITYDOCLINE.VALUEQUANTITY3
FROM
    QUALITYDOCLINE QUALITYDOCLINE
LEFT JOIN QUALITYCHARACTERISTICTYPE QUALITYCHARACTERISTICTYPE
	ON
    QUALITYCHARACTERISTICTYPE.CODE = QUALITYDOCLINE.CHARACTERISTICCODE
WHERE
    CASE
        WHEN (
            QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01 = 'R'
                OR QUALITYDOCLINE.QUALITYDOCUMENTSUBCODE01 = 'D'
        ) THEN QUALITYDOCLINE.CHARACTERISTICCODE = 'DL'
        OR QUALITYDOCLINE.CHARACTERISTICCODE = 'DE'
        ELSE QUALITYDOCLINE.CHARACTERISTICCODE <> 'DL'
        OR QUALITYDOCLINE.CHARACTERISTICCODE <> 'DE'
    END
    --	AND QUALITYDOCLINE.QUALITYDOCUMENTLOTCODE = 'TEST';


-- DB2ADMIN.ITXVIEW_QUALITYREASON_FOC source

CREATE VIEW ITXVIEW_QUALITYREASON_FOC AS
SELECT
    ELEMENTCODE,
    QUALITYREASONCODE
FROM
    ELEMENTSINSPECTION e
WHERE
    QUALITYREASONCODE = 'FOC';


-- DB2ADMIN.ITXVIEW_RAJUT source

-- RAJUT, BOOKING BELUM READY
CREATE VIEW ITXVIEW_RAJUT AS
SELECT
    DISTINCT
	CODE,
    ORIGDLVSALORDLINESALORDERCODE,
    ORIGDLVSALORDERLINEORDERLINE,
    ITEMTYPEAFICODE,
    --	LISTAGG(TRIM(LONGDESCRIPTION) || '(' || TRIM(BUYER) || ')', ', ') AS SUMMARIZEDDESCRIPTION,
    LISTAGG(
        TRIM(LONGDESCRIPTION) || ' (' || 
			CASE
            WHEN TRIM(BUYER) IS NULL THEN '()'
            ELSE TRIM(BUYER)
        END || ') ' || 
			'(' || TRIM(CODE) || ' - ' || TRIM(ORIGDLVSALORDLINESALORDERCODE) || ')',
        ', '
    ) AS SUMMARIZEDDESCRIPTION,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    TGLRENCANA,
    TGLPOGREIGE
FROM
    (
        SELECT
            DISTINCT 
			p.ORIGDLVSALORDERLINEORDERLINE,
            p.ORIGDLVSALORDLINESALORDERCODE,
            p.CODE,
            p2.ORDERCODE,
            p2.RESERVATIONLINE AS NO_URUT_BENANG,
            CASE
                WHEN p2.ITEMTYPEAFICODE = 'DYR'
                OR p2.ITEMTYPEAFICODE = 'GYR' THEN TRIM(f.SUMMARIZEDDESCRIPTION)
                ELSE TRIM(p4.LONGDESCRIPTION)
            END AS LONGDESCRIPTION,
            CASE
                WHEN TRIM(CAST(p3.COMMENTTEXT AS VARCHAR(500))) IS NULL THEN TRIM(CAST(p5.COMMENTTEXT AS VARCHAR(500)))
                ELSE TRIM(CAST(p3.COMMENTTEXT AS VARCHAR(500)))
            END AS BUYER,
            p.SUBCODE01,
            p.SUBCODE02,
            p.SUBCODE03,
            p.SUBCODE04,
            p.SUBCODE05,
            p.ITEMTYPEAFICODE,
            p2.ITEMTYPEAFICODE AS ITEMTYPE_RESERVATION,
            a1.VALUEDATE AS TGLRENCANA,
            a2.VALUEDATE AS TGLPOGREIGE
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN PRODUCT p4 ON
            p4.ITEMTYPECODE = p2.ITEMTYPEAFICODE
            AND 
								p4.SUBCODE01 = p2.SUBCODE01
            AND p4.SUBCODE02 = p2.SUBCODE02
            AND
								p4.SUBCODE03 = p2.SUBCODE03
            AND p4.SUBCODE04 = p2.SUBCODE04
            AND
								p4.SUBCODE05 = p2.SUBCODE05
            AND p4.SUBCODE06 = p2.SUBCODE06
            AND
								p4.SUBCODE07 = p2.SUBCODE07
            AND p4.SUBCODE07 = p2.SUBCODE07
        LEFT JOIN FULLITEMKEYDECODER f ON
            f.ITEMTYPECODE = p2.ITEMTYPEAFICODE
            AND 
								f.SUBCODE01 = p2.SUBCODE01
            AND f.SUBCODE02 = p2.SUBCODE02
            AND
								f.SUBCODE03 = p2.SUBCODE03
            AND f.SUBCODE04 = p2.SUBCODE04
            AND
								f.SUBCODE05 = p2.SUBCODE05
            AND f.SUBCODE06 = p2.SUBCODE06
            AND
								f.SUBCODE07 = p2.SUBCODE07
            AND f.SUBCODE07 = p2.SUBCODE07
            AND 
								f.SUBCODE08 = p2.SUBCODE08
        LEFT JOIN PRODUCTIONRESERVATIONCOMMENT p3 ON
            p3.PRODUCTIONRESERVATIONORDERCODE = p2.ORDERCODE
            AND p3.PRORESERVATIONRESERVATIONLINE = p2.RESERVATIONLINE
        LEFT JOIN PRODUCTIONDEMANDCOMMENT p5 ON
            p5.PRODUCTIONDEMANDCODE = p2.ORDERCODE
        LEFT JOIN ADSTORAGE a1 ON
            a1.UNIQUEID = p.ABSUNIQUEID
            AND a1.FIELDNAME = 'RMPReqDate'
        LEFT JOIN ADSTORAGE a2 ON
            a2.UNIQUEID = p.ABSUNIQUEID
            AND a2.FIELDNAME = 'RMPGreigeReqDateTo'
            --		WHERE 
            --			p.SUBCODE01 = 'TC' 
            --			AND p.SUBCODE02 = 'FKP' 
            --			AND p.SUBCODE03 = '16034'
            --			AND p.SUBCODE04 = '32-8-12' 
            --			AND p.ORIGDLVSALORDLINESALORDERCODE = 'DOM2301300'
            --			AND (p.ITEMTYPEAFICODE ='KGF' OR p.ITEMTYPEAFICODE ='FKG')
        ORDER BY
            p2.RESERVATIONLINE ASC
    )
GROUP BY
    CODE,
    SUBCODE01,
    SUBCODE02,
    SUBCODE03,
    SUBCODE04,
    SUBCODE05,
    ORIGDLVSALORDLINESALORDERCODE,
    ORIGDLVSALORDERLINEORDERLINE,
    TGLRENCANA,
    TGLPOGREIGE,
    --	ORIGDLVSALORDERLINEORDERLINE,
    ITEMTYPEAFICODE;


-- DB2ADMIN.ITXVIEW_RANTAI_KNT source

CREATE VIEW ITXVIEW_RANTAI_KNT AS
SELECT
    ADSTORAGE.UNIQUEID,
    ADSTORAGE.FIELDNAME,
    ADSTORAGE.VALUEDECIMAL
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    ADSTORAGE.FIELDNAME = 'rantai';


-- DB2ADMIN.ITXVIEW_REPORTADIDASQD source

CREATE VIEW ITXVIEW_REPORTADIDASQD AS
SELECT
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME,
    LISTAGG (
        TRIM( CAST( B.CHARACTERISTICCODE AS VARCHAR (20000))),
        ','
    ) AS CHARACTERISTICCODE,
    LISTAGG (
        CAST(
            B.VALUEBOOLEAN AS VARCHAR (20000)
        ),
        ','
    ) AS VALUEBOOLEAN,
    LISTAGG (
        CAST(
            B.VALUESTRING AS VARCHAR (20000)
        ),
        ','
    ) AS VALUESTRING,
    LISTAGG (
        CAST(
            B.VALUEQUANTITY AS VARCHAR (20000)
        ),
        ','
    ) AS VALUEQUANTITY,
    LISTAGG (
        CAST(
            B.VALUEGROUPCODE AS VARCHAR (20000)
        ),
        ','
    ) AS VALUEGROUPCODE
FROM
    QUALITYDOCUMENT A
LEFT JOIN QUALITYDOCLINE B ON
    A.HEADERLINE = B.QUALITYDOCUMENTHEADERLINE
    AND A.HEADERNUMBERID = B.QUALITYDOCUMENTHEADERNUMBERID
GROUP BY
    A.COMPANYCODE,
    A.HEADERNUMBERID,
    A.HEADERLINE,
    A.LOTCODE,
    A.DEMANDCODE,
    A.ORDPRNCUSTOMERSUPPLIERCODE,
    A.CREATIONUSER,
    A.CREATIONDATETIME;


-- DB2ADMIN.ITXVIEW_RESERVATION source

CREATE VIEW ITXVIEW_RESERVATION AS
SELECT
    p.PRODUCTIONORDERCODE,
    v2.ORDERCODE,
    p.GROUPLINE,
    p.ITEMTYPEAFICODE,
    p.USERPRIMARYQUANTITY,
    p.PRODRESERVATIONLINKGROUPCODE,
    v.INITIALUSERPRIMARYQUANTITY,
    p.USEDUSERPRIMARYQUANTITY,
    p.USERSECONDARYQUANTITY,
    p.USERSECONDARYUOMCODE,
    p.PICKUPQUANTITY
    --	v2.SUBCODE01,
    --	v2.SUBCODE02,
    --	v2.SUBCODE03,
    --	v2.SUBCODE04,
    --	v2.SUBCODE05,
    --	v2.SUBCODE06,
    --	v2.SUBCODE07
FROM
     VIEWPRODUCTIONRESERVATION p
RIGHT JOIN PRODUCTIONRESERVATION v2 ON
    v2.PRODUCTIONORDERCODE = p.PRODUCTIONORDERCODE
LEFT JOIN VIEWPRODUCTIONDEMANDSTEP v ON
    v.PRODUCTIONORDERCODE = p.PRODUCTIONORDERCODE
    AND v.PRODRESERVATIONLINKGROUPCODE = p.PRODRESERVATIONLINKGROUPCODE
    --WHERE 
    --	p.PRODUCTIONORDERCODE = '00046552'
GROUP BY
    p.PRODUCTIONORDERCODE,
    v2.ORDERCODE,
    p.GROUPLINE,
    p.ITEMTYPEAFICODE,
    p.USERPRIMARYQUANTITY,
    p.PRODRESERVATIONLINKGROUPCODE,
    v.INITIALUSERPRIMARYQUANTITY,
    p.USEDUSERPRIMARYQUANTITY,
    p.USERSECONDARYQUANTITY,
    p.USERSECONDARYUOMCODE,
    p.PICKUPQUANTITY
    --	v2.SUBCODE01,
    --	v2.SUBCODE02,
    --	v2.SUBCODE03,
    --	v2.SUBCODE04,
    --	v2.SUBCODE05,
    --	v2.SUBCODE06,
    --	v2.SUBCODE07;


-- DB2ADMIN.ITXVIEW_RESERVATION_GREIGE source

CREATE VIEW ITXVIEW_RESERVATION_GREIGE AS 
SELECT
    PRODUCTIONRESERVATION.ORDERCODE,
    PRODUCTIONRESERVATION.PRODUCTIONORDERCODE
FROM
    PRODUCTIONRESERVATION PRODUCTIONRESERVATION
WHERE
    (
        PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'KGF'
            OR PRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'FKG'
    );


-- DB2ADMIN.ITXVIEW_RESERVATION_KK source

CREATE VIEW ITXVIEW_RESERVATION_KK AS 
SELECT
    *
FROM
    PRODUCTIONRESERVATION
WHERE
    ITEMTYPEAFICODE = 'KGF'
    OR ITEMTYPEAFICODE = 'KFF'
    --	AND ORDERCODE = '00045993';


-- DB2ADMIN.ITXVIEW_RPM2_KNT source

CREATE VIEW ITXVIEW_RPM2_KNT AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'RPM2';


-- DB2ADMIN.ITXVIEW_RPM_KNT source

CREATE VIEW ITXVIEW_RPM_KNT AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'RPM';


-- DB2ADMIN.ITXVIEW_SALESCONFIRMATION_TAX source

CREATE VIEW ITXVIEW_SALESCONFIRMATION_TAX AS
SELECT
    DISTINCT 
SALESORDERCODE,
    TAXTEMPLATECODE
FROM
    (
        SELECT
            s.SALESORDERCODE,
            i.TAXTEMPLATECODE,
            s.ABSUNIQUEID
        FROM
            SALESORDERLINE s
        LEFT JOIN INDTAXDETAIL i ON
            s.ABSUNIQUEID = i.ABSUNIQUEID
    );


-- DB2ADMIN.ITXVIEW_SALESORDER_ADSTORAGE source

CREATE VIEW ITXVIEW_SALESORDER_ADSTORAGE AS
SELECT
    *
FROM
    ADSTORAGE ADSTORAGE
WHERE
    NAMENAME IN (
        'DateBOSentPPC', 'DatePOReceivedFactory', 'DateCopyPORMP', 'DateReceivedKNTRMP', 'KainAKJ'
    );


-- DB2ADMIN.ITXVIEW_SALESORDER_APPROVED source

CREATE VIEW ITXVIEW_SALESORDER_APPROVED AS
SELECT
    CODE,
    status,
    LASTUPDATEUSER,
    tgl_buat_mkt,
    LASTUPDATEDATETIMEUTC,
    CAST(
        LEFT(jam_approve, 8)AS TIME
    )AS jam_approve_mkt,
    ApproveRMP,
    approvedRMP,
    tgl_approvedRMP,
    ApprovePPC,
    ApprovedPPC
FROM
    (
        SELECT
            SALESORDER.CODE,
            CASE
                WHEN LOGSALESORDER.CURRENTSTATUS = 1 THEN 'Active'
            END AS status,
            CASE
                WHEN LOGSALESORDER.LASTUPDATEUSER = absuser.USERID THEN absuser.FULLNAME
            END LASTUPDATEUSER,
            LEFT(SALESORDER.CREATIONDATETIME, 10) AS tgl_buat_mkt,
            LOGSALESORDER.LASTUPDATEDATETIME AS waktu,
            LEFT(LOGSALESORDER.LASTUPDATEDATETIME, 10) AS LASTUPDATEDATETIMEUTC,
            RIGHT(LOGSALESORDER.LASTUPDATEDATETIME, 15) AS jam_approve,
            a3.FIELDNAME AS ApproveRMP,
            a3.VALUESTRING AS approvedRMP,
            a5.VALUEDATE AS tgl_approvedRMP,
            a4.FIELDNAME AS ApprovePPC,
            a4.VALUESTRING AS ApprovedPPC
        FROM
            SALESORDER
        LEFT JOIN LOGSALESORDER ON
            SALESORDER.CODE = LOGSALESORDER.CODE
            AND LOGSALESORDER.LOGOPERATION = '2'
        LEFT JOIN ADSTORAGE a3 ON
            SALESORDER.ABSUNIQUEID = a3.UNIQUEID
            AND a3.FIELDNAME = 'ApprovalRMP'
        LEFT JOIN ADSTORAGE a4 ON
            SALESORDER.ABSUNIQUEID = a4.UNIQUEID
            AND a4.FIELDNAME = 'ApprovalPPC'
        LEFT JOIN ADSTORAGE a5 ON
            SALESORDER.ABSUNIQUEID = a5.UNIQUEID
            AND a5.FIELDNAME = 'ApprovalDate'
        LEFT JOIN ABSUSERDEF absuser ON
            LOGSALESORDER.LASTUPDATEUSER = absuser.USERID
        WHERE
            LOGSALESORDER.CURRENTSTATUS = 1
            AND absuser.USERID IN (
                'ridwan.setiawan', 'budiman.mkt', 'heri.bahtiar', 'deden.wijaya', 'bambang.susiyanto', 'mas.roni', 'bunbun.kui', 'nia.wuri', 'yohanes.pribadi', 'frans.subrata'
            )
            AND absuser.GROUPUSERID IN(
                'sales', 'sales.manager'
            )
        ORDER BY
            LOGSALESORDER.LASTUPDATEDATETIME DESC
    );


-- DB2ADMIN.ITXVIEW_SALESORDER_NO_PO source

CREATE VIEW ITXVIEW_SALESORDER_NO_PO AS
SELECT
    DISTINCT 
		s.SALESORDERCODE,
    s.ITEMTYPEAFICODE,
    CASE
        WHEN s2.EXTERNALREFERENCE IS NULL THEN s.EXTERNALREFERENCE
        ELSE s2.EXTERNALREFERENCE
    END AS NO_PO,
    s.USERPRIMARYQUANTITY
FROM
    SALESORDERLINE s
LEFT JOIN 
		SALESORDER s2 ON
    s2.CODE = s.SALESORDERCODE
WHERE
    s.LINETEMPLATECODE NOT IN (
        'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
    )
GROUP BY
    SALESORDERCODE,
    s.ITEMTYPEAFICODE,
    s2.EXTERNALREFERENCE,
    s.EXTERNALREFERENCE,
    s.USERPRIMARYQUANTITY;


-- DB2ADMIN.ITXVIEW_SALESORDER_REPORTBUYER source

CREATE VIEW ITXVIEW_SALESORDER_REPORTBUYER AS
SELECT
    DISTINCT 
NAMA_BUYER,
    ORDERDATE,
    YEARORDER,
    MONTHORDER,
    SUM(BRUTO1) AS BRUTO1,
    SUM(BRUTO2) AS BRUTO2,
    SUM(BRUTO3) AS BRUTO3,
    SUM(BRUTO4) AS BRUTO4,
    SUM(BRUTO5) AS BRUTO5,
    SUM(BRUTO1_SS) AS BRUTO1_SS,
    SUM(BRUTO2_SS) AS BRUTO2_SS,
    SUM(BRUTO3_SS) AS BRUTO3_SS,
    SUM(BRUTO4_SS) AS BRUTO4_SS,
    SUM(BRUTO5_SS) AS BRUTO5_SS
FROM
    ITXVIEW_KGBRUTO_SALES A
    --WHERE 
    --NAMA_BUYER = 'ADIDAS'
GROUP BY
    NAMA_BUYER,
    ORDERDATE,
    YEARORDER,
    MONTHORDER;


-- DB2ADMIN.ITXVIEW_SALESORDER_REPORTHEADER source

CREATE VIEW ITXVIEW_SALESORDER_REPORTHEADER AS
SELECT
    DISTINCT   
    s1.ABSUNIQUEID,
    s1.CODE AS salorder_code,
    ads.SALESORDER,
    adb.BONORDER,
    s1.ORDERDATE AS TGL_ORDER,
    s1.COUNTERCODE AS PROD_TYPE,
    s1.EXTERNALREFERENCE AS NO_PO,
    c.CODE AS CUSTOMERCODE,
    s1.ORDERPARTNERBRANDCODE,
    b.LEGALNAME1 AS FACTORY_NAME,
    s1.CREATIONUSER AS SALES_ASSISTANT,
    s2.ITEMTYPEAFICODE,
    s2.LINETEMPLATECODE,
    o.LONGDESCRIPTION AS buyer,
    r.REMARKS,
    round(akj.TEKENSTOCK) AS TAKENSTOCK,
    MONTH(f.DATEPORECEIVEDFACTORY) AS bulan,
    DAYS(cr.DATECOPYPORMP)-DAYS(f.DATEPORECEIVEDFACTORY) AS Ontime_PO_to_RMP
FROM
    SALESORDER s1
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s1.CODE
LEFT JOIN CUSTOMERSUPPLIERDATA c ON
    s1.ORDPRNCUSTOMERSUPPLIERCODE = c.CODE
LEFT JOIN BUSINESSPARTNER b ON
    c.BUSINESSPARTNERNUMBERID = b.NUMBERID
LEFT JOIN ITXVIEW_ADSTORAGE_SALESORDER ads ON
    s1.CODE = ads.CODE
    AND s1.ABSUNIQUEID = ads.uniqueid
LEFT JOIN ITXVIEW_ADSTORAGE_BONORDER adb ON
    s1.CODE = adb.CODE
    AND s1.ABSUNIQUEID = adb.uniqueid
LEFT JOIN ITXVIEW_ADSTORAGE_REMARKS r ON
    s1.CODE = r.CODE
    AND s1.ABSUNIQUEID = r.uniqueid
LEFT JOIN ORDERPARTNERBRAND o ON
    s1.ORDPRNCUSTOMERSUPPLIERCODE = o.ORDPRNCUSTOMERSUPPLIERCODE
    AND s1.ORDERPARTNERBRANDCODE = o.CODE
LEFT JOIN ITXVIEW_ADSTORAGE_KainAKJ akj ON
    s2.SALESORDERCODE = akj.PROJECTCODE
LEFT JOIN ITXVIEW_ADSTORAGE_DATEPORECEIVEDFACTORY f ON
    f.UNIQUEID = s1.ABSUNIQUEID
    AND
    s1.CODE = f.CODE
LEFT JOIN ITXVIEW_ADSTORAGE_DATECOPYPORMP cr ON
    cr.UNIQUEID = s1.ABSUNIQUEID
    AND s1.CODE = cr.CODE
WHERE
    s1.TEMPLATECODE NOT IN (
        'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
    )
    --    AND s1.CODE LIKE '%DOM23%'
    --        AND s2.ITEMTYPEAFICODE = 'KFF'
    --                AND s2.SALESORDERCODE = 'DOM23003'
GROUP BY
    s1.ABSUNIQUEID,
    s1.CODE, 
    s1.ORDERDATE,
    s1.COUNTERCODE,
    s1.EXTERNALREFERENCE,
    s2.EXTERNALREFERENCE,
    c.CODE,
    s1.ORDERPARTNERBRANDCODE,
    b.LEGALNAME1,
    s1.CREATIONUSER,
    s2.ITEMTYPEAFICODE,
    s2.LINETEMPLATECODE,
    s1.CONFIRMEDDUEDATE,
    s1.REQUIREDDUEDATE,
    o.LONGDESCRIPTION,
    ads.SALESORDER,
    adb.BONORDER,
    r.REMARKS,
    akj.TEKENSTOCK,
    f.DATEPORECEIVEDFACTORY,
    cr.DATECOPYPORMP;


-- DB2ADMIN.ITXVIEW_SALESORDER_REPORTHEADER_1 source

CREATE VIEW ITXVIEW_SALESORDER_REPORTHEADER_1 AS
SELECT
    DISTINCT o.LONGDESCRIPTION AS BUYER,
    is1.SUM_NETTO AS NETTO_1,
    is2.SUM_NETTO AS NETTO_2,
    is3.SUM_NETTO AS NETTO_3,
    is4.SUM_NETTO AS NETTO_4,
    is5.SUM_NETTO AS NETTO_5,
    is6.SUM_NETTO AS NETTO_6,
    is7.SUM_NETTO AS NETTO_7,
    is8.SUM_NETTO AS NETTO_8,
    is9.SUM_NETTO AS NETTO_9,
    is10.SUM_NETTO AS NETTO_10,
    is11.SUM_NETTO AS NETTO_11,
    is12.SUM_NETTO AS NETTO_12
FROM
    ORDERPARTNERBRAND o
LEFT JOIN ITXVIEW_SUMSALESORDER is1 ON
    is1.BUYER = o.LONGDESCRIPTION
    AND is1.BULAN = 1
LEFT JOIN ITXVIEW_SUMSALESORDER is2 ON
    is2.BUYER = o.LONGDESCRIPTION
    AND is2.BULAN = 2
LEFT JOIN ITXVIEW_SUMSALESORDER is3 ON
    is3.BUYER = o.LONGDESCRIPTION
    AND is3.BULAN = 3
LEFT JOIN ITXVIEW_SUMSALESORDER is4 ON
    is4.BUYER = o.LONGDESCRIPTION
    AND is4.BULAN = 4
LEFT JOIN ITXVIEW_SUMSALESORDER is5 ON
    is5.BUYER = o.LONGDESCRIPTION
    AND is5.BULAN = 5
LEFT JOIN ITXVIEW_SUMSALESORDER is6 ON
    is6.BUYER = o.LONGDESCRIPTION
    AND is6.BULAN = 6
LEFT JOIN ITXVIEW_SUMSALESORDER is7 ON
    is7.BUYER = o.LONGDESCRIPTION
    AND is7.BULAN = 7
LEFT JOIN ITXVIEW_SUMSALESORDER is8 ON
    is8.BUYER = o.LONGDESCRIPTION
    AND is8.BULAN = 8
LEFT JOIN ITXVIEW_SUMSALESORDER is9 ON
    is9.BUYER = o.LONGDESCRIPTION
    AND is9.BULAN = 9
LEFT JOIN ITXVIEW_SUMSALESORDER is10 ON
    is10.BUYER = o.LONGDESCRIPTION
    AND is10.BULAN = 10
LEFT JOIN ITXVIEW_SUMSALESORDER is11 ON
    is11.BUYER = o.LONGDESCRIPTION
    AND is11.BULAN = 11
LEFT JOIN ITXVIEW_SUMSALESORDER is12 ON
    is12.BUYER = o.LONGDESCRIPTION
    AND is12.BULAN = 12;


-- DB2ADMIN.ITXVIEW_SALESORDER_TGL_SALESREGISTER2 source

CREATE VIEW ITXVIEW_SALESORDER_TGL_SALESREGISTER2 AS
SELECT
    ABSUNIQUEID,
    SALESORDERCODE,
    CASE
        WHEN TGLRENCANA IS NULL THEN DATEPORECEIVEDFACTORY
        ELSE TGLRENCANA
    END AS TGLRENCANA,    
    DATEBOSENTRMP,
    DATECOPYPORMP,
    DATEPORECEIVEDFACTORY,
    DATERECEIVEDKNTRMP,
    CONFIRMEDDUEDATE,
    REQUIREDDUEDATE
FROM
    (
        SELECT
            ABSUNIQUEID,
            SALESORDERCODE,
            CASE
                WHEN TGLRENCANA IS NULL THEN TGL_CREATE
                ELSE TGLRENCANA
            END AS TGLRENCANA,
            DATEBOSENTRMP,
            DATECOPYPORMP,
            DATEPORECEIVEDFACTORY,
            DATERECEIVEDKNTRMP,
            CONFIRMEDDUEDATE,
            REQUIREDDUEDATE
        FROM
            (
                SELECT
                    DISTINCT 
	ABSUNIQUEID,
                    SALESORDERCODE,
                    CASE
                        WHEN TGLRENCANA IS NULL THEN TGLRENCANA_AKJ
                        ELSE 
        	TGLRENCANA
                    END AS TGLRENCANA,
                    DATEBOSENTRMP,
                    DATECOPYPORMP,
                    DATEPORECEIVEDFACTORY,
                    DATERECEIVEDKNTRMP,
                    CONFIRMEDDUEDATE,
                    REQUIREDDUEDATE,
                    TGL_CREATE
                FROM
                    (
                        SELECT
                            s.ABSUNIQUEID,
                            a.CODE AS ALLOCATION_CODE,
                            a.ORDERCODE AS DEMAND_KFF,
                            a2.LOTCODE AS DEMAND_KGF,
                            p2.PRODUCTIONORDERCODE,
                            CASE
                                WHEN a2.PROJECTCODE IS NULL THEN a2.LOTCODE
                                ELSE a2.PROJECTCODE
                            END AS PROJECTCODE,
                            p.DLVSALORDERLINESALESORDERCODE AS SALESORDERCODE,
                            akj.TGLRENCANA_AKJ,
                            CASE
                                WHEN a3.VALUEDATE IS NULL THEN i.TGLRENCANA
                                ELSE a3.VALUEDATE
                            END AS TGLRENCANA,
                            a4.VALUEDATE AS DATEBOSENTRMP,
                            a5.VALUEDATE AS DATECOPYPORMP,
                            a6.VALUEDATE AS DATEPORECEIVEDFACTORY,
                            a7.VALUEDATE AS DATERECEIVEDKNTRMP,
                            s.CONFIRMEDDUEDATE,
                            s.REQUIREDDUEDATE,
                            SUBSTR(a.CREATIONDATETIME , 1, LOCATE('.', a.CREATIONDATETIME)-4) AS TGL_CREATE
                        FROM
                            PRODUCTIONDEMAND p
                        LEFT JOIN SALESORDER s ON
                            s.CODE = p.ORIGDLVSALORDLINESALORDERCODE
                        LEFT JOIN PRODUCTIONRESERVATION p2 ON
                            p2.ORDERCODE = p.CODE
                            AND p2.SUBCODE01 = p.SUBCODE01
                            AND p2.SUBCODE02 = p.SUBCODE02
                            AND p2.SUBCODE03 = p.SUBCODE03
                            AND p2.SUBCODE04 = p.SUBCODE04
                        LEFT JOIN ALLOCATION a ON
                            a.ORDERCODE = p.CODE
                            AND a.DECOSUBCODE01 = p.SUBCODE01
                            AND a.DECOSUBCODE02 = p.SUBCODE02
                            AND a.DECOSUBCODE03 = p.SUBCODE03
                            AND a.DECOSUBCODE04 = p.SUBCODE04
                            AND a.DETAILTYPE = 1
                        LEFT JOIN ALLOCATION a2 ON
                            a2.CODE = a.CODE
                            AND a2.DECOSUBCODE01 = a.DECOSUBCODE01
                            AND a2.DECOSUBCODE02 = a.DECOSUBCODE02
                            AND a2.DECOSUBCODE03 = a.DECOSUBCODE03
                            AND a2.DECOSUBCODE04 = a.DECOSUBCODE04
                            AND a2.DETAILTYPE = 0
                        LEFT JOIN PRODUCTIONRESERVATION p3 ON
                            p3.ORDERCODE = a2.LOTCODE
                            AND p3.SUBCODE01 = a2.DECOSUBCODE01
                            AND p3.SUBCODE02 = a2.DECOSUBCODE02
                            AND p3.SUBCODE03 = a2.DECOSUBCODE03
                            AND p3.SUBCODE04 = a2.DECOSUBCODE04
                        LEFT JOIN PRODUCTIONDEMAND p5 ON
                            p5.CODE = a2.LOTCODE
                            AND p5.SUBCODE01 = a2.DECOSUBCODE01
                            AND p5.SUBCODE02 = a2.DECOSUBCODE02
                            AND p5.SUBCODE03 = a2.DECOSUBCODE03
                            AND p5.SUBCODE04 = a2.DECOSUBCODE04
                        LEFT JOIN ADSTORAGE a3 ON
                            a3.UNIQUEID = p5.ABSUNIQUEID
                            AND a3.FIELDNAME = 'TglRencana'
                        LEFT JOIN ADSTORAGE a4 ON
                            a4.UNIQUEID = s.ABSUNIQUEID
                            AND a4.FIELDNAME = 'DateBOSentRMP'
                        LEFT JOIN ADSTORAGE a5 ON
                            a5.UNIQUEID = s.ABSUNIQUEID
                            AND a5.FIELDNAME = 'DateCopyPORMP'
                        LEFT JOIN ADSTORAGE a6 ON
                            a6.UNIQUEID = s.ABSUNIQUEID
                            AND a6.FIELDNAME = 'DatePOReceivedFactory'
                        LEFT JOIN ADSTORAGE a7 ON
                            a7.UNIQUEID = s.ABSUNIQUEID
                            AND a7.FIELDNAME = 'DateReceivedKNTRMP'
                        LEFT JOIN ITXVIEW_ADSTORAGE_KNT_TGLRENCANA i ON
                            i.SALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
                            AND i.SUBCODE01 = p.SUBCODE01
                            AND i.SUBCODE02 = p.SUBCODE02
                            AND i.SUBCODE03 = p.SUBCODE03
                        LEFT JOIN ITXVIEW_ADSTORAGE_KAINAKJ akj ON
                            akj.PROJECTCODE = s.CODE
                        WHERE
                            --                                    	    	 p.DLVSALORDERLINESALESORDERCODE in('DOM2300223','DOM2300233') AND 
                            --                        	         p.DLVSALORDERLINESALESORDERCODE LIKE  '%EXP23%' AND 
                            --            p2.ITEMTYPEAFICODE = 'KGF'
                            s.TEMPLATECODE NOT IN (
                                'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
                            )
                        GROUP BY
                            s.ABSUNIQUEID,
                            a.CODE,
                            a.ORDERCODE,
                            a2.LOTCODE,
                            p2.PRODUCTIONORDERCODE,
                            p.DLVSALORDERLINESALESORDERCODE,
                            a3.VALUEDATE,
                            a2.PROJECTCODE,
                            a4.VALUEDATE ,
                            a5.VALUEDATE ,
                            a6.VALUEDATE ,
                            a7.VALUEDATE ,
                            s.CONFIRMEDDUEDATE,
                            s.REQUIREDDUEDATE,
                            i.TGLRENCANA,
                            akj.TGLRENCANA_AKJ,
                            a.CREATIONDATETIME
                    )
            )
    );


-- DB2ADMIN.ITXVIEW_SALESREGISTER_HEADERBUYER source

CREATE VIEW ITXVIEW_SALESREGISTER_HEADERBUYER AS
SELECT
    DISTINCT 
o.CODE,
    o.LONGDESCRIPTION
FROM
    ORDERPARTNERBRAND o
LEFT JOIN SALESORDER s ON
    s.ORDPRNCUSTOMERSUPPLIERCODE = o.ORDPRNCUSTOMERSUPPLIERCODE
    AND 
s.ORDERPARTNERBRANDCODE = o.CODE
    --WHERE  s.PROJECTCODE  LIKE '%23000%';


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE source

CREATE VIEW ITXVIEW_SALESRELEASELINE AS
SELECT
    SRL.PROJECTCODE AS NO_ORDER,
    SRL.CODE AS NO_RELEASE,
    SRL.DLVSALESORDERLINEORDERLINE,
    CASE
        WHEN SOL.EXTERNALREFERENCE IS NOT NULL THEN SOL.EXTERNALREFERENCE
        ELSE SO.EXTERNALREFERENCE
    END AS NO_PO,
    CASE
        WHEN SRL.EXTERNALITEM IS NOT NULL THEN SRL.EXTERNALITEM
        ELSE TRIM(SRL.SUBCODE02) || ' ' || TRIM(SRL.SUBCODE03)
    END AS NO_ITEM,
    COLOR.WARNA,
    CASE
        WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND(SRL.RELEASEUSERPRIMARYQUANTITY)
        ELSE ROUND(SOL.USERPRIMARYQUANTITY)
    END AS ORDER_KG,
    CASE
        WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND((SRL.RELEASEUSERSECONDARYQUANTITY), 2)
        ELSE ROUND(SOL.USERSECONDARYQUANTITY)
    END AS ORDER_YD,
    SRL_BALANCE.BALANCE_KGS,
    SRL_BALANCE.BALANCE_YDS,
    SRL_BALANCE.BALANCE_PERCENT,
    SRL_BALANCE.KETERANGAN
FROM
    SALESRELEASELINE SRL
LEFT JOIN SALESORDER SO ON
    SRL.PROJECTCODE = SO.CODE
LEFT JOIN SALESORDERLINE SOL ON
    SRL.PROJECTCODE = SOL.PROJECTCODE
    AND SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
LEFT JOIN ITXVIEWCOLOR COLOR ON
    SOL.SUBCODE01 = COLOR.SUBCODE01
    AND SOL.SUBCODE02 = COLOR.SUBCODE02
    AND SOL.SUBCODE03 = COLOR.SUBCODE03
    AND SOL.SUBCODE04 = COLOR.SUBCODE04
    AND SOL.SUBCODE05 = COLOR.SUBCODE05
    AND SOL.SUBCODE06 = COLOR.SUBCODE06
    AND SOL.SUBCODE07 = COLOR.SUBCODE07
LEFT JOIN ITXVIEW_SALESRELEASELINE_BALANCE_ORDERS SRL_BALANCE ON
    SRL.CODE = SRL_BALANCE.NO_RELEASE
    AND SRL.PROJECTCODE = SRL_BALANCE.NO_ORDER
    AND SRL.DLVSALESORDERLINEORDERLINE = SRL_BALANCE.DLVSALESORDERLINEORDERLINE;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_BALANCE_ORDERS source

CREATE VIEW ITXVIEW_SALESRELEASELINE_BALANCE_ORDERS AS
SELECT
    NO_RELEASE,
    DLVSALESORDERLINEORDERLINE,
    NO_ORDER,
    ORDER_KG,
    ORDER_YD,
    KK_KG,
    KK_YD,
    KK_FOC,
    YD_NONFOC,
    KK_YD_FOC,
    KK_KG - ORDER_KG AS BALANCE_KGS,
    KK_YD - ORDER_YD AS BALANCE_YDS,
    round((KK_YD - ORDER_YD) / ORDER_YD, 3) * 100 AS BALANCE_PERCENT,
    CASE
        WHEN (
            KK_YD - ORDER_YD
        ) < 0 THEN 'KURANG'
        WHEN (
            KK_YD - ORDER_YD
        ) = 0 THEN 'COMPLETE'
        WHEN (
            KK_YD - ORDER_YD
        ) > 0 THEN 'OVER'
        ELSE 'KURANG'
    END AS keterangan
FROM
    (
        SELECT
            SRL.CODE AS NO_RELEASE,
            SRL.DLVSALESORDERLINEORDERLINE AS DLVSALESORDERLINEORDERLINE,
            SRL.PROJECTCODE AS NO_ORDER,
            CASE
                WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND(SRL.RELEASEUSERPRIMARYQUANTITY)
                ELSE ROUND(SOL.USERPRIMARYQUANTITY)
            END AS ORDER_KG,
            CASE
                WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND((SRL.RELEASEUSERSECONDARYQUANTITY), 2)
                ELSE ROUND(SOL.USERSECONDARYQUANTITY)
            END AS ORDER_YD,
            CASE
                WHEN SALESRELEASELINE_FOC.KK_FOC IS NOT NULL THEN SUM(A.USERPRIMARYQUANTITY) - SUM(SALESRELEASELINE_FOC.KK_FOC)
                ELSE
    	SUM(A.USERPRIMARYQUANTITY)
            END AS KK_KG,
            SUM(A.USERSECONDARYQUANTITY) AS YD_NONFOC,
            CASE
                WHEN SALESRELEASELINE_FOC.KK_YD_FOC IS NOT NULL THEN SUM(A.USERSECONDARYQUANTITY) - SUM(SALESRELEASELINE_FOC.KK_YD_FOC)
                ELSE
    	SUM(A.USERSECONDARYQUANTITY)
            END AS KK_YD,
            SUM(SALESRELEASELINE_FOC.KK_FOC) AS KK_FOC,
            SUM(SALESRELEASELINE_FOC.KK_YD_FOC) AS KK_YD_FOC
        FROM
            SALESRELEASELINE SRL
        LEFT JOIN SALESORDERLINE SOL ON
            SRL.PROJECTCODE = SOL.PROJECTCODE
            AND
SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION A
                WHERE
                    A.DETAILTYPE = '1'
            )A ON
            SRL.CODE = A.ORDERCODE
            AND
SRL.PROJECTCODE = A.PROJECTCODE
            AND
SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
            AND
SRL.LINE = A.ORDERLINE
            --    LEFT JOIN ITXVIEW_SALESRELEASELINE_SUB_LOTCODE SUB_LOTCODE ON
            --        A.CODE = SUB_LOTCODE.CODE
            --        AND
            --        SRL.PROJECTCODE = SUB_LOTCODE.PROJECTCODE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_FOC SALESRELEASELINE_FOC ON
            A.CODE = SALESRELEASELINE_FOC.ALLOCATION_CODE
            --    WHERE
            --                    SRL.CODE = '000000000008522'
            --                    AND SRL.PROJECTCODE = 'EXP2201045'
            --        AND SRL.DLVSALESORDERLINEORDERLINE = '160'
            --SRL.CODE = '000000000007765'
            --SRL.CODE = '000000000009343'
        GROUP BY
            SRL.CODE,
            SRL.PROJECTCODE,
            SRL.PROGRESSSTATUS,
            SRL.DLVSALESORDERLINEORDERLINE,
            SRL.RELEASEUSERPRIMARYQUANTITY,
            SRL.RELEASEUSERSECONDARYQUANTITY,
            SOL.USERPRIMARYQUANTITY,
            SOL.USERSECONDARYQUANTITY,
            SALESRELEASELINE_FOC.KK_FOC,
            SALESRELEASELINE_FOC.KK_YD_FOC
    )
    --    AND SRL.CODE = '000000000007192' AND SRL.PROJECTCODE = 'EXP2200216' AND SRL.DLVSALESORDERLINEORDERLINE = '60';


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_DETAIL source

CREATE VIEW ITXVIEW_SALESRELEASELINE_DETAIL AS
SELECT
    JML_ORDER,
    NO_RELEASE,
    NO_SALES,
    LINE_SALESRLS,
    NO_PO,
    NO_ITEM,
    WARNA,
    CASE
        WHEN JML_ORDER = 1 THEN order_kg_srl
        ELSE ORDER_KGS
    END AS ORDER_KG,
    CASE
        WHEN JML_ORDER = 1 THEN order_yd_srl
        ELSE ORDER_YDS
    END AS ORDER_YD,
    KK_WH,
    KK_LOTCODE,
    KK_KGS,
    KK_YDS,
    KK_FOC,
    JML_ROLL,
    BALANCE_KGS,
    BALANCE_YDS,
    CASE
        WHEN balance_percent IS NULL THEN order_yds
        ELSE balance_percent
    END AS balance_percent,
    CASE
        WHEN balance_yds < 0 THEN 'KURANG'
        WHEN balance_yds = 0 THEN 'COMPLETE'
        WHEN balance_yds > 0 THEN 'OVER'
        ELSE 'KURANG'
    END AS keterangan
FROM
    (
        SELECT
            SRL_JMLDATA.JML_RECORD AS JML_ORDER,
            SALESRELEASELINE_SUB_DETAIL.NO_RELEASE AS NO_RELEASE,
            SALESRELEASELINE_SUB_DETAIL.NO_SALES AS NO_SALES,
            SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS AS LINE_SALESRLS,
            SALESRELEASELINE_SUB_DETAIL.NO_PO AS NO_PO,
            SALESRELEASELINE_SUB_DETAIL.NO_ITEM AS NO_ITEM,
            SALESRELEASELINE_SUB_DETAIL.WARNA AS WARNA,
            round(SRL.RELEASEUSERPRIMARYQUANTITY) AS order_kg_srl,
            CASE
                WHEN SALESRELEASELINE_SUB_DETAIL.ORDER_KG IS NULL THEN round(SOL.USERPRIMARYQUANTITY)
                ELSE SALESRELEASELINE_SUB_DETAIL.ORDER_KG
            END AS order_kgs,
            (SRL.RELEASEUSERSECONDARYQUANTITY) AS order_yd_srl,
            CASE
                WHEN SALESRELEASELINE_SUB_DETAIL.ORDER_YD IS NULL THEN round(SOL.USERSECONDARYQUANTITY)
                ELSE SALESRELEASELINE_SUB_DETAIL.ORDER_YD
            END AS order_yds,
            SALESRELEASELINE_SUB_DETAIL.KK_LOTCODE AS KK_LOTCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(SALESRELEASELINE_SUB_DETAIL.KK_WH)
                ),
                ', '
            ) AS KK_WH,
            CASE
                WHEN SUM(KK_FOC) IS NOT NULL THEN (
                    sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - sum(SALESRELEASELINE_SUB_DETAIL.KK_FOC)
                )
                ELSE sum(KK_KGS)
            END AS KK_KGS,
            CASE
                WHEN SUM(KK_FOC) IS NOT NULL THEN (
                    sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - sum(SALESRELEASELINE_SUB_DETAIL.KK_YD_FOC)
                )
                ELSE sum(KK_YDS)
            END AS KK_YDS,
            sum(SALESRELEASELINE_SUB_DETAIL.KK_FOC) AS KK_FOC,
            sum(SALESRELEASELINE_SUB_DETAIL.JML_ROLL) AS JML_ROLL,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - SRL.RELEASEUSERPRIMARYQUANTITY
                ELSE sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - SALESRELEASELINE_SUB_DETAIL.ORDER_KG
            END AS balance_kgs,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SRL.RELEASEUSERSECONDARYQUANTITY
                ELSE sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SALESRELEASELINE_SUB_DETAIL.ORDER_YD
            END AS balance_yds,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN round((sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SRL.RELEASEUSERSECONDARYQUANTITY) / SRL.RELEASEUSERSECONDARYQUANTITY, 3) * 100
                ELSE round((sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SALESRELEASELINE_SUB_DETAIL.ORDER_YD) / SALESRELEASELINE_SUB_DETAIL.ORDER_YD, 3) * 100
            END AS balance_percent
        FROM
            SALESRELEASELINE SRL
        LEFT JOIN ITXVIEW_SUB_SALESRELEASELINE SALESRELEASELINE_SUB_DETAIL ON
            SRL.CODE = SALESRELEASELINE_SUB_DETAIL.NO_RELEASE
            AND SRL.PROJECTCODE = SALESRELEASELINE_SUB_DETAIL.NO_SALES
        LEFT JOIN SALESORDERLINE SOL ON
            SALESRELEASELINE_SUB_DETAIL.NO_SALES = SOL.SALESORDERCODE
            AND SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS = SOL.ORDERLINE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_JMLDATA SRL_JMLDATA ON
            SRL.CODE = SRL_JMLDATA.NO_RELEASE
        GROUP BY
            SRL_JMLDATA.JML_RECORD,
            SALESRELEASELINE_SUB_DETAIL.NO_RELEASE,
            SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS,
            SALESRELEASELINE_SUB_DETAIL.NO_SALES,
            SALESRELEASELINE_SUB_DETAIL.NO_PO,
            SALESRELEASELINE_SUB_DETAIL.NO_ITEM,
            SALESRELEASELINE_SUB_DETAIL.WARNA,
            SRL.RELEASEUSERPRIMARYQUANTITY,
            SRL.RELEASEUSERSECONDARYQUANTITY,
            SALESRELEASELINE_SUB_DETAIL.ORDER_KG,
            SALESRELEASELINE_SUB_DETAIL.ORDER_YD,
            SOL.USERPRIMARYQUANTITY,
            SOL.USERSECONDARYQUANTITY,
            SALESRELEASELINE_SUB_DETAIL.KK_LOTCODE
    );


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_DETAIL_JMLDATA source

CREATE VIEW ITXVIEW_SALESRELEASELINE_DETAIL_JMLDATA AS 
SELECT
    CODE AS NO_RELEASE,
    PROJECTCODE AS NO_ORDER
    --    DLVSALESORDERLINEORDERLINE AS ORDER_LINE,
    --   	count(CODE) AS JML_RECORD
FROM
    SALESRELEASELINE
    --            WHERE CODE = '000000000007765'
    --        WHERE code = '000000000007192'
    --    WHERE 
    --    CODE = '000000000008522'
    ----    AND PROJECTCODE = 'EXP2201045'
GROUP BY
    CODE,
    PROJECTCODE;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_DETAIL_ORDER source

CREATE VIEW ITXVIEW_SALESRELEASELINE_DETAIL_ORDER AS
SELECT
    JML_ORDER,
    NO_RELEASE,
    NO_SALES,
    LINE_SALESRLS,
    NO_PO,
    NO_ITEM,
    WARNA,
    order_kg_srl,
    ORDER_KGS,
    CASE
        WHEN JML_ORDER = 1 THEN order_kg_srl
        ELSE ORDER_KGS
    END AS ORDER_KG,
    CASE
        WHEN JML_ORDER = 1 THEN order_yd_srl
        ELSE ORDER_YDS
    END AS ORDER_YD,
    KK_WH,
    KK_LOTCODE,
    KK_KGS,
    KK_YDS,
    KK_FOC,
    JML_ROLL,
    BALANCE_KGS,
    BALANCE_YDS,
    CASE
        WHEN balance_percent IS NULL THEN order_yds
        ELSE balance_percent
    END AS balance_percent,
    CASE
        WHEN balance_yds < 0 THEN 'KURANG'
        WHEN balance_yds = 0 THEN 'COMPLETE'
        WHEN balance_yds > 0 THEN 'OVER'
        ELSE 'KURANG'
    END AS keterangan
FROM
    (
        SELECT
            SRL_JMLDATA.JML_RECORD AS JML_ORDER,
            SALESRELEASELINE_SUB_DETAIL.NO_RELEASE AS NO_RELEASE,
            SALESRELEASELINE_SUB_DETAIL.NO_SALES AS NO_SALES,
            SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS AS LINE_SALESRLS,
            SALESRELEASELINE_SUB_DETAIL.NO_PO AS NO_PO,
            SALESRELEASELINE_SUB_DETAIL.NO_ITEM AS NO_ITEM,
            SALESRELEASELINE_SUB_DETAIL.WARNA AS WARNA,
            ROUND(SRL.RELEASEUSERPRIMARYQUANTITY) AS order_kg_srl,
            CASE
                WHEN SALESRELEASELINE_SUB_DETAIL.ORDER_KG IS NULL THEN round(SOL.USERPRIMARYQUANTITY)
                ELSE SALESRELEASELINE_SUB_DETAIL.ORDER_KG
            END AS order_kgs,
            (SRL.RELEASEUSERSECONDARYQUANTITY) AS order_yd_srl,
            CASE
                WHEN SALESRELEASELINE_SUB_DETAIL.ORDER_YD IS NULL THEN round(SOL.USERSECONDARYQUANTITY)
                ELSE SALESRELEASELINE_SUB_DETAIL.ORDER_YD
            END AS order_yds,
            SALESRELEASELINE_SUB_DETAIL.KK_LOTCODE AS KK_LOTCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(SALESRELEASELINE_SUB_DETAIL.KK_WH)
                ),
                ', '
            ) AS KK_WH,
            CASE
                WHEN SUM(KK_FOC) IS NOT NULL THEN (
                    sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - sum(SALESRELEASELINE_SUB_DETAIL.KK_FOC)
                )
                ELSE sum(KK_KGS)
            END AS KK_KGS,
            CASE
                WHEN SUM(KK_FOC) IS NOT NULL THEN (
                    sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - sum(SALESRELEASELINE_SUB_DETAIL.KK_YD_FOC)
                )
                ELSE sum(KK_YDS)
            END AS KK_YDS,
            sum(SALESRELEASELINE_SUB_DETAIL.KK_FOC) AS KK_FOC,
            sum(SALESRELEASELINE_SUB_DETAIL.JML_ROLL) AS JML_ROLL,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - SRL.RELEASEUSERPRIMARYQUANTITY
                ELSE sum(SALESRELEASELINE_SUB_DETAIL.KK_KGS) - SALESRELEASELINE_SUB_DETAIL.ORDER_KG
            END AS balance_kgs,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SRL.RELEASEUSERSECONDARYQUANTITY
                ELSE sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SALESRELEASELINE_SUB_DETAIL.ORDER_YD
            END AS balance_yds,
            CASE
                WHEN SRL_JMLDATA.JML_RECORD = 1 THEN round((sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SRL.RELEASEUSERSECONDARYQUANTITY) / SRL.RELEASEUSERSECONDARYQUANTITY, 3) * 100
                ELSE round((sum(SALESRELEASELINE_SUB_DETAIL.KK_YDS) - SALESRELEASELINE_SUB_DETAIL.ORDER_YD) / SALESRELEASELINE_SUB_DETAIL.ORDER_YD, 3) * 100
            END AS balance_percent
        FROM
            SALESRELEASELINE SRL
        LEFT JOIN ITXVIEW_SUB_SALESRELEASELINE SALESRELEASELINE_SUB_DETAIL ON
            SRL.CODE = SALESRELEASELINE_SUB_DETAIL.NO_RELEASE
            AND SRL.PROJECTCODE = SALESRELEASELINE_SUB_DETAIL.NO_SALES
        LEFT JOIN SALESORDERLINE SOL ON
            SALESRELEASELINE_SUB_DETAIL.NO_SALES = SOL.SALESORDERCODE
            AND SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS = SOL.ORDERLINE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_JMLDATA SRL_JMLDATA ON
            SRL.CODE = SRL_JMLDATA.NO_RELEASE
        GROUP BY
            SRL_JMLDATA.JML_RECORD,
            SALESRELEASELINE_SUB_DETAIL.NO_RELEASE,
            SALESRELEASELINE_SUB_DETAIL.LINE_SALESRLS,
            SALESRELEASELINE_SUB_DETAIL.NO_SALES,
            SALESRELEASELINE_SUB_DETAIL.NO_PO,
            SALESRELEASELINE_SUB_DETAIL.NO_ITEM,
            SALESRELEASELINE_SUB_DETAIL.WARNA,
            SRL.RELEASEUSERPRIMARYQUANTITY,
            SRL.RELEASEUSERSECONDARYQUANTITY,
            SALESRELEASELINE_SUB_DETAIL.ORDER_KG,
            SALESRELEASELINE_SUB_DETAIL.ORDER_YD,
            SOL.USERPRIMARYQUANTITY,
            SOL.USERSECONDARYQUANTITY,
            SALESRELEASELINE_SUB_DETAIL.KK_LOTCODE
    );


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_EXIM source

CREATE VIEW ITXVIEW_SALESRELEASELINE_EXIM AS
SELECT
    SALESRELEASELINE_DETAIL.JML_ORDER,
    SALESRELEASELINE_DETAIL.NO_RELEASE,
    SALESRELEASELINE_DETAIL.LINE_SALESRLS,
    SALESRELEASELINE_DETAIL.NO_SALES,
    SALESRELEASELINE_DETAIL.NO_PO,
    SALESRELEASELINE_DETAIL.NO_ITEM,
    SALESRELEASELINE_DETAIL.WARNA,
    SALESRELEASELINE_DETAIL.ORDER_KG,
    SALESRELEASELINE_DETAIL.ORDER_YD,
    SALESRELEASELINE_DETAIL.KK_WH,
    SALESRELEASELINE_DETAIL.KK_LOTCODE,
    SALESRELEASELINE_DETAIL.KK_KGS,
    SALESRELEASELINE_DETAIL.KK_YDS,
    SALESRELEASELINE_DETAIL.KK_FOC,
    SALESRELEASELINE_DETAIL.JML_ROLL,
    CASE
        WHEN SALESRELEASELINE_DETAIL.JML_ORDER = 1 THEN SRL_ORDER_1.BALANCE_KGS
        ELSE SALESRELEASELINE_DETAIL.BALANCE_KGS
    END AS BALANCE_KGS,
    CASE
        WHEN SALESRELEASELINE_DETAIL.JML_ORDER = 1 THEN SRL_ORDER_1.BALANCE_YDS
        ELSE SALESRELEASELINE_DETAIL.BALANCE_YDS
    END AS BALANCE_YDS,
    CASE
        WHEN SALESRELEASELINE_DETAIL.JML_ORDER = 1 THEN SRL_ORDER_1.BALANCE_PERCENT
        ELSE SALESRELEASELINE_DETAIL.BALANCE_PERCENT
    END AS BALANCE_PERCENT,
    CASE
        WHEN SALESRELEASELINE_DETAIL.JML_ORDER = 1 THEN SRL_ORDER_1.KETERANGAN
        ELSE SALESRELEASELINE_DETAIL.KETERANGAN
    END AS KETERANGAN
FROM
    ITXVIEW_SALESRELEASELINE_DETAIL SALESRELEASELINE_DETAIL
LEFT JOIN ITXVIEW_SALESRELEASELINE_ORDER_1 SRL_ORDER_1 ON
    SALESRELEASELINE_DETAIL.NO_RELEASE = SRL_ORDER_1.NO_RELEASE
    AND SALESRELEASELINE_DETAIL.NO_SALES = SRL_ORDER_1.NO_SALES;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_FOC source

CREATE VIEW ITXVIEW_SALESRELEASELINE_FOC AS 
SELECT
    A.CODE AS allocation_code,
    A.LOTCODE AS lotcode,
    A.PROJECTCODE AS no_sales,
    A.WAREHOUSELOCATIONCODE AS kk_wh,
    SUM(A.USERSECONDARYQUANTITY) AS kk_yd_foc,
    --    A.ITEMELEMENTCODE AS item_element,
    E.QUALITYREASONCODE AS KET_FOC,
    SUM(E.WEIGHTNET) AS KK_FOC
FROM
    ITXVIEWALLOCATION0_SJEXIM A
LEFT JOIN ELEMENTSINSPECTION E ON
    a.ITEMELEMENTCODE = e.ELEMENTCODE
WHERE
    --    E.QUALITYREASONCODE IS NULL 
    --        AND
    E.QUALITYREASONCODE = 'FOC'
    --    		AND
    --        A.CODE in ('000000105324','000000104782','000000104783','000000104801','000000105320');
    --            a.code IN ('000000120967')--,'000000104783');
GROUP BY
    A.CODE,
    A.LOTCODE,
    A.PROJECTCODE,
    A.WAREHOUSELOCATIONCODE,
    --    A.ITEMELEMENTCODE AS item_element,
    E.QUALITYREASONCODE;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_JMLDATA source

CREATE VIEW ITXVIEW_SALESRELEASELINE_JMLDATA AS 
SELECT
    CODE AS NO_RELEASE,
    --        PROJECTCODE AS NO_ORDER,
    -- DLVSALESORDERLINEORDERLINE AS ORDER_LINE,
    count(*) AS JML_RECORD
FROM
    --ITXVIEW_SALESRELEASELINE_DETAIL_JMLDATA
    SALESRELEASELINE
    --            WHERE NO_RELEASE in ('000000000007765','000000000007192','000000000008522')
    --    WHERE code = '000000000007192'
GROUP BY
    CODE
    --  DLVSALESORDERLINEORDERLINE
    --        PROJECTCODE
    --    DLVSALESORDERLINEORDERLINE;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_ORDERS source

CREATE VIEW ITXVIEW_SALESRELEASELINE_ORDERS AS
SELECT
    NO_RELEASE,
    DLVSALESORDERLINEORDERLINE,
    NO_ORDER,
    --    SOL.ORDERLINE,
    ORDER_KG,
    ORDER_YD,
    KK_WH,
    KK_LOTCODE,
    KK_KG,
    YD_NONFOC,
    KK_YD,
    KK_FOC,
    KK_YD_FOC,
    JML_ROLL,
    KK_KG - ORDER_KG AS BALANCE_KGS,
    KK_YD - ORDER_YD AS BALANCE_YDS,
    ROUND((YD_NONFOC - ORDER_YD) / ORDER_YD) AS BALANCE_PERCENT,
    CASE
        WHEN KK_YD - ORDER_YD < 0 THEN 'KURANG'
        WHEN KK_YD - ORDER_YD = 0 THEN 'COMPLETE'
        WHEN KK_YD - ORDER_YD > 0 THEN 'OVER'
        ELSE
    	'KURANG'
    END AS KETERANGAN
FROM
    (
        SELECT
            SRL.CODE AS NO_RELEASE,
            SRL.DLVSALESORDERLINEORDERLINE AS DLVSALESORDERLINEORDERLINE,
            SRL.PROJECTCODE AS NO_ORDER,
            --    SOL.ORDERLINE,
    CASE
                WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND(SRL.RELEASEUSERPRIMARYQUANTITY)
                ELSE ROUND(SOL.USERPRIMARYQUANTITY)
            END AS ORDER_KG,
            CASE
                WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND((SRL.RELEASEUSERSECONDARYQUANTITY), 2)
                ELSE ROUND(SOL.USERSECONDARYQUANTITY)
            END AS ORDER_YD,
            SUB_LOTCODE.KK_WH AS KK_WH,
            SUB_LOTCODE.KK_LOTCODE AS KK_LOTCODE,
            --    A.CODE AS CODE1,
            --    SUB_LOTCODE.CODE AS CODE2,
    CASE
                WHEN SALESRELEASELINE_FOC.KK_FOC IS NOT NULL THEN A.USERPRIMARYQUANTITY - SALESRELEASELINE_FOC.KK_FOC
                ELSE
    	A.USERPRIMARYQUANTITY
            END AS KK_KG,
            A.USERSECONDARYQUANTITY AS YD_NONFOC,
            CASE
                WHEN SALESRELEASELINE_FOC.KK_YD_FOC IS NOT NULL THEN A.USERSECONDARYQUANTITY - SALESRELEASELINE_FOC.KK_YD_FOC
                ELSE
    	A.USERSECONDARYQUANTITY
            END AS KK_YD,
            SALESRELEASELINE_FOC.KK_FOC AS KK_FOC,
            SALESRELEASELINE_FOC.KK_YD_FOC AS KK_YD_FOC,
            SUB_LOTCODE.JML_ROLL AS JML_ROLL
        FROM
            SALESRELEASELINE SRL
        LEFT JOIN SALESORDERLINE SOL ON
            SRL.PROJECTCODE = SOL.PROJECTCODE
            AND
SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION A
                WHERE
                    A.DETAILTYPE = '1'
            )A ON
            SRL.CODE = A.ORDERCODE
            AND
SRL.PROJECTCODE = A.PROJECTCODE
            AND
SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
            AND
SRL.LINE = A.ORDERLINE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_SUB_LOTCODE SUB_LOTCODE ON
            A.CODE = SUB_LOTCODE.CODE
            AND
        SRL.PROJECTCODE = SUB_LOTCODE.PROJECTCODE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_FOC SALESRELEASELINE_FOC ON
            A.CODE = SALESRELEASELINE_FOC.ALLOCATION_CODE
        WHERE
            SUB_LOTCODE.ORIGINTRNTRANSACTIONNUMBER IS NULL
            --            AND SRL.CODE = '000000000008522'
            --            AND SRL.PROJECTCODE = 'EXP2201045'
            --        AND SRL.DLVSALESORDERLINEORDERLINE = '160'
            --    AND SRL.CODE = '000000000007765' -- '000000000009343'
    )
    --    AND SRL.CODE = '000000000007192' AND SRL.PROJECTCODE = 'EXP2200216' AND SRL.DLVSALESORDERLINEORDERLINE = '60';


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_ORDER_1 source

CREATE VIEW ITXVIEW_SALESRELEASELINE_ORDER_1 AS
SELECT
    JML_ORDER,
    NO_RELEASE,
    NO_SALES,
    ORDER_KG,
    ORDER_YD,
    BALANCE_KGS,
    BALANCE_YDS,
    CASE
        WHEN balance_percent IS NULL THEN order_yd
        ELSE balance_percent
    END AS balance_percent,
    CASE
        WHEN balance_yds < 0 THEN 'KURANG'
        WHEN balance_yds = 0 THEN 'COMPLETE'
        WHEN balance_yds > 0 THEN 'OVER'
        ELSE 'KURANG'
    END AS keterangan
FROM
    (
        SELECT
            JML_ORDER AS JML_ORDER,
            NO_RELEASE AS NO_RELEASE,
            NO_SALES AS NO_SALES,
            ORDER_KG AS ORDER_KG,
            ORDER_YD AS ORDER_YD,
            SUM(KK_KGS) - ORDER_KG AS balance_kgs,
            SUM(KK_YDS) - ORDER_YD AS balance_yds,
            round((sum(KK_YDS) - ORDER_YD) / ORDER_YD, 3) * 100 AS balance_percent
        FROM
            ITXVIEW_SALESRELEASELINE_DETAIL_ORDER
        WHERE
            JML_ORDER = '1'
        GROUP BY
            NO_RELEASE,
            NO_SALES,
            JML_ORDER,
            ORDER_KG,
            ORDER_YD
    )
WHERE
    BALANCE_YDS IS NOT NULL;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_QTY source

CREATE VIEW ITXVIEW_SALESRELEASELINE_QTY AS 
SELECT
    SRL_JMLDATA.JML_RECORD AS JML_DATA,
    SOL.PROJECTCODE AS NO_ORDER,
    SRL.LINE,
    A.LOTCODE,
    LISTAGG(
        DISTINCT(
            TRIM(A.WAREHOUSELOCATIONCODE)
        ),
        ', '
    ) AS KK_WH,
    SOL.ORDERLINE,
    SRL.PROGRESSSTATUS,
    --    A.CODE AS CODE_ALLOCATION,
    SRL.RELEASEDATE,
    SOL.PRICEUNITOFMEASURECODE,
    SRL.CODE AS NO_RELEASE,
    CASE
        WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND(SRL.RELEASEUSERPRIMARYQUANTITY)
        --	    WHEN SRL_JMLDATA.JML_RECORD = 1 THEN ROUND(SRL.RELEASEUSERPRIMARYQUANTITY)
        ELSE ROUND(SOL.USERPRIMARYQUANTITY)
    END AS ORDER_KG,
    CASE
        WHEN SRL.PROGRESSSTATUS = 1 THEN ROUND((SRL.RELEASEUSERSECONDARYQUANTITY), 2)
        --	     WHEN SRL_JMLDATA.JML_RECORD = 1 THEN ROUND((SRL.RELEASEUSERSECONDARYQUANTITY), 2)
        ELSE ROUND(SOL.USERSECONDARYQUANTITY)
    END AS ORDER_YD
FROM
    SALESORDER SO
LEFT JOIN SALESORDERLINE SOL ON
    SO.CODE = SOL.SALESORDERCODE
LEFT JOIN SALESRELEASELINE SRL ON
    SOL.PROJECTCODE = SRL.PROJECTCODE
    AND
    sol.ORDERLINE = srl.DLVSALESORDERLINEORDERLINE
LEFT JOIN SALESDOCUMENTLINE SDL ON
    SRL.CODE = SDL.PREVIOUSCODE
    AND
	SRL.PROJECTCODE = SDL.PROJECTCODE
    AND
	SRL.DLVSALESORDERLINEORDERLINE = SDL.DLVSALESORDERLINEORDERLINE
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION A
        WHERE
            A.DETAILTYPE = '0'
    )A ON
    --    SRL.CODE = A.ORDERCODE
    --    AND
    --    SRL.PROJECTCODE = A.PROJECTCODE
    --    AND
    --SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
    SDL.PROJECTCODE = A.PROJECTCODE
    AND
	SDL.DLVSALORDERLINESALESORDERCODE = A.PROJECTCODE
LEFT JOIN ITXVIEW_SALESRELEASELINE_JMLDATA SRL_JMLDATA ON
    SRL.CODE = SRL_JMLDATA.NO_RELEASE
    --WHERE SO.CODE IN ('RPE2200515')
    --  WHERE SO.CODE IN ('RPE2200484','RPE2200515','RPE2200519','RPE2200576') AND SRL.CODE = '000000000007765'
    --    WHERE SO.CODE IN ('EXP2200216') AND 
WHERE 
    A.WAREHOUSELOCATIONCODE IS NOT NULL
    --    AND
    --    SRL.CODE = '000000000007192'
    --        WHERE SRL.CODE = '000000000005916'
    --    		 SRL.CODE = '000000000007765'
    --             SRL.CODE = '000000000005636' --AND A.LOTCODE = '00000439'--FOC;
    --WHERE 
    --SRL.CODE = :CODE
    --SRL.PROJECTCODE = 'EXP2200216' AND 
    --A.LOTCODE = '00004105' AND 
    --SRL.CODE = '000000000007192' AND A.CODE = '000000104777'
    --WHERE SRL.PROJECTCODE = 'RPE2200535' AND A.LOTCODE = '00029415 ' AND SRL.CODE = '000000000007765' AND A.CODE = '000000117567'
GROUP BY
    SRL_JMLDATA.JML_RECORD,
    SOL.PROJECTCODE,
    SRL.LINE,
    SOL.ORDERLINE,
    SRL.PROGRESSSTATUS,
    A.LOTCODE,
    --    A.CODE,
    SRL.RELEASEDATE,
    SOL.PRICEUNITOFMEASURECODE,
    SOL.USERPRIMARYQUANTITY,
    SOL.USERSECONDARYQUANTITY,
    SRL.CODE,
    SRL.RELEASEUSERPRIMARYQUANTITY,
    SRL.RELEASEUSERSECONDARYQUANTITY;


-- DB2ADMIN.ITXVIEW_SALESRELEASELINE_SUB_LOTCODE source

CREATE VIEW ITXVIEW_SALESRELEASELINE_SUB_LOTCODE AS
SELECT
    code,
    lotcode AS KK_LOTCODE,
    LISTAGG(
        DISTINCT(
            TRIM(ITXVIEWALLOCATION0_SJEXIM.WAREHOUSELOCATIONCODE)
        ),
        ', '
    ) AS KK_WH,
    ORIGINTRNTRANSACTIONNUMBER,
    PROJECTCODE,
    sum(COMPONENTLINENUMBER) AS jml_roll
FROM
    ITXVIEWALLOCATION0_SJEXIM
    --    WHERE ORIGINTRNTRANSACTIONNUMBER IS NULL
    --    WHERE CODE IN ('000000147029','000000136129 ','000000136130 ')  
    --    WHERE code = '000000117564'
    --    WHERE CODE IN ('000000104803','000000104809')
GROUP BY
    code,
    lotcode,
    PROJECTCODE,
    ORIGINTRNTRANSACTIONNUMBER;


-- DB2ADMIN.ITXVIEW_SALESRELESLINE_ALLOCATION source

CREATE VIEW ITXVIEW_SALESRELESLINE_ALLOCATION AS
SELECT
    code,
    PROJECTCODE,
    LOTCODE,
    decosubcode01,
    decosubcode02,
    decosubcode03,
    decosubcode04,
    decosubcode05,
    decosubcode06,
    decosubcode07,
    sum(USERPRIMARYQUANTITY) AS kgs,
    sum(USERSECONDARYQUANTITY) AS yds
FROM
    allocation
WHERE
    	DETAILTYPE = '0'
    --    	AND
    --    code = '000000104777'
GROUP BY
    code,
    PROJECTCODE,
    LOTCODE,
    decosubcode01,
    decosubcode02,
    decosubcode03,
    decosubcode04,
    decosubcode05,
    decosubcode06,
    decosubcode07;


-- DB2ADMIN.ITXVIEW_SALES_NETTOSUBCODE source

CREATE VIEW ITXVIEW_SALES_NETTOSUBCODE AS
SELECT
    s.CODE,
    s2.ITEMTYPEAFICODE,
    s.ABSUNIQUEID,
    CASE
        WHEN s2.SUBCODE01 = 'C'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CM,
    CASE
        WHEN s2.SUBCODE01 = 'C'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CM_FK,
    CASE
        WHEN s2.SUBCODE01 = 'CX'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CMDX,
    CASE
        WHEN s2.SUBCODE01 = 'CX'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CMDX_FK,
    CASE
        WHEN s2.SUBCODE01 = 'CVCX'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CMPEDX,
    CASE
        WHEN s2.SUBCODE01 = 'CVCX'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CMPEDX_FK,
    CASE
        WHEN s2.SUBCODE01 = 'CVC'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CVC,
    CASE
        WHEN s2.SUBCODE01 = 'CVC'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_CVC_FK,
    CASE
        WHEN s2.SUBCODE01 = 'T'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_PEDX,
    CASE
        WHEN s2.SUBCODE01 = 'T'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_PEDX_FK,
    CASE
        WHEN s2.SUBCODE01 = 'TCX'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_PES,
    CASE
        WHEN s2.SUBCODE01 = 'TCX'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_PES_FK,
    CASE
        WHEN s2.SUBCODE01 = 'TC'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_TC,
    CASE
        WHEN s2.SUBCODE01 = 'TC'
        AND s2.ITEMTYPEAFICODE = 'FKF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_TC_FK,
    CASE
        WHEN s2.SUBCODE01 = 'TX'
        AND s2.ITEMTYPEAFICODE = 'KFF'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_TCDX,
    CASE
        WHEN s2.SUBCODE01 = 'TX'
        AND s2.ITEMTYPEAFICODE = 'FK'
	THEN SUM(s2.USERPRIMARYQUANTITY)
        ELSE 0
    END AS QTY_TCDX_FK
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s2.SALESORDERCODE = s.CODE
WHERE
    --    SALESORDERCODE IN('EXP2300283','EXP2201313','EXP2300248')
    s2.LINETEMPLATECODE NOT IN (
        'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
    )
GROUP BY
    s.CODE,
    s.ABSUNIQUEID,
    s2.SUBCODE01,
    s2.ITEMTYPEAFICODE,
    s2.USERPRIMARYQUANTITY;


-- DB2ADMIN.ITXVIEW_SA_NO_CONTAINER source

CREATE VIEW ITXVIEW_SA_NO_CONTAINER AS
SELECT
    a.UNIQUEID,
    a.VALUESTRING
        || COALESCE(', ' || a2.VALUESTRING, '')
        || COALESCE(', ' || a3.VALUESTRING, '')
        || COALESCE(', ' || a4.VALUESTRING, '')
        || COALESCE(', ' || a5.VALUESTRING, '') AS No_container
FROM
    ADSTORAGE a
LEFT JOIN ADSTORAGE a2 ON
    a.UNIQUEID = a2.UNIQUEID
    AND a2.FIELDNAME = 'Container2'
LEFT JOIN ADSTORAGE a3 ON
    a.UNIQUEID = a3.UNIQUEID
    AND a3.FIELDNAME = 'Container3'
LEFT JOIN ADSTORAGE a4 ON
    a.UNIQUEID = a4.UNIQUEID
    AND a4.FIELDNAME = 'Container4'
LEFT JOIN ADSTORAGE a5 ON
    a.UNIQUEID = a5.UNIQUEID
    AND a5.FIELDNAME = 'Container5'
WHERE
    a.FIELDNAME = 'Container1';


-- DB2ADMIN.ITXVIEW_SETTINGMESINRAJUT_KNT source

CREATE VIEW ITXVIEW_SETTINGMESINRAJUT_KNT AS
SELECT
    DISTINCT 
    PRODUCTIONDEMAND.COMPANYCODE,
    PRODUCTIONDEMAND.COUNTERCODE,
    PRODUCTIONDEMAND.CODE,
    PRODUCTIONDEMAND.ORDERDATE,
    PRODUCTIONDEMAND.SUBCODE01,
    PRODUCTIONDEMAND.SUBCODE02,
    PRODUCTIONDEMAND.SUBCODE03,
    PRODUCTIONDEMAND.SUBCODE04,
    PRODUCTIONDEMAND.SUBCODE05,
    PRODUCTIONDEMAND.SUBCODE06,
    PRODUCTIONDEMAND.SUBCODE07,
    PRODUCTIONDEMAND.SUBCODE08,
    PRODUCTIONDEMAND.SUBCODE09,
    PRODUCTIONDEMAND.SUBCODE10,
    PRODUCTIONDEMAND.BASEPRIMARYUOMCODE,
    PRODUCTIONDEMAND.BASEPRIMARYQUANTITY,
    PRODUCTIONDEMAND.FINALPLANNEDDATE,
    PRODUCTIONDEMAND.RESERVATIONORDERCODE,
    -- SCHEDULESOFSTEPSPLITS.SCHEDULEDRESOURCECODE,
    FULLITEMKEYDECODER.SUMMARIZEDDESCRIPTION,
    BUSINESSPARTNER.LEGALNAME1
FROM
    PRODUCTIONDEMAND PRODUCTIONDEMAND
    --LEFT OUTER JOIN SCHEDULESOFSTEPSPLITS SCHEDULESOFSTEPSPLITS ON
    --  PRODUCTIONDEMAND.CODE = SCHEDULESOFSTEPSPLITS.CODE
LEFT OUTER JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    PRODUCTIONDEMAND.FULLITEMIDENTIFIER = FULLITEMKEYDECODER.IDENTIFIER
LEFT OUTER JOIN ORDERPARTNER ORDERPARTNER ON
    PRODUCTIONDEMAND.CUSTOMERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT OUTER JOIN ROUTING ROUTING ON
    PRODUCTIONDEMAND.ROUTINGNUMBERID = ROUTING.NUMBERID
    --WHERE 
    --	PRODUCTIONDEMAND.CODE = '00191219';


-- DB2ADMIN.ITXVIEW_SHIPMENT_ADVICE_EXIM source

CREATE VIEW ITXVIEW_SHIPMENT_ADVICE_EXIM AS
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    PRICEUNITOFMEASURECODE,
    sum(total_kg) AS total_NW_CI,
    CASE
        WHEN PRICEUNITOFMEASURECODE = 'yd' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN PRICEUNITOFMEASURECODE = 'kg' THEN round(SUM(jml_harga_kg), 2)
        WHEN PRICEUNITOFMEASURECODE = 'm' THEN ROUND(SUM(jml_harga_YD), 2)
        WHEN PRICEUNITOFMEASURECODE IN(
            'un', 'Lot'
        ) THEN ROUND(SUM(jml_harga_YD), 2)
    END AS total_harga_CI,
    sum(jml_roll) AS jml_roll
FROM
    (
        SELECT
            INVOICE,
            SALESDOCUMENTPROVISIONALCODE,
            PRICEUNITOFMEASURECODE,
            DECOSUBCODE04,
            sum(USERPRIMARYQUANTITY) AS total_kg,
            sum(USERSECONDARYQUANTITY) AS total_yard,
            sum(BASESECONDARYQUANTITY) AS total_meter,
            sum(qty_pcs) AS total_unit,
            PRICE,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'yd'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERSECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_YD,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'kg'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(USERPRIMARYQUANTITY)* price))
                ELSE 0
            END jml_harga_kg,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                WHEN PRICEUNITOFMEASURECODE = 'm'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(BASESECONDARYQUANTITY)* price))
                ELSE 0
            END jml_harga_m,
            CASE
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN ROUND((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'USD'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN round((SUM(qty_pcs)* price), 2)
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE IN (
                    'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'un'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                WHEN PRICEUNITOFMEASURECODE = 'Lot'
                AND CURR = 'IDR'
                AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                ) THEN FLOOR((SUM(qty_pcs)* price))
                ELSE 0
            END jml_harga_un,
            sum(jml_roll) AS jml_roll
        FROM
            (
                SELECT
                    DISTINCT INVOICE,
                    SALESDOCUMENTPROVISIONALCODE,
                    CURR,
                    LOTCODE,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERPRIMARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(round(USERPRIMARYQUANTITY, 2))
                        ELSE SUM(round(USERPRIMARYQUANTITY, 2))
                    END USERPRIMARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(USERSECONDARYQUANTITY)
                        ELSE SUM(USERSECONDARYQUANTITY)
                    END AS USERSECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(BASESECONDARYQUANTITY)
                        ELSE SUM(BASESECONDARYQUANTITY)
                    END AS BASESECONDARYQUANTITY,
                    CASE
                        WHEN SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV'
                        ) THEN SUM(qty_pcs)
                        WHEN SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN SUM(qty_pcs)
                        ELSE SUM(qty_pcs)
                    END AS qty_pcs,
                    PRICE,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'yd'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERSECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_YD,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'kg'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(USERPRIMARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_kg,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'm'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(BASESECONDARYQUANTITY)* price), 2)
                        ELSE 0
                    END jml_harga_m,
                    CASE
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE IN (
                            'EXDPROV', 'EXPPROV', 'DREPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN ROUND((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'un'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        WHEN PRICEUNITOFMEASURECODE = 'Lot'
                        AND SALDOCPROVISIONALCOUNTERCODE NOT IN (
                            'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                        ) THEN round((SUM(qty_pcs)* price), 2)
                        ELSE 0
                    END jml_harga_un,
                    sum(jml_roll) AS jml_roll,
                    ORDERCODE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    ITEMTYPECODE,
                    ALLOCATIONDATE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE,
                    JENIS_KAIN,
                    NO_ITEM,
                    EXTERNALREFERENCE,
                    WARNA
                FROM
                    (
                        SELECT
                            DISTINCT 
            CURR.INVOICE,
                            s.SALESDOCUMENTPROVISIONALCODE,
                            ALLOCATION.CODE AS CODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURR,
                            s.ORDERLINE AS orderline,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERSECONDARYQUANTITY
                            END USERSECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERPRIMARYQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE iasp.USERPRIMARYQUANTITY
                            END USERPRIMARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN iasp.USERSECONDARYUSEDQUANTITY
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(iasp.USERSECONDARYUSEDQUANTITY , 2)
                                WHEN iasp.ITEMTYPECODE = 'CAP'
                                AND iasp.BASEPRIMARYUOMCODE IN(
                                    'Lot', 'un'
                                ) THEN iasp.BASEPRIMARYQUANTITY
                                ELSE iasp.BASESECONDARYQUANTITY
                            END qty_pcs,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                                ) THEN ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                                WHEN e.QUALITYREASONCODE = 'FOC'
                                AND s.SALDOCPROVISIONALCOUNTERCODE IN(
                                    'EXDPROV', 'EXPPROV', 'PFEPROV', 'GSEPROV'
                                ) THEN 0
                                ELSE ROUND(iasp.BASESECONDARYQUANTITY * 0.9144, 2)
                            END BASESECONDARYQUANTITY,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERPRIMARYQUANTITY
                                ELSE 0
                            END AS FOC_KG,
                            CASE
                                WHEN e.QUALITYREASONCODE = 'FOC' THEN iasp.USERSECONDARYQUANTITY
                                ELSE 0
                            END AS FOC_YARD,
                            COUNT(iasp.itemelementcode) AS jml_roll,
                            s.PRICE,
                            s.PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE AS ORDERCODE,
                            ALLOCATION.ITEMTYPECODE,
                            ALLOCATION.ALLOCATIONDATE AS ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01 AS DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02 AS DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03 AS DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04 AS DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05 AS DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06 AS DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07 AS DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08 AS DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE AS CUSTOMERCODE,
                            PRODUCT.LONGDESCRIPTION AS JENIS_KAIN,
                            a.EXTERNALITEMCODE AS NO_ITEM,
                            a.EXTERNALREFERENCE AS EXTERNALREFERENCE,
                            i.WARNA
                        FROM
                            ALLOCATION ALLOCATION
                        LEFT JOIN PRODUCT PRODUCT ON
                            ALLOCATION.ITEMTYPECODE = PRODUCT.ITEMTYPECODE
                            AND ALLOCATION.DECOSUBCODE01 = PRODUCT.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = PRODUCT.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = PRODUCT.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = PRODUCT.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = PRODUCT.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = PRODUCT.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = PRODUCT.SUBCODE07
                            AND ALLOCATION.DECOSUBCODE08 = PRODUCT.SUBCODE08
                        LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
                            ALLOCATION.CUSTOMERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
                            AND ALLOCATION.ITEMTYPECODE = a.ITEMTYPEAFICODE
                            AND ALLOCATION.DECOSUBCODE01 = a.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = a.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = a.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = a.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = a.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = a.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = a.SUBCODE07
                        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC iasp ON
                            iasp.CODE = ALLOCATION.CODE
                            AND iasp.DECOSUBCODE01 = ALLOCATION.DECOSUBCODE01
                            AND iasp.DECOSUBCODE02 = ALLOCATION.DECOSUBCODE02
                            AND iasp.DECOSUBCODE03 = ALLOCATION.DECOSUBCODE03
                            AND iasp.DECOSUBCODE04 = ALLOCATION.DECOSUBCODE04
                            AND iasp.DECOSUBCODE05 = ALLOCATION.DECOSUBCODE05
                            AND iasp.DECOSUBCODE06 = ALLOCATION.DECOSUBCODE06
                            AND iasp.DECOSUBCODE07 = ALLOCATION.DECOSUBCODE07
                        LEFT JOIN ELEMENTS e ON
                            iasp.itemelementcode = e.CODE
                        LEFT JOIN SALESDOCUMENTLINE s ON
                            ALLOCATION.DECOSUBCODE01 = s.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = s.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = s.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = s.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = s.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = s.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = s.SUBCODE07
                            AND ALLOCATION.ORDERCODE = s.SALESDOCUMENTPROVISIONALCODE
                            AND ALLOCATION.ORDERLINE = s.ORDERLINE
                        LEFT JOIN ITXVIEWCOLOR i ON
                            ALLOCATION.ITEMTYPECODE = i.ITEMTYPECODE
                            AND ALLOCATION.DECOSUBCODE01 = i.SUBCODE01
                            AND ALLOCATION.DECOSUBCODE02 = i.SUBCODE02
                            AND ALLOCATION.DECOSUBCODE03 = i.SUBCODE03
                            AND ALLOCATION.DECOSUBCODE04 = i.SUBCODE04
                            AND ALLOCATION.DECOSUBCODE05 = i.SUBCODE05
                            AND ALLOCATION.DECOSUBCODE06 = i.SUBCODE06
                            AND ALLOCATION.DECOSUBCODE07 = i.SUBCODE07
                            AND ALLOCATION.DECOSUBCODE08 = i.SUBCODE08
                            AND ALLOCATION.DECOSUBCODE09 = i.SUBCODE09
                            AND ALLOCATION.DECOSUBCODE10 = i.SUBCODE10
                        LEFT JOIN ITXVIEW_INVOICE_CURR_GRANDTOTAL CURR ON
                            CURR.NO_SJ = s.SALESDOCUMENTPROVISIONALCODE
                        WHERE
                            ALLOCATION.DETAILTYPE = '1'
                            AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                            AND ALLOCATION.DESTINATIONTYPE = '7'
                        GROUP BY
                            CURR.INVOICE,
                            s.SALESDOCUMENTPROVISIONALCODE,
                            ALLOCATION.CODE ,
                            ALLOCATION.ITEMTYPECODE,
                            iasp.ITEMTYPECODE,
                            iasp.itemelementcode,
                            iasp.LOTCODE,
                            CURR.CURR,
                            s.ORDERLINE,
                            e.QUALITYREASONCODE,
                            iasp.USERPRIMARYQUANTITY,
                            iasp.USERSECONDARYQUANTITY,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            iasp.BASESECONDARYQUANTITY,
                            iasp.BASEPRIMARYUOMCODE,
                            iasp.USERSECONDARYUSEDQUANTITY,
                            iasp.BASEPRIMARYQUANTITY,
                            s.PRICE,
                            s.PRICEUNITOFMEASURECODE,
                            e.QUALITYREASONCODE,
                            s.PREVIOUSCODE,
                            s.SALDOCPROVISIONALCOUNTERCODE,
                            ALLOCATION.ORDERCODE,
                            ALLOCATION.ALLOCATIONDATE,
                            ALLOCATION.DECOSUBCODE01,
                            ALLOCATION.DECOSUBCODE02,
                            ALLOCATION.DECOSUBCODE03,
                            ALLOCATION.DECOSUBCODE04,
                            ALLOCATION.DECOSUBCODE05,
                            ALLOCATION.DECOSUBCODE06,
                            ALLOCATION.DECOSUBCODE07,
                            ALLOCATION.DECOSUBCODE08,
                            ALLOCATION.CUSTOMERCODE,
                            PRODUCT.LONGDESCRIPTION,
                            a.EXTERNALITEMCODE,
                            a.EXTERNALREFERENCE,
                            i.WARNA
                    )
                WHERE
                    USERPRIMARYQUANTITY <> 0
                GROUP BY
                    SALESDOCUMENTPROVISIONALCODE,
                    INVOICE,
                    CURR,
                    LOTCODE,
                    ORDERCODE,
                    PRICE,
                    PRICEUNITOFMEASURECODE,
                    PREVIOUSCODE,
                    ALLOCATIONDATE,
                    ITEMTYPECODE,
                    SALDOCPROVISIONALCOUNTERCODE,
                    DECOSUBCODE01,
                    DECOSUBCODE02,
                    DECOSUBCODE03,
                    DECOSUBCODE04,
                    DECOSUBCODE05,
                    DECOSUBCODE06,
                    DECOSUBCODE07,
                    DECOSUBCODE08,
                    CUSTOMERCODE,
                    JENIS_KAIN,
                    NO_ITEM,
                    EXTERNALREFERENCE,
                    WARNA,
                    FOC_YARD,
                    FOC_KG,
                    jml_roll
            )
        GROUP BY
            SALESDOCUMENTPROVISIONALCODE,
            LOTCODE,
            INVOICE,
            jml_roll,
            CURR,
            DECOSUBCODE04,
            PRICEUNITOFMEASURECODE,
            SALDOCPROVISIONALCOUNTERCODE,
            PRICE
    )
    --WHERE SALESDOCUMENTPROVISIONALCODE = 'ESP2300717'
GROUP BY
    PRICEUNITOFMEASURECODE,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_SHIPMENT_ADVICE_HEADER source

CREATE VIEW ITXVIEW_SHIPMENT_ADVICE_HEADER AS 
SELECT
    s.PROVISIONALCODE,
    CASE
        WHEN s.TERMSOFSHIPPINGCODE = 'SE' THEN 'SEA'
        WHEN s.TERMSOFSHIPPINGCODE = 'AI' THEN 'AIR'
        ELSE 'ROAD'
    END AS TERMSOFSHIPPINGCODE,
    s.TERMSOFDELIVERYCODE,
    listagg(
        DISTINCT s2.EXTERNALREFERENCE,
        ',  '
    ) 
WITHIN GROUP (
    ORDER BY
        s2.EXTERNALREFERENCE
    ) AS descOfGood,
    CASE
        WHEN s.PAYMENTMETHODCODE LIKE '%TT%' THEN 'T/T' || ' BY ' || s.TERMSOFDELIVERYCODE
        WHEN s.PAYMENTMETHODCODE LIKE '%LC%' THEN 'LC' || ' BY ' || s.TERMSOFDELIVERYCODE
        WHEN s.PAYMENTMETHODCODE = 'FOC' THEN 'NOMOR COMERCIAL VALUE?'
    END paymentTerms,
    s.APPEARANCEDESCRIPTION AS jenis_kontainer,
    CAST(
        SUBSTR(s.APPEARANCEDESCRIPTION, LOCATE('*', s.APPEARANCEDESCRIPTION)+ 1, 3) AS CHARACTER(10)
    ) AS tinggi_container,
    CASE
        WHEN s.TERMSOFDELIVERYCODE IN (
            'FOB', 'EXW'
        ) THEN 'COLLECT'
        ELSE 'PREPAID'
    END AS Freight,
    a2.VALUEDATE AS ETA,
    a3.VALUESTRING AS kite,
    a4.VALUESTRING AS note,
    a5.VALUESTRING AS StatusMeasurement,
    a6.VALUESTRING AS shipping_ref,
    a7.VALUESTRING AS vesselname,
    a8.VALUEDATE AS TransportDate,
    a9.VALUESTRING
        || COALESCE(', ' || a18.VALUESTRING, '')
        || COALESCE(', ' || a19.VALUESTRING, '')
        || COALESCE(', ' || a20.VALUESTRING, '')
        || COALESCE(', ' || a21.VALUESTRING, '') AS NOMOR_Container,
    --    a9.VALUESTRING AS NOMOR_Container,
    a10.VALUESTRING AS CBM,
    a11.VALUESTRING AS Port,
    a12.VALUEDATE AS TglSI,
    a13.VALUESTRING AS connecting_VESSEL,
    a15.VALUESTRING AS ETD_con,
    a16.VALUESTRING AS BLAWB,
    CASE
        WHEN a17.VALUESTRING IS NULL THEN '-'
        ELSE a17.VALUESTRING
    END AS LCNumber,
    CASE
        WHEN a14.VALUESTRING = 0 THEN 'SEA'
        WHEN a14.VALUESTRING = 1 THEN 'AIR'
        WHEN a14.VALUESTRING = 2 THEN 'FCL'
    END REMARKSsI,
    UPPER(ADDRESS.ADDRESSEE) AS NM_CONSIGNEE,
    UPPER(ADDRESS.ADDRESSLINE1) AS ADDRESSLINE1,
    UPPER(ADDRESS.ADDRESSLINE2)AS ADDRESSLINE2,
    UPPER(ADDRESS.ADDRESSLINE3)AS ADDRESSLINE3,
    UPPER(ADDRESS.ADDRESSLINE4) AS ADDRESSLINE4,
    UPPER(ADDRESS.TOWN) AS TOWN,
    UPPER(ADDRESS.DISTRICT) AS DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION AS COUNTRY_NM
FROM
    SALESDOCUMENT s
LEFT JOIN SALESDOCUMENTLINE s2 ON
    s2.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
LEFT JOIN TRUCKDRIVER t ON
    t.CODE = s.TRUCKDRIVERCODE
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = s.ABSUNIQUEID
    AND a2.FIELDNAME = 'ETA'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = s.ABSUNIQUEID
    AND a3.FIELDNAME = 'KITE'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = s.ABSUNIQUEID
    AND a4.FIELDNAME = 'Note'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = s.ABSUNIQUEID
    AND a5.FIELDNAME = 'StatusMeasurement'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = s.ABSUNIQUEID
    AND a6.FIELDNAME = 'shipping'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = s.ABSUNIQUEID
    AND a7.FIELDNAME = 'vesselname'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = s.ABSUNIQUEID
    AND a8.FIELDNAME = 'TransportDate '
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = s.ABSUNIQUEID
    AND a9.FIELDNAME = 'Container1'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = s.ABSUNIQUEID
    AND a10.FIELDNAME = 'CBM'
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = s.ABSUNIQUEID
    AND a11.FIELDNAME = 'Port'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = s.ABSUNIQUEID
    AND a12.FIELDNAME = 'TglSI'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = s.ABSUNIQUEID
    AND a13.FIELDNAME = 'connecting'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = s.ABSUNIQUEID
    AND a14.FIELDNAME = 'RemarksSI'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = s.ABSUNIQUEID
    AND a15.FIELDNAME = 'ETDcon'
LEFT JOIN ADSTORAGE a16 ON
    a16.UNIQUEID = s.ABSUNIQUEID
    AND a16.FIELDNAME = 'BLAWB'
LEFT JOIN ADSTORAGE a17 ON
    a17.UNIQUEID = s.ABSUNIQUEID
    AND a17.FIELDNAME = 'LCNumber'
LEFT JOIN ADDRESS ADDRESS ON
    s.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
    AND s.DELIVERYPOINTCODE = ADDRESS.CODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    s.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN COUNTRY COUNTRY ON
    ADDRESS.COUNTRYCODE = COUNTRY.CODE
LEFT JOIN ADSTORAGE a18 ON
    a18.UNIQUEID = s.ABSUNIQUEID
    AND a18.FIELDNAME = 'Container2'
LEFT JOIN ADSTORAGE a19 ON
    a19.UNIQUEID = s.ABSUNIQUEID
    AND a19.FIELDNAME = 'Container3'
LEFT JOIN ADSTORAGE a20 ON
    a20.UNIQUEID = s.ABSUNIQUEID
    AND a20.FIELDNAME = 'Container4'
LEFT JOIN ADSTORAGE a21 ON
    a21.UNIQUEID = s.ABSUNIQUEID
    AND a21.FIELDNAME = 'Container5'
    --        WHERE s.PROVISIONALCODE  = 'ESP2300811'
GROUP BY
    s.PROVISIONALCODE,
    s.TERMSOFDELIVERYCODE,
    s.TERMSOFSHIPPINGCODE,
    t.CODE,
    t.LONGDESCRIPTION,
    t.SHORTDESCRIPTION,
    s.CREATIONUSER,
    s.PAYMENTMETHODCODE,
    s.APPEARANCEDESCRIPTION,
    a2.VALUEDATE,
    a3.VALUESTRING,
    a4.VALUESTRING,
    a5.VALUESTRING,
    a6.VALUESTRING,
    a7.VALUESTRING,
    a8.VALUEDATE,
    a9.VALUESTRING,
    a10.VALUESTRING,
    a11.VALUESTRING,
    a12.VALUEDATE,
    a13.VALUESTRING,
    a14.VALUESTRING,
    a15.VALUESTRING,
    a16.VALUESTRING,
    a17.VALUESTRING,
    a18.VALUESTRING,
    a19.VALUESTRING,
    a20.VALUESTRING,
    a21.VALUESTRING,
    ADDRESS.ADDRESSEE,
    ADDRESS.ADDRESSLINE1,
    ADDRESS.ADDRESSLINE2,
    ADDRESS.ADDRESSLINE3,
    ADDRESS.ADDRESSLINE4,
    ADDRESS.TOWN,
    ADDRESS.DISTRICT,
    ADDRESS.ADDRESSPHONENUMBER,
    COUNTRY.LONGDESCRIPTION;


-- DB2ADMIN.ITXVIEW_SHIPPING_INTR_EXIM source

CREATE VIEW ITXVIEW_SHIPPING_INTR_EXIM AS 
SELECT
    s.PROVISIONALCODE,
    CASE
        WHEN s.TERMSOFSHIPPINGCODE = 'SE' THEN 'SEA'
        WHEN s.TERMSOFSHIPPINGCODE = 'AI' THEN 'AIR'
        ELSE 'ROAD'
    END AS TERMSOFSHIPPINGCODE,
    s.TERMSOFDELIVERYCODE,
    t.LONGDESCRIPTION AS nama_truck,
    t.SHORTDESCRIPTION AS nama_driver,
    UPPER(s.CREATIONUSER) AS CREATIONUSER,
    listagg(
        DISTINCT s2.EXTERNALREFERENCE,
        ',  '
    ) 
WITHIN GROUP (
    ORDER BY
        s2.EXTERNALREFERENCE
    ) AS descOfGood,
    CASE
        WHEN s.PAYMENTMETHODCODE LIKE '%TT%' THEN 'T/T' || ' BY ' || s.TERMSOFDELIVERYCODE
        WHEN s.PAYMENTMETHODCODE LIKE '%LC%' THEN 'LC' || ' BY ' || s.TERMSOFDELIVERYCODE
        WHEN s.PAYMENTMETHODCODE = 'FOC' THEN 'NOMOR COMERCIAL VALUE?'
    END paymentTerms,
    s.APPEARANCEDESCRIPTION AS jenis_kontainer,
    CAST(
        SUBSTR(s.APPEARANCEDESCRIPTION, LOCATE('*', s.APPEARANCEDESCRIPTION)+ 1, 3) AS CHARACTER(10)
    ) AS tinggi_container,
    CASE
        WHEN s.TERMSOFDELIVERYCODE IN (
            'FOB', 'EXW'
        ) THEN 'COLLECT'
        ELSE 'PREPAID'
    END AS Freight,
    a2.VALUEDATE AS ETA,
    a3.VALUESTRING AS kite,
    a4.VALUESTRING AS note,
    a5.VALUESTRING AS StatusMeasurement,
    a6.VALUESTRING AS shipping_ref,
    a7.VALUESTRING AS vesselname,
    a8.VALUEDATE AS TransportDate,
    a9.VALUESTRING
        || COALESCE(', ' || a18.VALUESTRING, '')
        || COALESCE(', ' || a19.VALUESTRING, '')
        || COALESCE(', ' || a20.VALUESTRING, '')
        || COALESCE(', ' || a21.VALUESTRING, '') AS NOMOR_Container,
    a10.VALUESTRING AS CBM,
    a11.VALUESTRING AS Port,
    a12.VALUEDATE AS TglSI,
    a13.VALUESTRING AS connecting_VESSEL,
    a15.VALUESTRING AS ETD_con,
    CASE
        WHEN a14.VALUESTRING = 0 THEN 'SEA'
        WHEN a14.VALUESTRING = 1 THEN 'AIR'
        WHEN a14.VALUESTRING = 2 THEN 'FCL'
    END REMARKSsI
FROM
    SALESDOCUMENT s
LEFT JOIN SALESDOCUMENTLINE s2 ON
    s2.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
LEFT JOIN TRUCKDRIVER t ON
    t.CODE = s.TRUCKDRIVERCODE
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = s.ABSUNIQUEID
    AND a2.FIELDNAME = 'ETA'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = s.ABSUNIQUEID
    AND a3.FIELDNAME = 'KITE'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = s.ABSUNIQUEID
    AND a4.FIELDNAME = 'Note'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = s.ABSUNIQUEID
    AND a5.FIELDNAME = 'StatusMeasurement'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = s.ABSUNIQUEID
    AND a6.FIELDNAME = 'shipping'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = s.ABSUNIQUEID
    AND a7.FIELDNAME = 'vesselname'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = s.ABSUNIQUEID
    AND a8.FIELDNAME = 'TransportDate '
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = s.ABSUNIQUEID
    AND a9.FIELDNAME = 'Container1'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = s.ABSUNIQUEID
    AND a10.FIELDNAME = 'CBM'
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = s.ABSUNIQUEID
    AND a11.FIELDNAME = 'Port'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = s.ABSUNIQUEID
    AND a12.FIELDNAME = 'TglSI'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = s.ABSUNIQUEID
    AND a13.FIELDNAME = 'connecting'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = s.ABSUNIQUEID
    AND a14.FIELDNAME = 'RemarksSI'
LEFT JOIN ADSTORAGE a15 ON
    a15.UNIQUEID = s.ABSUNIQUEID
    AND a15.FIELDNAME = 'ETDcon'
LEFT JOIN ADSTORAGE a18 ON
    a18.UNIQUEID = s.ABSUNIQUEID
    AND a18.FIELDNAME = 'Container2'
LEFT JOIN ADSTORAGE a19 ON
    a19.UNIQUEID = s.ABSUNIQUEID
    AND a19.FIELDNAME = 'Container3'
LEFT JOIN ADSTORAGE a20 ON
    a20.UNIQUEID = s.ABSUNIQUEID
    AND a20.FIELDNAME = 'Container4'
LEFT JOIN ADSTORAGE a21 ON
    a21.UNIQUEID = s.ABSUNIQUEID
    AND a21.FIELDNAME = 'Container5'
    --        WHERE s.PROVISIONALCODE  = 'ESP2300772'
GROUP BY
    s.PROVISIONALCODE,
    s.TERMSOFDELIVERYCODE,
    s.TERMSOFSHIPPINGCODE,
    t.CODE,
    t.LONGDESCRIPTION,
    t.SHORTDESCRIPTION,
    s.CREATIONUSER,
    s.PAYMENTMETHODCODE,
    s.APPEARANCEDESCRIPTION,
    a2.VALUEDATE,
    a3.VALUESTRING,
    a4.VALUESTRING,
    a5.VALUESTRING,
    a6.VALUESTRING,
    a7.VALUESTRING,
    a8.VALUEDATE,
    a9.VALUESTRING,
    a10.VALUESTRING,
    a11.VALUESTRING,
    a12.VALUEDATE,
    a13.VALUESTRING,
    a14.VALUESTRING,
    a15.VALUESTRING,
    a18.VALUESTRING,
    a19.VALUESTRING,
    a20.VALUESTRING,
    a21.VALUESTRING;


-- DB2ADMIN.ITXVIEW_SHIPPING_INTR_EXIM_ADS source

CREATE VIEW ITXVIEW_SHIPPING_INTR_EXIM_ADS AS 
SELECT
    a.UNIQUEID,
    a2.VALUEDATE AS ETA,
    a3.VALUESTRING AS kite,
    a4.VALUESTRING AS note,
    a5.VALUESTRING AS StatusMeasurement,
    a6.VALUESTRING AS shipping_ref,
    a7.VALUESTRING AS vesselname,
    a8.VALUEDATE AS TransportDate,
    a9.VALUESTRING AS NOMOR_Container,
    a10.VALUESTRING AS CBM,
    a11.VALUESTRING AS Port,
    a12.VALUEDATE AS TglSI,
    a13.VALUESTRING AS connecting_VESSEL,
    CASE
        WHEN a14.VALUESTRING = 0 THEN 'SEA'
        WHEN a14.VALUESTRING = 1 THEN 'AIR'
        WHEN a14.VALUESTRING = 2 THEN 'FCL'
    END REMARKSsI
FROM
    ADSTORAGE a
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = a.UNIQUEID
    AND a2.FIELDNAME = 'ETA'
LEFT JOIN ADSTORAGE a3 ON
    a3.UNIQUEID = a.UNIQUEID
    AND a3.FIELDNAME = 'KITE'
LEFT JOIN ADSTORAGE a4 ON
    a4.UNIQUEID = a.UNIQUEID
    AND a4.FIELDNAME = 'Note'
LEFT JOIN ADSTORAGE a5 ON
    a5.UNIQUEID = a.UNIQUEID
    AND a5.FIELDNAME = 'StatusMeasurement'
LEFT JOIN ADSTORAGE a6 ON
    a6.UNIQUEID = a.UNIQUEID
    AND a6.FIELDNAME = 'shipping'
LEFT JOIN ADSTORAGE a7 ON
    a7.UNIQUEID = a.UNIQUEID
    AND a7.FIELDNAME = 'vesselname'
LEFT JOIN ADSTORAGE a8 ON
    a8.UNIQUEID = a.UNIQUEID
    AND a8.FIELDNAME = 'TransportDate '
LEFT JOIN ADSTORAGE a9 ON
    a9.UNIQUEID = a.UNIQUEID
    AND a9.FIELDNAME = 'Container1'
LEFT JOIN ADSTORAGE a10 ON
    a10.UNIQUEID = a.UNIQUEID
    AND a10.FIELDNAME = 'CBM'
LEFT JOIN ADSTORAGE a11 ON
    a11.UNIQUEID = a.UNIQUEID
    AND a11.FIELDNAME = 'Port'
LEFT JOIN ADSTORAGE a12 ON
    a12.UNIQUEID = a.UNIQUEID
    AND a12.FIELDNAME = 'TglSI'
LEFT JOIN ADSTORAGE a13 ON
    a13.UNIQUEID = a.UNIQUEID
    AND a13.FIELDNAME = 'connecting'
LEFT JOIN ADSTORAGE a14 ON
    a14.UNIQUEID = a.UNIQUEID
    AND a14.FIELDNAME = 'RemarksSI'
    --WHERE a.UNIQUEID  = '46310926'
GROUP BY
    a.UNIQUEID,
    a2.VALUEDATE,
    a3.VALUESTRING,
    a4.VALUESTRING,
    a5.VALUESTRING,
    a6.VALUESTRING,
    a7.VALUESTRING,
    a8.VALUEDATE,
    a9.VALUESTRING,
    a10.VALUESTRING,
    a11.VALUESTRING,
    a12.VALUEDATE,
    a13.VALUESTRING,
    a14.VALUESTRING;


-- DB2ADMIN.ITXVIEW_SHIPPING_MARK source

CREATE VIEW ITXVIEW_SHIPPING_MARK AS 
SELECT
    CODE,
    DELIVERYPOINTCODE,
    LEGALNAME1,
    SP#,
    ST#,
    CASE
        WHEN LEGALNAME1 = 'INQUBE' THEN 'INQUBE'
        WHEN LEGALNAME1 = 'MAS' THEN 'MAS'
        ELSE KODE_SM
    END AS KODE_SM,
    PIC,
    ext
FROM
    (
        SELECT
            DISTINCT 
	s.CODE,
            TRIM(s.DELIVERYPOINTCODE) AS DELIVERYPOINTCODE,
            CASE
                WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%MAS%' THEN LEFT(BUSINESSPARTNER.LEGALNAME1, 3)
                WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%CLASSIC%' THEN LEFT(BUSINESSPARTNER.LEGALNAME1, 7)
                WHEN BUSINESSPARTNER.LEGALNAME1 LIKE '%INQUBE%' THEN LEFT(BUSINESSPARTNER.LEGALNAME1, 6)
                ELSE BUSINESSPARTNER.LEGALNAME1
            END AS LEGALNAME1,
            LISTAGG(
                DISTINCT(
                    TRIM(s2.EXTERNALREFERENCE)
                ),
                ', '
            ) AS SP#,
            LISTAGG(
                DISTINCT(
                    TRIM(s2.INTERNALREFERENCE)
                ),
                ', '
            ) AS ST#,
            a.UNIQUEID,
            a.VALUESTRING AS KODE_SM,
            a2.VALUESTRING AS PIC,
            a3.VALUESTRING AS ext
        FROM
            SALESORDER s
        LEFT OUTER JOIN ORDERPARTNER ORDERPARTNER ON
            s.COMPANYCODE = ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE
            AND s.ORDERTYPE = ORDERPARTNER.CUSTOMERSUPPLIERTYPE
            AND s.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
        LEFT OUTER JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        LEFT JOIN ADSTORAGE a ON
            s.ABSUNIQUEID = a.UNIQUEID
            AND a.FIELDNAME = 'KodeSM'
        LEFT JOIN ADSTORAGE a2 ON
            s.ABSUNIQUEID = a2.UNIQUEID
            AND a2.FIELDNAME = 'PICEXT'
        LEFT JOIN ADSTORAGE a3 ON
            s.ABSUNIQUEID = a3.UNIQUEID
            AND a3.FIELDNAME = 'EXT'
        LEFT JOIN SALESORDERLINE s2 ON
            s.CODE = s2.SALESORDERCODE
            --                WHERE
            --    --        a.UNIQUEID IS NOT NULL
            --                s.CODE IN('EXP2300784')
        GROUP BY
            s.CODE,
            s.DELIVERYPOINTCODE,
            a.UNIQUEID,
            a.VALUESTRING,
            a2.VALUESTRING,
            a3.VALUESTRING,
            BUSINESSPARTNER.LEGALNAME1
    );


-- DB2ADMIN.ITXVIEW_SHIPPING_MARK_ELEMENT source

CREATE VIEW ITXVIEW_SHIPPING_MARK_ELEMENT AS 
SELECT
    DISTINCT 
	s.CODE AS SALESORDERCODE,
    e.ELEMENTCODE,
    p.CODE AS DEMAND_CODE,
    e.NUMBERGROUPSHIFT,
    --    LISTAGG(DISTINCT(TRIM(s3.EXTERNALREFERENCE)),
    --    ', ') AS SP#,
    TRIM(s3.EXTERNALREFERENCE) AS SP#,
    TRIM(s3.INTERNALREFERENCE) AS ST#,
    --    LISTAGG(DISTINCT(TRIM(s2.INTERNALREFERENCE)),
    --    ', ') AS ST#,
    a.UNIQUEID,
    a.VALUESTRING AS KODE_SM,
    a2.VALUESTRING AS PIC,
    CASE
        WHEN a3.VALUESTRING IS NULL THEN '-'
        ELSE a3.VALUESTRING
    END AS ext
FROM
    ELEMENTSINSPECTION e
LEFT JOIN PRODUCTIONDEMAND p ON
    e.DEMANDCODE = p.CODE
LEFT JOIN SALESORDERLINE s3 ON
    s3.SALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
    AND s3.SUBCODE01 = p.SUBCODE01
    AND s3.SUBCODE02 = p.SUBCODE02
    AND s3.SUBCODE03 = p.SUBCODE03
    AND s3.SUBCODE04 = p.SUBCODE04
    AND s3.SUBCODE05 = p.SUBCODE05
    AND s3.SUBCODE06 = p.SUBCODE06
LEFT JOIN SALESORDER s ON
    s.CODE = s3.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    s.ABSUNIQUEID = a.UNIQUEID
    AND a.NAMENAME = 'KodeSM'
LEFT JOIN ADSTORAGE a2 ON
    s.ABSUNIQUEID = a2.UNIQUEID
    AND a2.NAMENAME = 'PICEXT'
LEFT JOIN ADSTORAGE a3 ON
    s.ABSUNIQUEID = a3.UNIQUEID
    AND a3.NAMENAME = 'EXT'
    --    WHERE
    --    e.NUMBERGROUPSHIFT =1
    --    a.UNIQUEID IS NOT NULL
    --    AND p.CODE ='00155303' 
    --    AND p.CODE ='00155303'
GROUP BY
    s.CODE,
    a.UNIQUEID,
    e.NUMBERGROUPSHIFT,
    e.ELEMENTCODE,
    P.CODE,
    s3.EXTERNALREFERENCE,
    s3.INTERNALREFERENCE ,
    a.VALUESTRING,
    a2.VALUESTRING,
    a3.VALUESTRING;


-- DB2ADMIN.ITXVIEW_SHIPPING_MARK_SINTEX source

CREATE VIEW ITXVIEW_SHIPPING_MARK_SINTEX AS 
SELECT
    SALESDOCUMENTPROVISIONALCODE,
    LISTAGG(
        DISTINCT(
            TRIM(SP#)
        ),
        ', '
    ) AS SP#,
    LISTAGG(
        DISTINCT(
            TRIM(ST#)
        ),
        ', '
    ) AS ST#,
    KODE_SM,
    LISTAGG(
        DISTINCT(
            TRIM(PIC)
        ),
        ', '
    ) AS PIC,
    LISTAGG(
        DISTINCT(
            TRIM(ext)
        ),
        ', '
    ) AS ext
FROM
    (
        SELECT
            DISTINCT 
    s1.SALESDOCUMENTPROVISIONALCODE,
            LISTAGG(
                DISTINCT(
                    TRIM(s3.EXTERNALREFERENCE)
                ),
                ', '
            ) AS SP#,
            LISTAGG(
                DISTINCT(
                    TRIM(s3.INTERNALREFERENCE)
                ),
                ', '
            ) AS ST#,
            a.VALUESTRING AS KODE_SM,
            LISTAGG(
                DISTINCT(
                    TRIM(a2.VALUESTRING)
                ),
                ', '
            ) AS PIC,
            LISTAGG(
                DISTINCT(
                    TRIM(a3.VALUESTRING)
                ),
                ', '
            ) AS ext
        FROM
            salesdocumentline s1
        LEFT JOIN SALESORDERLINE s3 ON
            s3.SALESORDERCODE = s1.DLVSALORDERLINESALESORDERCODE
            AND s3.ORDERLINE = s1.DLVSALESORDERLINEORDERLINE
            AND s3.SUBCODE01 = s1.SUBCODE01
            AND s3.SUBCODE02 = s1.SUBCODE02
            AND s3.SUBCODE03 = s1.SUBCODE03
            AND s3.SUBCODE04 = s1.SUBCODE04
            AND s3.SUBCODE05 = s1.SUBCODE05
            AND s3.SUBCODE06 = s1.SUBCODE06
            AND s3.SUBCODE07 = s1.SUBCODE07
            AND s3.SUBCODE08 = s1.SUBCODE08
            AND s3.SUBCODE09 = s1.SUBCODE09
            AND s3.SUBCODE10 = s1.SUBCODE10
        LEFT JOIN SALESORDER s ON
            s.CODE = s3.SALESORDERCODE
        LEFT JOIN ADSTORAGE a ON
            s.ABSUNIQUEID = a.UNIQUEID
            AND a.NAMENAME = 'KodeSM'
        LEFT JOIN ADSTORAGE a2 ON
            s.ABSUNIQUEID = a2.UNIQUEID
            AND a2.NAMENAME = 'PICEXT'
        LEFT JOIN ADSTORAGE a3 ON
            s.ABSUNIQUEID = a3.UNIQUEID
            AND a3.NAMENAME = 'EXT'
            --        WHERE s1.SALESDOCUMENTPROVISIONALCODE IN ('ESP2300885')
        GROUP BY
            s1.SALESDOCUMENTPROVISIONALCODE,
            a.VALUESTRING
    )
GROUP BY 
    KODE_SM,
    SALESDOCUMENTPROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_SJEXIM_DETAILJUMLAH source

CREATE VIEW ITXVIEW_SJEXIM_DETAILJUMLAH AS
SELECT
    SJEXM.PROVISIONALCODE,
    SJEXM.CODE,
    ALLOCATION_SJEXM.BASEPRIMARYQUANTITY,
    ALLOCATION_SJEXM.BASESECONDARYQUANTITY,
    ALLOCATION_SJEXM.BASEPRIMARYQUANTITY + 0.6 AS jml_gw
FROM
    ITXVIEW_SURATJALAN_EXIM SJEXM
LEFT JOIN ITXVIEWALLOCATION0_SJEXIM ALLOCATION_SJEXM ON
    SJEXM.CODE = ALLOCATION_SJEXM.CODE
GROUP BY
    SJEXM.PROVISIONALCODE,
    SJEXM.CODE,
    ALLOCATION_SJEXM.BASEPRIMARYQUANTITY,
    ALLOCATION_SJEXM.BASESECONDARYQUANTITY;


-- DB2ADMIN.ITXVIEW_SJEXIM_JUMLAHQUANTITTY source

CREATE VIEW ITXVIEW_SJEXIM_JUMLAHQUANTITTY AS
SELECT
    SJEXM_JML.PROVISIONALCODE,
    count(SJEXM_JML.CODE) AS jml_roll,
    sum(SJEXM_JML.BASEPRIMARYQUANTITY) AS jml_kg,
    sum(SJEXM_JML.BASESECONDARYQUANTITY) AS jml_yard,
    sum(SJEXM_JML.JML_GW) AS jml_gw
FROM
    ITXVIEW_SJEXIM_DETAILJUMLAH SJEXM_JML
GROUP BY
    SJEXM_JML.PROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_STD_CCK_WARNA source

CREATE VIEW ITXVIEW_STD_CCK_WARNA AS
SELECT
    s2.SALESORDERCODE,
    s2.ORDERLINE,
    a.NAMENAME,
    CASE
        WHEN a.VALUESTRING = '1' THEN 'Labdip - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '2' THEN 'First Lot - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '3' THEN 'Original - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '4' THEN 'Previous Order - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '5' THEN 'Master Color - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '6' THEN 'Lampiran Buyer - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '7' THEN 'Body - ' || a2.VALUESTRING
        ELSE '-'
    END AS STANDART_COCOK_WARNA,
    --    UNTUK LABORAT BEDA NAMANYA DOANG
    CASE
        WHEN a.VALUESTRING = '1' THEN 'Labdip - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '2' THEN 'First Lot - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '3' THEN 'Original - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '4' THEN 'Previous Order - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '5' THEN 'Master Color - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '6' THEN 'Lampiran Buyer - ' || a2.VALUESTRING
        WHEN a.VALUESTRING = '7' THEN 'Body - ' || a2.VALUESTRING
        ELSE '-'
    END AS STDCCKWARNA,
    a2.VALUESTRING AS LABDIPNO
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s.CODE = s2.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s2.ABSUNIQUEID
    AND a.NAMENAME = 'ColorStandard'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = s2.ABSUNIQUEID
    AND a2.NAMENAME = 'ColorRemarks'
    --WHERE 
    --	s2.SALESORDERCODE = 'LAB2300517' AND s2.ORDERLINE = 10;


-- DB2ADMIN.ITXVIEW_STD_KNT source

CREATE VIEW ITXVIEW_STD_KNT AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04,
    PRODUCT.SUBCODE05,
    PRODUCT.SUBCODE06,
    PRODUCT.SUBCODE07,
    PRODUCT.SUBCODE08
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'StdrQty';


-- DB2ADMIN.ITXVIEW_SUBDETAIL_EXIM source

CREATE VIEW ITXVIEW_SUBDETAIL_EXIM AS
SELECT
    ITXVIEW_DETAIL_EXIM.CODE,
    ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
    ITXVIEW_DETAIL_EXIM.EXTERNALREFERENCE,
    ITXVIEW_DETAIL_EXIM.LOTCODE,
    ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE,
    count(ITXVIEW_DETAIL_EXIM.CODE) AS jml_roll,
    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY,
    round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2) AS USERSECONDARYQUANTITY,
    ITXVIEW_DETAIL_EXIM.QTY_FOC,
    CASE
        WHEN ITXVIEW_DETAIL_EXIM.QUALITYREASON IS NULL THEN '-'
        ELSE ITXVIEW_DETAIL_EXIM.QUALITYREASON
    END AS QUALITYREASON
FROM
    ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
GROUP BY
    ITXVIEW_DETAIL_EXIM.CODE,
    ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
    ITXVIEW_DETAIL_EXIM.EXTERNALREFERENCE,
    ITXVIEW_DETAIL_EXIM.LOTCODE,
    ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE,
    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY,
    ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY,
    ITXVIEW_DETAIL_EXIM.QTY_FOC,
    ITXVIEW_DETAIL_EXIM.QUALITYREASON;


-- DB2ADMIN.ITXVIEW_SUBDETAIL_EXIM2 source

CREATE VIEW ITXVIEW_SUBDETAIL_EXIM2 AS
SELECT
    CODE,
    PROVISIONALCODE,
    COMPANYCODE,
    EXTERNALREFERENCE,
    LOTCODE,
    ITEMELEMENTCODE,
    count(CODE) AS jml_roll,
    USERPRIMARYQUANTITY AS jml_kg,
    USERSECONDARYQUANTITY AS jml_yd,
    USERPRIMARYQUANTITY + 0.6 AS jml_gw,
    ITEMTYPEAFICODE,
    QTY_FOC_kg AS FOC_kg,
    QTY_FOC_yd AS FOC_yd,
    CASE
        WHEN QUALITYREASONCODE = 'FOC' THEN QUALITYREASONCODE
        ELSE '-'
    END AS QUALITYREASON
FROM
    (
        SELECT
            ALLOCATION.LOTCODE,
            ALLOCATION.CODE,
            ALLOCATION.USERPRIMARYQUANTITY,
            ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2)AS USERSECONDARYQUANTITY,
            ALLOCATION.ITEMELEMENTCODE,
            ITXVIEW_PACKINGLIST_EXIM.EXTERNALITEM,
            ITXVIEW_PACKINGLIST_EXIM.COMPANYCODE,
            ITXVIEW_PACKINGLIST_EXIM.EXTERNALREFERENCE,
            ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
            ITXVIEW_PACKINGLIST_EXIM.PROVISIONALDOCUMENTDATE,
            ITXVIEW_PACKINGLIST_EXIM.PROJECTCODE,
            ITXVIEW_PACKINGLIST_EXIM.ITEMTYPEAFICODE,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ALLOCATION.USERPRIMARYQUANTITY
                ELSE 0
            END AS QTY_FOC_kg,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2)
                ELSE 0
            END AS QTY_FOC_yd,
            E.QUALITYREASONCODE
        FROM
            ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '0'
            )ALLOCATION ON
            ITXVIEW_PACKINGLIST_EXIM.CODE = ALLOCATION.CODE
        LEFT JOIN ELEMENTS E ON
            E.CODE = ALLOCATION.ITEMELEMENTCODE
        WHERE
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            --                		        AND  ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE = 'ESP2300567'
    )
    --	        WHERE PROVISIONALCODE = 'ESP2300567'
GROUP BY
    PROVISIONALCODE,
    COMPANYCODE,
    LOTCODE,
    EXTERNALREFERENCE,
    CODE,
    USERPRIMARYQUANTITY,
    USERSECONDARYQUANTITY,
    ITEMELEMENTCODE,
    EXTERNALITEM,
    PROJECTCODE,
    ITEMTYPEAFICODE,
    QTY_FOC_kg,
    QTY_FOC_yd,    
    QUALITYREASONCODE;


-- DB2ADMIN.ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_SUBGRANDTOTAL_PACKINGLIST_EXIM AS
SELECT
    ITXVIEW_DETAIL_EXIM.PROVISIONALCODE AS no_sales,
    ITXVIEW_DETAIL_EXIM.CODE AS code,
    ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE AS elementcode,
    ITXVIEW_DETAIL_EXIM.LOTCODE AS LOTCODE,
    count(ITXVIEW_DETAIL_EXIM.CODE) AS jml_roll,
    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY AS jml_kg,
    round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2) AS jml_yd,
    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY + 0.6 AS jml_gw
FROM
    ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
GROUP BY
    ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
    ITXVIEW_DETAIL_EXIM.CODE,
    ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE,
    ITXVIEW_DETAIL_EXIM.LOTCODE,
    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY,
    ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY;


-- DB2ADMIN.ITXVIEW_SUBPACKINGLIST_EXIM source

CREATE VIEW ITXVIEW_SUBPACKINGLIST_EXIM AS
SELECT
    CODE,
    CONCAT(EXTERNALREFERENCE, ITEM_NO) AS DESC_OF_GOODS,
    PROVISIONALCODE,
    SALDOCPROVISIONALCOUNTERCODE,
    PROVISIONALDOCUMENTDATE,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    ITEM_NO,
    LOTCODE,
    NO_ORDER,
    MESSRS_ID,
    CONSIGNEE_ID,
    ITEMTYPEAFICODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    ITEMDESCRIPTION
FROM
    (
        SELECT
            ITXVIEW_DETAIL_EXIM.CODE AS CODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE AS PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.SALDOCPROVISIONALCOUNTERCODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALDOCUMENTDATE AS PROVISIONALDOCUMENTDATE,
            ITXVIEW_DETAIL_EXIM.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            ITXVIEW_DETAIL_EXIM.EXTERNALITEM AS EXTERNALITEM,
            CASE
                WHEN EXTERNALITEM <> '' THEN EXTERNALITEM
                ELSE trim(DECOSUBCODE02) || ' ' || trim(DECOSUBCODE02)
            END AS ITEM_NO,
            ITXVIEW_DETAIL_EXIM.LOTCODE AS LOTCODE,
            ITXVIEW_DETAIL_EXIM.PROJECTCODE AS NO_ORDER,
            ITXVIEW_DETAIL_EXIM.MESSRS_ID AS MESSRS_ID,
            ITXVIEW_DETAIL_EXIM.CONSIGNEE_ID AS CONSIGNEE_ID,
            ITXVIEW_DETAIL_EXIM.ITEMTYPEAFICODE AS ITEMTYPEAFICODE,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01 AS DECOSUBCODE01,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE02 AS DECOSUBCODE02,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE03 AS DECOSUBCODE03,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE04 AS DECOSUBCODE04,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE05 AS DECOSUBCODE05,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE06 AS DECOSUBCODE06,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE07 AS DECOSUBCODE07,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE08 AS DECOSUBCODE08,
            ITXVIEW_DETAIL_EXIM.ITEMDESCRIPTION AS ITEMDESCRIPTION
        FROM
            ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
        LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01 = ITXVIEWCOLOR.SUBCODE01
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE02 = ITXVIEWCOLOR.SUBCODE02
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE03 = ITXVIEWCOLOR.SUBCODE03
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE04 = ITXVIEWCOLOR.SUBCODE04
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE05 = ITXVIEWCOLOR.SUBCODE05
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE06 = ITXVIEWCOLOR.SUBCODE06
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE07 = ITXVIEWCOLOR.SUBCODE07
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE08 = ITXVIEWCOLOR.SUBCODE08
        LEFT JOIN ITXVIEW_HEADER_PACKLINGLIST_EXIM HEADER_PL_EXIM ON
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE = HEADER_PL_EXIM.NO_SALES
        GROUP BY
            ITXVIEW_DETAIL_EXIM.CODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.SALDOCPROVISIONALCOUNTERCODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALDOCUMENTDATE,
            ITXVIEW_DETAIL_EXIM.EXTERNALREFERENCE,
            ITXVIEW_DETAIL_EXIM.EXTERNALITEM,
            ITXVIEW_DETAIL_EXIM.LOTCODE,
            ITXVIEW_DETAIL_EXIM.PROJECTCODE,
            ITXVIEW_DETAIL_EXIM.MESSRS_ID,
            ITXVIEW_DETAIL_EXIM.CONSIGNEE_ID,
            ITXVIEW_DETAIL_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE02,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE03,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE04,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE05,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE06,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE07,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE08,
            ITXVIEW_DETAIL_EXIM.ITEMDESCRIPTION
    );


-- DB2ADMIN.ITXVIEW_SUBPACKINGLIST_EXIM2 source

CREATE VIEW ITXVIEW_SUBPACKINGLIST_EXIM2 AS
SELECT
    DISTINCT
    --    CODE,
    CONCAT(EXTERNALREFERENCE, ITEM_NO) AS DESC_OF_GOODS,
    PROVISIONALCODE,
    PROVISIONALCOUNTERCODE,
    COMPANYCODE,
    PROVISIONALDOCUMENTDATE,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    ITEM_NO,
    LOTCODE,
    NO_ORDER,
    MESSRS_ID,
    CONSIGNEE_ID,
    ITEMTYPEAFICODE,
    DECOSUBCODE01,
    DECOSUBCODE02,
    DECOSUBCODE03,
    DECOSUBCODE04,
    DECOSUBCODE05,
    DECOSUBCODE06,
    DECOSUBCODE07,
    DECOSUBCODE08,
    ITEMDESCRIPTION
FROM
    (
        SELECT
            DISTINCT 
	ALLOCATION2.CODE,
            ALLOCATION2.LOTCODE,
            SALESORDER.CODE AS NO_ORDER,
            s.PROVISIONALCODE,
            s.PROVISIONALCOUNTERCODE,
            s.COMPANYCODE,
            s.PROVISIONALDOCUMENTDATE,
            s2.EXTERNALREFERENCE,
            s2.INTERNALREFERENCE,
            s2.EXTERNALITEM,
            CASE
                WHEN s2.EXTERNALITEM <> '' THEN s2.EXTERNALITEM
                ELSE trim(s2.SUBCODE02) || ' ' || trim(s2.SUBCODE02)
            END AS ITEM_NO,
            BUSINESSPARTNER.NUMBERID AS MESSRS_ID,
            ADDRESS.CODE AS CONSIGNEE_ID,
            s2.ITEMTYPEAFICODE,
            s2.ITEMDESCRIPTION,
            ALLOCATION2.DECOSUBCODE01 AS DECOSUBCODE01,
            ALLOCATION2.DECOSUBCODE02 AS DECOSUBCODE02,
            ALLOCATION2.DECOSUBCODE03 AS DECOSUBCODE03,
            ALLOCATION2.DECOSUBCODE04 AS DECOSUBCODE04,
            ALLOCATION2.DECOSUBCODE05 AS DECOSUBCODE05,
            ALLOCATION2.DECOSUBCODE06 AS DECOSUBCODE06,
            ALLOCATION2.DECOSUBCODE07 AS DECOSUBCODE07,
            ALLOCATION2.DECOSUBCODE08 AS DECOSUBCODE08
        FROM
            SALESDOCUMENT s
        LEFT JOIN SALESDOCUMENTLINE s2 ON
            s.PROVISIONALCODE = s2.SALESDOCUMENTPROVISIONALCODE
        LEFT JOIN SALESORDER SALESORDER ON
            TRIM(s2.DLVSALORDERLINESALESORDERCODE) = TRIM(SALESORDER.CODE)
        LEFT JOIN ADDRESS ADDRESS ON
            s.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
            AND s.DELIVERYPOINTCODE = ADDRESS.CODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            s.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORDERCODE IS NOT NULL
            )ALLOCATION ON
            s2.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND s2.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND s2.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND s2.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND s2.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND s2.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND s2.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND s2.SUBCODE08 = ALLOCATION.DECOSUBCODE08
            AND s2.SALESDOCUMENTPROVISIONALCODE = ALLOCATION.ORDERCODE
            AND s2.ORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION2
                WHERE
                    ALLOCATION2.DETAILTYPE = '0'
            ) ALLOCATION2 ON
            ALLOCATION.CODE = ALLOCATION2.CODE
            AND ALLOCATION.DECOSUBCODE01 = ALLOCATION2.DECOSUBCODE01
            AND ALLOCATION.DECOSUBCODE02 = ALLOCATION2.DECOSUBCODE02
            AND ALLOCATION.DECOSUBCODE03 = ALLOCATION2.DECOSUBCODE03
            AND ALLOCATION.DECOSUBCODE04 = ALLOCATION2.DECOSUBCODE04
            AND ALLOCATION.DECOSUBCODE05 = ALLOCATION2.DECOSUBCODE05
            AND ALLOCATION.DECOSUBCODE06 = ALLOCATION2.DECOSUBCODE06
            AND ALLOCATION.DECOSUBCODE07 = ALLOCATION2.DECOSUBCODE07
            AND ALLOCATION.DECOSUBCODE08 = ALLOCATION2.DECOSUBCODE08
        WHERE
            ALLOCATION2.ORIGINTRNTRANSACTIONNUMBER IS NULL
    );


-- DB2ADMIN.ITXVIEW_SUB_DETAILCOMMERCIALINV_EXIM source

CREATE VIEW ITXVIEW_SUB_DETAILCOMMERCIALINV_EXIM AS
SELECT
    SD.PROVISIONALCODE,
    SDL.PRICE,
    SDL.USERPRIMARYQUANTITY,
    SDL.USERSECONDARYQUANTITY,
    SDL.ORDERLINE
FROM
    SALESDOCUMENT SD
LEFT JOIN SALESDOCUMENTLINE SDL ON
    SD.PROVISIONALCODE = SDL.SALESDOCUMENTPROVISIONALCODE
    -- WHERE SD.PROVISIONALCODE = 'ESP2200489';


-- DB2ADMIN.ITXVIEW_SUB_EXIM_COLOR source

CREATE VIEW ITXVIEW_SUB_EXIM_COLOR AS
SELECT
    DISTINCT
    --    ITXVIEW_SUBPACKINGLIST_EXIM.CODE,
    ITXVIEW_SUBPACKINGLIST_EXIM.LOTCODE,
    ITXVIEW_SUBPACKINGLIST_EXIM.PROVISIONALCODE,
    ITXVIEW_SUBPACKINGLIST_EXIM.SALDOCPROVISIONALCOUNTERCODE,
    ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE02,
    ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE03,
    ITXVIEW_SUBPACKINGLIST_EXIM.EXTERNALREFERENCE,
    ITXVIEW_SUBPACKINGLIST_EXIM.EXTERNALITEM,
    CASE
        WHEN ITXVIEW_SUBPACKINGLIST_EXIM.EXTERNALITEM <> '' THEN ITXVIEW_SUBPACKINGLIST_EXIM.EXTERNALITEM
        ELSE trim(ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE02) || ' ' || ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE03
    END AS item_no,
    ITXVIEWCOLOR.WARNA
FROM
    ITXVIEW_SUBPACKINGLIST_EXIM ITXVIEW_SUBPACKINGLIST_EXIM
LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
    ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE01 = ITXVIEWCOLOR.SUBCODE01
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE02 = ITXVIEWCOLOR.SUBCODE02
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE03 = ITXVIEWCOLOR.SUBCODE03
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE04 = ITXVIEWCOLOR.SUBCODE04
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE05 = ITXVIEWCOLOR.SUBCODE05
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE06 = ITXVIEWCOLOR.SUBCODE06
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE07 = ITXVIEWCOLOR.SUBCODE07
    AND ITXVIEW_SUBPACKINGLIST_EXIM.DECOSUBCODE08 = ITXVIEWCOLOR.SUBCODE08
    --        WHERE ITXVIEW_SUBPACKINGLIST_EXIM.PROVISIONALCODE = 'ESP2300772';


-- DB2ADMIN.ITXVIEW_SUB_EXIM_COLOR2 source

CREATE VIEW ITXVIEW_SUB_EXIM_COLOR2 AS
SELECT
    CODE,
    PROVISIONALCODE,
    LOTCODE,
    DECOSUBCODE02,
    DECOSUBCODE03,
    item_no,
    WARNA
FROM
    (
        SELECT
            ITXVIEW_DETAIL_EXIM.CODE AS CODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE AS PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.LOTCODE AS LOTCODE,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01 AS DECOSUBCODE01,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE02 AS DECOSUBCODE02,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE03 AS DECOSUBCODE03,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE04 AS DECOSUBCODE04,
            CASE
                WHEN ITXVIEW_DETAIL_EXIM.EXTERNALITEM <> '' THEN ITXVIEW_DETAIL_EXIM.EXTERNALITEM
                ELSE trim(ITXVIEW_DETAIL_EXIM.DECOSUBCODE02) || ' ' || ITXVIEW_DETAIL_EXIM.DECOSUBCODE03
            END AS item_no,
            ITXVIEWCOLOR.WARNA
        FROM
            ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
        LEFT JOIN ITXVIEWCOLOR ITXVIEWCOLOR ON
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01 = ITXVIEWCOLOR.SUBCODE01
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE02 = ITXVIEWCOLOR.SUBCODE02
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE03 = ITXVIEWCOLOR.SUBCODE03
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE04 = ITXVIEWCOLOR.SUBCODE04
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE05 = ITXVIEWCOLOR.SUBCODE05
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE06 = ITXVIEWCOLOR.SUBCODE06
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE07 = ITXVIEWCOLOR.SUBCODE07
            AND ITXVIEW_DETAIL_EXIM.DECOSUBCODE08 = ITXVIEWCOLOR.SUBCODE08
        GROUP BY
            ITXVIEW_DETAIL_EXIM.CODE,
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.EXTERNALREFERENCE,
            ITXVIEW_DETAIL_EXIM.EXTERNALITEM,
            ITXVIEW_DETAIL_EXIM.LOTCODE,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE01,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE02,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE03,
            ITXVIEW_DETAIL_EXIM.DECOSUBCODE04,
            ITXVIEWCOLOR.WARNA
    );


-- DB2ADMIN.ITXVIEW_SUB_FOC_INVOICE source

CREATE VIEW ITXVIEW_SUB_FOC_INVOICE AS
SELECT
    code_allocation,
    Invoice,
    no_sj,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    payment_terms,
    issue_date,
    tgl_inv,
    tanggal_inv,
    no_order,
    jenis_order,
    no_po,
    FAKTUR_PAJAK,
    desc_kain,
    fabric_type,
    article_group,
    kode_variant,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN ''
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        OR kode_cus = 'BIHQSS' THEN ''
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN ''
        ELSE kode_jk
    END AS kode_jk,
    jenis_kain,
    kain,
    hs_code,
    unit,
    curr,
    WARNA,
    berat,
    berat_lain,
    rate,
    price_usd,
    price_idr,
    totaL_usd,
    total_idr
FROM
    (
        SELECT
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE AS code_allocation,
            trim(PLANTINVOICE.CODE) AS Invoice,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            trim(BUSINESSPARTNER.NUMBERID) AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PAYMENTMETHODIE.NOOFDAYS = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
                ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
            END AS payment_terms,
            ALLOCATION.ALLOCATIONDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(ALLOCATION.ALLOCATIONDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NULL THEN trim(ALLOCATION.ALLOCATIONDATE)
                    ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            trim(SALESDOCUMENTLINE.PREVIOUSCODE) AS NO_SJ,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            trim(SALESORDER.COUNTERCODE) AS jenis_order,
            CASE
                WHEN SALESDOCUMENTLINE.EXTERNALREFERENCE IS NULL THEN CASE
                    WHEN SALESDOCUMENT.ORDERPARTNERBRANDCODE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE || '()'
                    ELSE trim(SALESDOCUMENTLINE.EXTERNALREFERENCE) || ' (' || trim(SALESDOCUMENT.ORDERPARTNERBRANDCODE) || ')'
                END
                ELSE CASE
                    WHEN SALESDOCUMENT.ORDERPARTNERBRANDCODE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE || '()'
                    ELSE trim(SALESDOCUMENTLINE.EXTERNALREFERENCE) || ' (' || trim(SALESDOCUMENT.ORDERPARTNERBRANDCODE) || ')'
                END
            END AS NO_PO,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            SALESDOCUMENTLINE.SUBCODE02 AS article_group,
            SALESDOCUMENTLINE.SUBCODE01 AS fabric_type,
            SALESDOCUMENTLINE.SUBCODE04 AS kode_variant,
            JK.SUBCODE02 AS kode_jk1,
            JK.SUBCODE03 AS kode_jk2,
            CASE
                WHEN trim(JK.LONGDESCRIPTION) <> '' THEN JK.LONGDESCRIPTION
                ELSE JK.SUBCODE02 || JK.SUBCODE03
            END AS kode_jk,
            CASE
                WHEN SALESORDER.COUNTERCODE = 'EXPORT'
                AND BUSINESSPARTNER.NUMBERID <> 989 THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'SAMPLE'
                AND BUSINESSPARTNER.NUMBERID <> 888
                OR ADDRESS.CODE = 'BIHQSS' THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'REPLCEXP'
                AND BUSINESSPARTNER.NUMBERID <> 888 THEN 'Kain Rajut Celup'
                ELSE trim(SALESDOCUMENTLINE.ITEMDESCRIPTION)
            END AS jenis_kain,
            PRODUCT.LONGDESCRIPTION AS kain,
            trim(JK.EXTERNALREFERENCE) AS hs_code,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.ORDERCURRENCYCODE AS curr,
            ITXVIEWCOLOR.WARNA,
            (
                round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )
            ) AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                    ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                END
            END AS BERAT_LAIN,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'USD' THEN SALESDOCUMENTLINE.price
                ELSE 0
            END AS PRICE_USD,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'IDR' THEN SALESDOCUMENTLINE.price
                ELSE floor( SALESDOCUMENTLINE.price * PLANTINVOICE.EXCHANGERATEOFCONTRACT )
            END AS PRICE_IDR,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                        ELSE
                	round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    END
                END
                ELSE 0
            END AS TOTAL_USD,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                        ELSE
                	floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    END
                END
                ELSE CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                        ELSE
                	floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    END
                END
            END AS TOTAL_IDR
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
            --        AND PLANTINVOICE.CODE = SALESDOCUMENT.DEFINITIVECODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN ITXVIEW_SUB_INV_ITEMJENISKAIN JK ON
            SALESDOCUMENT.PROVISIONALCODE = JK.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SUBCODE02 = JK.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = JK.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = JK.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = JK.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = JK.SUBCODE06
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.PROJECTCODE = SALESORDER.PROJECTCODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
            ) ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PROJECTCODE = ALLOCATION.PROJECTCODE
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
        LEFT JOIN DESIGN DESIGN ON
            DESIGN.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE07
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            DESIGNCOMPONENT.VARIANTCODE = SALESDOCUMENTLINE.SUBCODE08
            AND DESIGNCOMPONENT.DESIGNNUMBERID = DESIGN.NUMBERID
        LEFT JOIN (
                SELECT
                    ITXVIEWCOLOR.ITEMTYPECODE,
                    ITXVIEWCOLOR.SUBCODE01,
                    ITXVIEWCOLOR.SUBCODE02,
                    ITXVIEWCOLOR.SUBCODE03,
                    ITXVIEWCOLOR.SUBCODE04,
                    ITXVIEWCOLOR.SUBCODE05,
                    ITXVIEWCOLOR.SUBCODE06,
                    ITXVIEWCOLOR.SUBCODE07,
                    ITXVIEWCOLOR.SUBCODE08,
                    ITXVIEWCOLOR.WARNA
                FROM
                    ITXVIEWCOLOR ITXVIEWCOLOR
            ) ITXVIEWCOLOR ON
            ITXVIEWCOLOR.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND ITXVIEWCOLOR.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND ITXVIEWCOLOR.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND ITXVIEWCOLOR.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND ITXVIEWCOLOR.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND ITXVIEWCOLOR.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND ITXVIEWCOLOR.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND ITXVIEWCOLOR.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND ITXVIEWCOLOR.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
        LEFT JOIN PRODUCT PRODUCT ON
            SALESDOCUMENTLINE.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
            AND SALESDOCUMENTLINE.SUBCODE01 = PRODUCT.SUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = PRODUCT.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = PRODUCT.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = PRODUCT.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = PRODUCT.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = PRODUCT.SUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = PRODUCT.SUBCODE07
            AND SALESDOCUMENTLINE.SUBCODE08 = PRODUCT.SUBCODE08
            --        WHERE PLANTINVOICE.CODE = 'EX23060005'
        GROUP BY
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            BUSINESSPARTNER.LEGALNAME1,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.CODE,
            PLANTINVOICE.CODE,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESORDER.CREATIONUSER,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY,
            PRODUCT.LONGDESCRIPTION,
            PRODUCT.SHORTDESCRIPTION,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.INTERNALREFERENCEDATE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENT.EXTERNALREFERENCE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            PLANTINVOICE.INVOICEDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            PLANTINVOICE.CONSIGNEECUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICE.BLNUMBER,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.price,
            SALESORDER.TEMPLATECODE,
            SALESORDER.DESCRIPTION,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            DESIGNCOMPONENT.SHORTDESCRIPTION,
            ITXVIEWCOLOR.WARNA,
            JK.SUBCODE02,
            JK.SUBCODE03,
            JK.LONGDESCRIPTION,
            JK.EXTERNALREFERENCE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            PLANTINVOICE.CREATIONUSER
    );


-- DB2ADMIN.ITXVIEW_SUB_FOC_INVOICE2 source

CREATE VIEW ITXVIEW_SUB_FOC_INVOICE2 AS
SELECT
    code_allocation,
    Invoice,
    no_sj,
    kode_bep,
    id_bep,
    nama_bep,
    kode_cus,
    nama_cus,
    payment_terms,
    issue_date,
    tgl_inv,
    tanggal_inv,
    no_order,
    jenis_order,
    no_po,
    FAKTUR_PAJAK,
    desc_kain,
    fabric_type,
    article_group,
    kode_variant,
    CASE
        WHEN jenis_order = 'EXPORT'
        AND id_bep <> 989 THEN ''
        WHEN jenis_order = 'SAMPLE'
        AND id_bep <> 888
        OR kode_cus = 'BIHQSS' THEN ''
        WHEN jenis_order = 'REPLCEXP'
        AND id_bep <> 888 THEN ''
        ELSE kode_jk
    END AS kode_jk,
    jenis_kain,
    kain,
    hs_code,
    unit,
    curr,
    WARNA,
    berat,
    berat_lain,
    rate,
    price_usd,
    price_idr,
    totaL_usd,
    total_idr
FROM
    (
        SELECT
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE AS code_allocation,
            trim(PLANTINVOICE.CODE) AS Invoice,
            trim(SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE) AS kode_bep,
            trim(BUSINESSPARTNER.NUMBERID) AS id_bep,
            BUSINESSPARTNER.LEGALNAME1 AS nama_bep,
            CASE
                WHEN ADDRESS.CODE IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE ADDRESS.CODE
            END AS kode_cus,
            CASE
                WHEN trim(ADDRESS.ADDRESSEE) IS NULL THEN 'Warning! Kolom Address Code Sales Order Kosong. USER: ' || TRIM(SALESORDER.CREATIONUSER)
                ELSE trim(ADDRESS.ADDRESSEE)
            END AS nama_cus,
            CASE
                WHEN PAYMENTMETHODIE.NOOFDAYS = 0 THEN trim(PAYMENTMETHOD.LONGDESCRIPTION)
                ELSE trim(PAYMENTMETHODIE.NOOFDAYS)
            END AS payment_terms,
            ALLOCATION.ALLOCATIONDATE AS tgl_inv,
            SALESDOCUMENT2.GOODSISSUEDATE AS issue_date,
            CASE
                WHEN trim(ALLOCATION.ALLOCATIONDATE) <= DATE('2022-08-15') THEN CASE
                    WHEN trim(SALESDOCUMENT2.GOODSISSUEDATE) IS NULL THEN trim(ALLOCATION.ALLOCATIONDATE)
                    ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
                END
                ELSE trim(SALESDOCUMENT2.GOODSISSUEDATE)
            END AS tanggal_inv,
            trim(SALESDOCUMENTLINE.PREVIOUSCODE) AS NO_SJ,
            trim(PLANTINVOICE.CONTRACTNOCODE) AS NO_ORDER,
            trim(SALESORDER.COUNTERCODE) AS jenis_order,
            CASE
                WHEN SALESDOCUMENTLINE.EXTERNALREFERENCE IS NULL THEN CASE
                    WHEN SALESDOCUMENT.ORDERPARTNERBRANDCODE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE || '()'
                    ELSE trim(SALESDOCUMENTLINE.EXTERNALREFERENCE) || ' (' || trim(SALESDOCUMENT.ORDERPARTNERBRANDCODE) || ')'
                END
                ELSE CASE
                    WHEN SALESDOCUMENT.ORDERPARTNERBRANDCODE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE || '()'
                    ELSE trim(SALESDOCUMENTLINE.EXTERNALREFERENCE) || ' (' || trim(SALESDOCUMENT.ORDERPARTNERBRANDCODE) || ')'
                END
            END AS NO_PO,
            CASE
                WHEN PLANTINVOICE.BLNUMBER IS NULL THEN 'Warning! Kolom faktur pajak Invoice Kosong. USER : ' || TRIM(PLANTINVOICE.CREATIONUSER)
                ELSE PLANTINVOICE.BLNUMBER
            END AS FAKTUR_PAJAK,
            CASE
                WHEN trim(SALESORDER.TEMPLATECODE) LIKE '%CWD%' THEN trim(SALESORDER.DESCRIPTION)
                ELSE '-'
            END AS DESC_KAIN,
            SALESDOCUMENTLINE.SUBCODE02 AS article_group,
            SALESDOCUMENTLINE.SUBCODE01 AS fabric_type,
            SALESDOCUMENTLINE.SUBCODE04 AS kode_variant,
            JK.SUBCODE02 AS kode_jk1,
            JK.SUBCODE03 AS kode_jk2,
            CASE
                WHEN trim(JK.LONGDESCRIPTION) <> '' THEN JK.LONGDESCRIPTION
                ELSE JK.SUBCODE02 || JK.SUBCODE03
            END AS kode_jk,
            CASE
                WHEN SALESORDER.COUNTERCODE = 'EXPORT'
                AND BUSINESSPARTNER.NUMBERID <> 989 THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'SAMPLE'
                AND BUSINESSPARTNER.NUMBERID <> 888
                OR ADDRESS.CODE = 'BIHQSS' THEN 'Kain Rajut Celup'
                WHEN SALESORDER.COUNTERCODE = 'REPLCEXP'
                AND BUSINESSPARTNER.NUMBERID <> 888 THEN 'Kain Rajut Celup'
                ELSE trim(SALESDOCUMENTLINE.ITEMDESCRIPTION)
            END AS jenis_kain,
            PRODUCT.LONGDESCRIPTION AS kain,
            trim(JK.EXTERNALREFERENCE) AS hs_code,
            trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) AS unit,
            PLANTINVOICE.ORDERCURRENCYCODE AS curr,
            ITXVIEWCOLOR.WARNA,
            (
                round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )
            ) AS BERAT,
            CASE
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2))
                WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2))
                    ELSE SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2))
                END
            END AS BERAT_LAIN,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT AS rate,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'USD' THEN SALESDOCUMENTLINE.price
                ELSE 0
            END AS PRICE_USD,
            CASE
                WHEN PLANTINVOICE.ORDERCURRENCYCODE = 'IDR' THEN SALESDOCUMENTLINE.price
                ELSE floor( SALESDOCUMENTLINE.price * PLANTINVOICE.EXCHANGERATEOFCONTRACT )
            END AS PRICE_IDR,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'USD' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                        ELSE round( SUM( round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 )
                    END
                END
                ELSE 0
            END AS TOTAL_USD,
            CASE
                WHEN trim(PLANTINVOICE.ORDERCURRENCYCODE) = 'IDR' THEN CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                        ELSE floor(SUM(round( ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ))
                    END
                END
                ELSE CASE
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'kg' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'yd' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'm' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY * 0.9144, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    WHEN trim(SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE) = 'un' THEN CASE
                        WHEN trim(SALESDOCUMENTLINE.ITEMTYPEAFICODE) = 'CAP' THEN floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                        ELSE floor(round(SUM(round(ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASESECONDARYQUANTITY, 2 )) * round( SALESDOCUMENTLINE.price, 2 ), 2 ) * PLANTINVOICE.EXCHANGERATEOFCONTRACT)
                    END
                END
            END AS TOTAL_IDR
        FROM
            PLANTINVOICE PLANTINVOICE
        LEFT JOIN SALESORDER SALESORDER ON
            PLANTINVOICE.CONTRACTNOCODE = SALESORDER.CODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT ON
            PLANTINVOICE.CODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHOD.CODE
        LEFT JOIN PAYMENTMETHODIE PAYMENTMETHODIE ON
            PLANTINVOICE.TERMSOFPAYMENTCODE = PAYMENTMETHODIE.CODE
        LEFT JOIN ADDRESS ADDRESS ON
            ADDRESS.UNIQUEID = SALESORDER.PAYMENTCUSTOMERUNIQUEID
            AND ADDRESS.CODE = SALESORDER.PAYMENTCUSTOMERCODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = PLANTINVOICE.BUYERIFOTCCUSTOMERSUPPLIERCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
        LEFT JOIN SALESDOCUMENT SALESDOCUMENT2 ON
            SALESDOCUMENT2.PROVISIONALCODE = SALESDOCUMENTLINE.PREVIOUSCODE
        LEFT JOIN PLANTINVOICELINE PLANTINVOICELINE ON
            PLANTINVOICELINE.PLANTINVOICECODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND PLANTINVOICELINE.INVOICELINENO = CASE
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 2 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 1)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 3 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 2)
                WHEN LENGTH(RTRIM(PREVIOUSORDERLINE)) = 4 THEN SUBSTR(SALESDOCUMENTLINE.PREVIOUSORDERLINE, 1, 3)
            END
        LEFT JOIN ITXVIEW_SUB_INV_ITEMJENISKAIN JK ON
            SALESDOCUMENT.PROVISIONALCODE = JK.PROVISIONALCODE
            AND SALESDOCUMENTLINE.SUBCODE02 = JK.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = JK.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = JK.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = JK.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = JK.SUBCODE06
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDERLINE.SALESORDERCODE = SALESORDER.CODE
            AND SALESORDERLINE.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = '7'
            ) ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND SALESDOCUMENTLINE.PREVIOUSCODE = ALLOCATION.ORDERCODE
            AND SALESDOCUMENTLINE.PREVIOUSORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN ITXVIEW_ALLOCATION_SURATJALAN_PPC ITXVIEW_ALLOCATION_SURATJALAN_PPC ON
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE = ALLOCATION.CODE
        LEFT JOIN DESIGN DESIGN ON
            DESIGN.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE07
        LEFT JOIN DESIGNCOMPONENT DESIGNCOMPONENT ON
            DESIGNCOMPONENT.VARIANTCODE = SALESDOCUMENTLINE.SUBCODE08
            AND DESIGNCOMPONENT.DESIGNNUMBERID = DESIGN.NUMBERID
        LEFT JOIN (
                SELECT
                    ITXVIEWCOLOR.ITEMTYPECODE,
                    ITXVIEWCOLOR.SUBCODE01,
                    ITXVIEWCOLOR.SUBCODE02,
                    ITXVIEWCOLOR.SUBCODE03,
                    ITXVIEWCOLOR.SUBCODE04,
                    ITXVIEWCOLOR.SUBCODE05,
                    ITXVIEWCOLOR.SUBCODE06,
                    ITXVIEWCOLOR.SUBCODE07,
                    ITXVIEWCOLOR.SUBCODE08,
                    ITXVIEWCOLOR.WARNA
                FROM
                    ITXVIEWCOLOR ITXVIEWCOLOR
            ) ITXVIEWCOLOR ON
            ITXVIEWCOLOR.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
            AND ITXVIEWCOLOR.SUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
            AND ITXVIEWCOLOR.SUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
            AND ITXVIEWCOLOR.SUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
            AND ITXVIEWCOLOR.SUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
            AND ITXVIEWCOLOR.SUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
            AND ITXVIEWCOLOR.SUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
            AND ITXVIEWCOLOR.SUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
            AND ITXVIEWCOLOR.SUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
        LEFT JOIN PRODUCT PRODUCT ON
            SALESDOCUMENTLINE.ITEMTYPEAFICODE = PRODUCT.ITEMTYPECODE
            AND SALESDOCUMENTLINE.SUBCODE01 = PRODUCT.SUBCODE01
            AND SALESDOCUMENTLINE.SUBCODE02 = PRODUCT.SUBCODE02
            AND SALESDOCUMENTLINE.SUBCODE03 = PRODUCT.SUBCODE03
            AND SALESDOCUMENTLINE.SUBCODE04 = PRODUCT.SUBCODE04
            AND SALESDOCUMENTLINE.SUBCODE05 = PRODUCT.SUBCODE05
            AND SALESDOCUMENTLINE.SUBCODE06 = PRODUCT.SUBCODE06
            AND SALESDOCUMENTLINE.SUBCODE07 = PRODUCT.SUBCODE07
            AND SALESDOCUMENTLINE.SUBCODE08 = PRODUCT.SUBCODE08
        GROUP BY
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.CODE,
            ALLOCATION.ALLOCATIONDATE,
            SALESDOCUMENT2.GOODSISSUEDATE,
            BUSINESSPARTNER.LEGALNAME1,
            SALESORDER.FNCORDPRNCUSTOMERSUPPLIERCODE,
            ADDRESS.CODE,
            PLANTINVOICE.CODE,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESORDER.CREATIONUSER,
            SALESDOCUMENTLINE.ITEMDESCRIPTION,
            ITXVIEW_ALLOCATION_SURATJALAN_PPC.BASEPRIMARYQUANTITY,
            PRODUCT.LONGDESCRIPTION,
            PRODUCT.SHORTDESCRIPTION,
            SALESDOCUMENTLINE.PREVIOUSCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.INTERNALREFERENCEDATE,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENT.EXTERNALREFERENCE,
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESDOCUMENT.ORDERPARTNERBRANDCODE,
            PLANTINVOICE.INVOICEDATE,
            PAYMENTMETHOD.LONGDESCRIPTION,
            PAYMENTMETHODIE.NOOFDAYS,
            PLANTINVOICE.CONTRACTNOCODE,
            PLANTINVOICE.CONSIGNEECUSTOMERSUPPLIERCODE,
            ADDRESS.ADDRESSEE,
            ADDRESS.TAXREGISTRATIONNUMBER,
            PLANTINVOICELINE.TAXTEMPLATECODE,
            PLANTINVOICE.ORDERCURRENCYCODE,
            PLANTINVOICE.EXCHANGERATEOFCONTRACT,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            PLANTINVOICE.BLNUMBER,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.price,
            SALESORDER.TEMPLATECODE,
            SALESORDER.DESCRIPTION,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE02,
            SALESDOCUMENTLINE.SUBCODE03,
            SALESDOCUMENTLINE.SUBCODE04,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.SUBCODE06,
            SALESDOCUMENTLINE.SUBCODE07,
            SALESDOCUMENTLINE.SUBCODE08,
            DESIGNCOMPONENT.SHORTDESCRIPTION,
            ITXVIEWCOLOR.WARNA,
            JK.SUBCODE02,
            JK.SUBCODE03,
            JK.LONGDESCRIPTION,
            JK.EXTERNALREFERENCE,
            SALESORDER.COUNTERCODE,
            BUSINESSPARTNER.NUMBERID,
            PLANTINVOICE.CREATIONUSER
    );


-- DB2ADMIN.ITXVIEW_SUB_INV_COLORJASA source

-- DB2ADMIN.ITXVIEW_SUB_INV_COLORJASA source

CREATE VIEW ITXVIEW_SUB_INV_COLORJASA AS
SELECT
    a.UNIQUEID,
    s.CODE,
    a.NAMENAME,
    a.VALUESTRING
FROM
    SALESORDER s
LEFT JOIN SALESORDERLINE s2 ON
    s.CODE = s2.SALESORDERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s2.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEW_SUB_INV_ITEMJENISKAIN source

CREATE VIEW ITXVIEW_SUB_INV_ITEMJENISKAIN AS
SELECT
    s.PROVISIONALCODE,
    s.SALESORDERCOUNTERCODE,
    a.ORDPRNCUSTOMERSUPPLIERCODE,
    s2.EXTERNALITEM,
    s2.SUBCODE02,
    s2.SUBCODE03,
    s2.SUBCODE04,
    s2.SUBCODE05,
    s2.SUBCODE06,
    s2.ITEMDESCRIPTION,
    s2.ORDERLINE,
    a.LONGDESCRIPTION,
    p.LONGDESCRIPTION AS jenis_kain,
    a.EXTERNALREFERENCE,
    a.INACTIVE
FROM
    SALESDOCUMENT s
LEFT JOIN SALESDOCUMENTLINE s2 ON
    s.PROVISIONALCODE = s2.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ITXVIEWORDERPARTNERLINKACTIVE a ON
    s.ORDPRNCUSTOMERSUPPLIERCODE = a.ORDPRNCUSTOMERSUPPLIERCODE
    AND
   s2.ITEMTYPEAFICODE = a.ITEMTYPEAFICODE
    AND
    s2.SUBCODE01 = a.SUBCODE01
    AND
   s2.SUBCODE02 = a.SUBCODE02
    AND
   s2.SUBCODE03 = a.SUBCODE03
    AND
   s2.SUBCODE04 = a.SUBCODE04
    AND
   s2.SUBCODE05 = a.SUBCODE05
    AND
   s2.SUBCODE06 = a.SUBCODE06
LEFT JOIN PRODUCT p ON
    s2.ITEMTYPEAFICODE = p.ITEMTYPECODE
    AND
    s2.SUBCODE01 = p.SUBCODE01
    AND
   s2.SUBCODE02 = p.SUBCODE02
    AND
   s2.SUBCODE03 = p.SUBCODE03
    AND
   s2.SUBCODE04 = p.SUBCODE04
    AND
   s2.SUBCODE05 = p.SUBCODE05
    AND
   s2.SUBCODE06 = p.SUBCODE06
    AND
   s2.SUBCODE07 = p.SUBCODE07
    --    AND
    --   s2.SUBCODE08 = p.SUBCODE08;
    --   WHERE s.PROVISIONALCODE = 'CA2200017'
    -- WHERE s.SALESORDERCOUNTERCODE ='CAPITAL' --AND PROVISIONALCODE = 'CA2200017';


-- DB2ADMIN.ITXVIEW_SUB_JENISBENANG_TAS source

CREATE VIEW ITXVIEW_SUB_JENISBENANG_TAS AS
SELECT
    b.NUMBERID,
    b.SUBCODE01,
    b.SUBCODE02,
    b.SUBCODE03,
    b.SUBCODE04,
    --    b2.SEQUENCE,
    LISTAGG (
        '(' || TRIM(f.SUMMARIZEDDESCRIPTION) || ')'
    ) AS DESCRIP
FROM
    BILLOFMATERIAL b
LEFT JOIN BOMCOMPONENT b2 ON
    b2.BILLOFMATERIALNUMBERID = b.NUMBERID
LEFT JOIN FULLITEMKEYDECODER f ON
    f.SUBCODE01 = b2.SUBCODE01
    AND f.SUBCODE02 = b2.SUBCODE02
    AND f.SUBCODE03 = b2.SUBCODE03
    AND f.SUBCODE04 = b2.SUBCODE04
    AND f.SUBCODE05 = b2.SUBCODE05
    AND f.SUBCODE06 = b2.SUBCODE06
    AND f.SUBCODE07 = b2.SUBCODE07
    AND f.SUBCODE08 = b2.SUBCODE08
    --    WHERE b.SUBCODE01 = 'TC' AND b.SUBCODE02 = 'DKI' AND b.SUBCODE03 = 'D22113' AND b.SUBCODE04 = 'A01'
GROUP BY
    b.NUMBERID,
    b.SUBCODE01,
    b.SUBCODE02,
    b.SUBCODE03,
    b.SUBCODE04
    --    b2.SEQUENCE;


-- DB2ADMIN.ITXVIEW_SUB_KK_TAS source

CREATE VIEW ITXVIEW_SUB_KK_TAS AS
SELECT
    P1.CODE AS NO_DEMAND,
    P2.PRODUCTIONDEMANDCODE,
    P1.USERPRIMARYQUANTITY AS QTY,
    P1.USERSECONDARYQUANTITY AS QTY2,
    P1.USERSECONDARYUOMCODE AS SATUAN,
    P1.CUSTOMERCODE,
    ITXVIEW_JENISBENANG.DESCRIP,
    P1.SUBCODE01,
    P1.SUBCODE02,
    P1.SUBCODE03,
    P1.SUBCODE04,
    P1.SUBCODE05,
    P1.SUBCODE06,
    P1.SUBCODE07,
    P1.ABSUNIQUEID
FROM
    PRODUCTIONDEMAND P1
LEFT JOIN PRODUCTIONDEMANDSTEP P2 ON
    P1.CODE = P2.PRODUCTIONDEMANDCODE
LEFT JOIN ITXVIEW_JENISBENANG ITXVIEW_JENISBENANG ON
    P1.SUBCODE01 = ITXVIEW_JENISBENANG.SUBCODE01
    AND P1.SUBCODE02 = ITXVIEW_JENISBENANG.SUBCODE02
    AND P1.SUBCODE03 = ITXVIEW_JENISBENANG.SUBCODE03
    AND P1.SUBCODE04 = ITXVIEW_JENISBENANG.SUBCODE04
GROUP BY
    P1.CODE,
    P2.PRODUCTIONDEMANDCODE,
    P1.USERPRIMARYQUANTITY,
    P1.USERSECONDARYQUANTITY,
    P1.USERSECONDARYUOMCODE,
    P1.CUSTOMERCODE,
    ITXVIEW_JENISBENANG.DESCRIP,
    P1.SUBCODE03,
    P1.SUBCODE01,
    P1.SUBCODE02,
    P1.SUBCODE04,
    P1.SUBCODE05,
    P1.SUBCODE06,
    P1.SUBCODE07,
    P1.ABSUNIQUEID;


-- DB2ADMIN.ITXVIEW_SUB_SALESRELEASELINE source

CREATE VIEW ITXVIEW_SUB_SALESRELEASELINE AS
SELECT
    NO_SALES,
    NO_RELEASE,
    LINE_SALESRLS,
    NO_PO,
    NO_ITEM,
    WARNA,
    PROGRESSSTATUS,
    ORDER_KG,
    ORDER_YD,
    KK_WH,
    KK_LOTCODE,
    kk_kgs,
    kk_yds,
    KK_YD_FOC,
    KK_FOC,
    KET_FOC,
    JML_ROLL
FROM
    (
        SELECT
            SRL.PROJECTCODE AS NO_SALES,
            SRL.CODE AS NO_RELEASE,
            SRL.DLVSALESORDERLINEORDERLINE AS LINE_SALESRLS,
            CASE
                WHEN SOL.EXTERNALREFERENCE IS NOT NULL THEN SOL.EXTERNALREFERENCE
                ELSE SO.EXTERNALREFERENCE
            END AS NO_PO,
            CASE
                WHEN SRL.EXTERNALITEM IS NOT NULL THEN SRL.EXTERNALITEM
                ELSE TRIM(SRL.SUBCODE02) || ' ' || TRIM(SRL.SUBCODE03)
            END AS NO_ITEM,
            VIEWCOLOR.WARNA AS WARNA,
            SRL_QTY.PROGRESSSTATUS AS PROGRESSSTATUS,
            SRL_QTY.ORDER_KG AS ORDER_KG,
            SRL_QTY.ORDER_YD AS ORDER_YD,
            SRL_QTY.KK_WH AS KK_WH,
            ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.KK_LOTCODE AS KK_LOTCODE,
            A.USERPRIMARYQUANTITY AS kk_kgs,
            A.USERSECONDARYQUANTITY AS kk_yds,
            SALESRELEASELINE_FOC.KK_YD_FOC AS KK_YD_FOC,
            SALESRELEASELINE_FOC.KK_FOC AS KK_FOC,
            SALESRELEASELINE_FOC.KET_FOC AS KET_FOC,
            ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.JML_ROLL AS JML_ROLL
        FROM
            SALESRELEASELINE SRL
        LEFT JOIN SALESORDER SO ON
            SRL.PROJECTCODE = SO.CODE
        LEFT JOIN SALESORDERLINE SOL ON
            SO.CODE = SOL.SALESORDERCODE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION A
                WHERE
                    A.DETAILTYPE = '1'
            )A ON
            SRL.CODE = A.ORDERCODE
            AND SRL.PROJECTCODE = A.PROJECTCODE
            AND SRL.DLVSALESORDERLINEORDERLINE = SOL.ORDERLINE
            AND SOL.SUBCODE01 = A.DECOSUBCODE01
            AND SOL.SUBCODE02 = A.DECOSUBCODE02
            AND SOL.SUBCODE03 = A.DECOSUBCODE03
            AND SOL.SUBCODE04 = A.DECOSUBCODE04
            AND SOL.SUBCODE05 = A.DECOSUBCODE05
            AND SOL.SUBCODE06 = A.DECOSUBCODE06
            AND SOL.SUBCODE07 = A.DECOSUBCODE07
            AND SOL.SUBCODE08 = A.DECOSUBCODE08
        LEFT JOIN ITXVIEWCOLOR VIEWCOLOR ON
            SOL.SUBCODE01 = VIEWCOLOR.SUBCODE01
            AND SOL.SUBCODE02 = VIEWCOLOR.SUBCODE02
            AND SOL.SUBCODE03 = VIEWCOLOR.SUBCODE03
            AND SOL.SUBCODE04 = VIEWCOLOR.SUBCODE04
            AND SOL.SUBCODE05 = VIEWCOLOR.SUBCODE05
            AND SOL.SUBCODE06 = VIEWCOLOR.SUBCODE06
            AND SOL.SUBCODE07 = VIEWCOLOR.SUBCODE07
        LEFT JOIN ITXVIEW_SALESRELEASELINE_SUB_LOTCODE ITXVIEW_SALESRELEASELINE_SUB_LOTCODE ON
            A.CODE = ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.CODE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_FOC SALESRELEASELINE_FOC ON
            A.CODE = SALESRELEASELINE_FOC.ALLOCATION_CODE
        LEFT JOIN ITXVIEW_SALESRELEASELINE_QTY SRL_QTY ON
            SRL.CODE = SRL_QTY.NO_RELEASE
            AND SRL.PROJECTCODE = SRL_QTY.NO_ORDER
            AND ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.KK_LOTCODE = SRL_QTY.LOTCODE
        GROUP BY
            SRL.PROJECTCODE,
            SRL.CODE,
            SRL.DLVSALESORDERLINEORDERLINE,
            SOL.EXTERNALREFERENCE,
            SO.EXTERNALREFERENCE,
            SRL.EXTERNALITEM,
            SRL.SUBCODE02,
            SRL.SUBCODE03,
            VIEWCOLOR.WARNA,
            SRL_QTY.PROGRESSSTATUS,
            SRL_QTY.ORDER_KG,
            SRL_QTY.ORDER_YD,
            SRL_QTY.KK_WH,
            ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.KK_LOTCODE,
            A.USERPRIMARYQUANTITY,
            A.USERSECONDARYQUANTITY,
            SALESRELEASELINE_FOC.KK_YD_FOC,
            SALESRELEASELINE_FOC.KK_FOC,
            SALESRELEASELINE_FOC.KET_FOC,
            ITXVIEW_SALESRELEASELINE_SUB_LOTCODE.JML_ROLL
    );


-- DB2ADMIN.ITXVIEW_SUB_SALESRELEASELINE_KK_WH source

CREATE VIEW ITXVIEW_SUB_SALESRELEASELINE_KK_WH AS
SELECT
    code,
    lotcode AS KK_LOTCODE,
    --    WAREHOUSELOCATIONCODE AS KK_WH,
    LISTAGG(
        DISTINCT(
            TRIM(ITXVIEWALLOCATION0_SJEXIM.WAREHOUSELOCATIONCODE)
        ),
        ', '
    ) AS KK_WH
FROM
    ITXVIEWALLOCATION0_SJEXIM
    --        WHERE code = '000000104777'
GROUP BY
    code,
    lotcode
    --    WAREHOUSELOCATIONCODE;


-- DB2ADMIN.ITXVIEW_SUB_SURATJALAN_EXIM source

CREATE VIEW ITXVIEW_SUB_SURATJALAN_EXIM AS
SELECT
    DISTINCT
    --    ELEMENTCODE,
    PROVISIONALCODE,
    COMPANYCODE,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    COUNTERCODE,
    terms_shipping,
    CASE
        WHEN terms_shipping_description IS NULL THEN VESSEL_NM
        WHEN VESSEL_NM IS NULL THEN terms_shipping_description
        ELSE
    	terms_shipping_description || ' ' || VESSEL_NM
    END AS terms_shipping_description,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    CODE,
    ADDRESSEE,
    COLOR_DESC,
    COUNTRY_NM
    --    QUALITYREASONCODE
FROM
    (
        SELECT
            DISTINCT
            --        ITXVIEW_SURATJALAN_EXIM_FOC.ELEMENTCODE AS ELEMENTCODE,
            SALESDOCUMENT.PROVISIONALCODE AS PROVISIONALCODE,
            SALESDOCUMENT.COMPANYCODE,
            SALESDOCUMENT.TRANSPORTSTARTDATE AS TRANSPORTSTARTDATE,
            SALESORDER.COUNTERCODE AS jenis_order,
            --    COUNT_ORDER.JMLORDER,
            SALESDOCUMENT.PROVISIONALDOCUMENTDATE AS tgl_berangkat,
            CASE
                WHEN trim(SALESDOCUMENT.PROVISIONALDOCUMENTDATE) <= DATE('2022-08-15') THEN
			CASE
                    WHEN trim(SALESDOCUMENT.GOODSISSUEDATE) IS NOT NULL THEN trim(SALESDOCUMENT.GOODSISSUEDATE)
                    ELSE
        	trim(SALESDOCUMENT.PROVISIONALDOCUMENTDATE)
                END
                ELSE
    	trim(SALESDOCUMENT.GOODSISSUEDATE)
            END AS tanggal_berangkat,
            SALESDOCUMENT.GOODSISSUEDATE AS issue_date,
            --    SALESDOCUMENT.APPEARANCEDESCRIPTION,
            SALESDOCUMENT.NUMBERPLATE AS KET_SHIPPING,
            SALESDOCUMENT.TERMSOFSHIPPINGCODE AS TERMSOFSHIPPINGCODE,
            SALESDOCUMENT.TERMSOFSHIPPINGDESCRIPTION AS TERMSOFSHIPPINGDESCRIPTION,
            SALESDOCUMENT.PAYMENTMETHODCODE AS PAYMENTMETHODCODE,
            SALESDOCUMENTLINE.PRICE AS PRICE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE AS UNIT,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE AS ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE AS COUNTERCODE,
            CASE
                WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE = 'CO' THEN
    	'COURIER NAME'
                WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE IN ('SE') THEN
    	'CONTAINER'
                ELSE
    	''
            END AS terms_shipping,
            CASE
                WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE = 'CO' THEN
    	SALESDOCUMENT.NUMBERPLATE
                WHEN SALESDOCUMENT.TERMSOFSHIPPINGCODE IN ('SE') THEN
        SALESDOCUMENT.APPEARANCEDESCRIPTION
                ELSE
    	''
            END AS terms_shipping_description,
            ADS.VALUESTRING AS VESSEL_NM,
            SALESORDER.CODE AS PROJECTCODE,
            SALESDOCUMENTLINE.SUBCODE01 AS SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE05 AS SUBCODE05,
            SALESDOCUMENTLINE.EXTERNALREFERENCE AS EXTERNALREFERENCE,
            SALESDOCUMENTLINE.EXTERNALITEM AS EXTERNALITEM,
            SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE AS DLVSALORDERLINESALESORDERCODE,
            TRIM(ORDERPARTNERBRAND.LONGDESCRIPTION) AS BRAND_NM,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE AS CUSTOMERSUPPLIERCODE,
            ALLOCATION.CODE AS CODE,
            CASE
                WHEN SALESDOCUMENT.PROVISIONALCODE = 'POD2400341' THEN 'MAKALOT GARMENT CO.LTD'
                ELSE 
        	 	ADDRESS.ADDRESSEE
            END AS ADDRESSEE,
            CASE
                WHEN SALESDOCUMENT.PROVISIONALCODE = 'POD2400341' THEN NULL
                ELSE 
        	 USERGENERICGROUP.LONGDESCRIPTION
            END AS COLOR_DESC,
            COUNTRY.LONGDESCRIPTION AS COUNTRY_NM
        FROM
            SALESDOCUMENT SALESDOCUMENT
        LEFT JOIN SALESORDER SALESORDER ON
            SALESDOCUMENT.DELIVERYPOINTUNIQUEID = SALESORDER.DELIVERYPOINTUNIQUEID
            AND SALESDOCUMENT.COMPANYCODE = SALESORDER.COMPANYCODE
        LEFT JOIN ADDRESS ADDRESS ON
            SALESORDER.DELIVERYPOINTUNIQUEID = ADDRESS.UNIQUEID
            AND SALESORDER.DELIVERYPOINTCODE = ADDRESS.CODE
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            SALESDOCUMENT.FNCORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
        LEFT JOIN PAYMENTMETHOD PAYMENTMETHOD ON
            ORDERPARTNER.PAYMENTMETHODCODE = PAYMENTMETHOD.CODE
        LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
            SALESORDER.CODE = SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE
            AND SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
            AND SALESDOCUMENt.COMPANYCODE = SALESDOCUMENTLINE.SALESDOCUMENTCOMPANYCODE
            AND SALESDOCUMENT.PROVISIONALCOUNTERCODE = SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE
        LEFT JOIN USERGENERICGROUP USERGENERICGROUP ON
            SALESDOCUMENTLINE.SUBCODE05 = USERGENERICGROUP.CODE
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            ORDERPARTNER.CUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
            AND SALESORDER.COMPANYCODE = ORDERPARTNERBRAND.ORDPRNCSMSUPPLIERCOMPANYCODE
        LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
            ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
        LEFT JOIN COUNTRY COUNTRY ON
            ADDRESS.COUNTRYCODE = COUNTRY.CODE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '1'
                    AND ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
                    AND ALLOCATION.DESTINATIONTYPE = 7
            )ALLOCATION ON
            SALESDOCUMENTLINE.SUBCODE01 = ALLOCATION.DECOSUBCODE01
            AND
    SALESDOCUMENTLINE.SUBCODE02 = ALLOCATION.DECOSUBCODE02
            AND
    SALESDOCUMENTLINE.SUBCODE03 = ALLOCATION.DECOSUBCODE03
            AND
    SALESDOCUMENTLINE.SUBCODE04 = ALLOCATION.DECOSUBCODE04
            AND
    SALESDOCUMENTLINE.SUBCODE05 = ALLOCATION.DECOSUBCODE05
            AND
    SALESDOCUMENTLINE.SUBCODE06 = ALLOCATION.DECOSUBCODE06
            AND
    SALESDOCUMENTLINE.SUBCODE07 = ALLOCATION.DECOSUBCODE07
            AND
    SALESDOCUMENT.PROVISIONALCODE = ALLOCATION.ORDERCODE
            AND
    SALESDOCUMENTLINE.ORDERLINE = ALLOCATION.ORDERLINE
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ADSTORAGE ADS
                WHERE
                    ADS.NAMENAME = 'vesselname'
            )ADS ON
            SALESDOCUMENT.ABSUNIQUEID = ADS.UNIQUEID
            --LEFT JOIN ITXVIEW_SURATJALAN_EXIM_COUNT_JMLORDER COUNT_ORDER ON
            --    SALESDOCUMENT.PROVISIONALCODE = COUNT_ORDER.PROVISIONALCODE
        WHERE
            ALLOCATION.ORDERCODE IS NOT NULL
            --                                                		AND SALESDOCUMENT.PROVISIONALCODE = 'PSM2301135'
            --                            AND SALESDOCUMENTLINE.USERSECONDARYUOMCODE ='un'
        GROUP BY
            SALESDOCUMENT.PROVISIONALCODE,
            SALESDOCUMENT.COMPANYCODE,
            SALESDOCUMENT.TRANSPORTSTARTDATE,
            SALESORDER.COUNTERCODE,
            SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
            SALESDOCUMENT.GOODSISSUEDATE,
            SALESDOCUMENT.APPEARANCEDESCRIPTION,
            SALESDOCUMENT.NUMBERPLATE,
            SALESDOCUMENT.TERMSOFSHIPPINGCODE,
            SALESDOCUMENT.TERMSOFSHIPPINGDESCRIPTION,
            SALESDOCUMENT.PAYMENTMETHODCODE,
            SALESDOCUMENTLINE.PRICE,
            SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
            SALESDOCUMENTLINE.ITEMTYPEAFICODE,
            SALESDOCUMENTLINE.SALDOCPROVISIONALCOUNTERCODE,
            SALESORDER.CODE,
            SALESDOCUMENTLINE.SUBCODE01,
            SALESDOCUMENTLINE.SUBCODE05,
            SALESDOCUMENTLINE.EXTERNALREFERENCE,
            SALESDOCUMENTLINE.EXTERNALITEM,
            SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
            ADS.VALUESTRING,
            ORDERPARTNERBRAND.LONGDESCRIPTION,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE,
            ALLOCATION.CODE,
            ALLOCATION.ALLOCATIONDATE,
            ALLOCATION.ORDERCODE,
            ALLOCATION.ORDERLINE,
            ADDRESS.ADDRESSEE,
            USERGENERICGROUP.LONGDESCRIPTION,
            COUNTRY.LONGDESCRIPTION
    )
    --        WHERE PROVISIONALCODE = 'PSM2301135';


-- DB2ADMIN.ITXVIEW_SUMSALESORDER source

CREATE VIEW ITXVIEW_SUMSALESORDER AS
SELECT
    o.LONGDESCRIPTION AS BUYER,
    MONTH(s.ORDERDATE) AS BULAN,
    YEAR(s.ORDERDATE) AS TAHUN,
    SUM(s2.NETTO) AS SUM_NETTO,
    SUM(s2.NETTO_SS) AS SUM_NETTO_SS
FROM
    SALESORDER s
LEFT JOIN ORDERPARTNERBRAND o ON
    o.ORDPRNCUSTOMERSUPPLIERCODE = s.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            s2.SALESORDERCODE,
            COUNT(s2.SALESORDERCODE) AS COUNTLINE,
            --        SUM(s2.USERPRIMARYQUANTITY) AS NETTO
        CASE
                WHEN s2.LINETEMPLATECODE IN (
                    'SME', 'SMD'
                )
        	THEN SUM(s2.USERPRIMARYQUANTITY)
            END AS NETTO_SS,
            CASE
                WHEN s2.LINETEMPLATECODE NOT IN (
                    'SME', 'SMD'
                )
        	THEN SUM(s2.USERPRIMARYQUANTITY)
            END AS NETTO
        FROM
            SALESORDERLINE s2
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = s2.ABSUNIQUEID
            AND a.NAMENAME = 'SampleComments5'
        WHERE
            s2.LINESTATUS = 1
            AND s2.LINETEMPLATECODE NOT IN (
                'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
            )
        GROUP BY
            s2.SALESORDERCODE,
            s2.LINETEMPLATECODE,
            a.NAMENAME
    )s2 ON
    s2.SALESORDERCODE = s.CODE
WHERE
    CURRENTSTATUS = 1
    --AND  YEAR(s.ORDERDATE) = 2023
    --AND  o.LONGDESCRIPTION = 'ADIDAS'
GROUP BY
    o.LONGDESCRIPTION,
    MONTH(s.ORDERDATE),
    YEAR(s.ORDERDATE);


-- DB2ADMIN.ITXVIEW_SUMSALESORDER_BRUTO source

CREATE VIEW ITXVIEW_SUMSALESORDER_BRUTO AS
SELECT
    BUYER,
    MONTH(ORDERDATE) AS BULAN,
    YEAR(ORDERDATE) AS TAHUN,
    SUM(BRUTO) AS SUM_BRUTO,
    SUM(BRUTO_SS) AS SUM_BRUTO_SS
FROM
    (
        SELECT
            p.ORIGDLVSALORDLINESALORDERCODE AS PROJECTCODE,
            a.NAMENAME,
            a.VALUESTRING,
            p.ORDERDATE,
            o.LONGDESCRIPTION AS BUYER,
            p2.USERPRIMARYUOMCODE AS UOMCODE,
            CASE
                WHEN s.LINETEMPLATECODE IN (
                    'SME', 'SMD'
                )
        	THEN SUM(p2.USERPRIMARYQUANTITY)
            END AS BRUTO_SS,
            CASE
                WHEN s.LINETEMPLATECODE NOT IN (
                    'SME', 'SMD'
                )
        	THEN SUM(p2.USERPRIMARYQUANTITY)
            END AS BRUTO
        FROM
            PRODUCTIONDEMAND p
        LEFT JOIN PRODUCTIONRESERVATION p2 ON
            p2.ORDERCODE = p.CODE
        LEFT JOIN SALESORDERLINE s ON
            s.SALESORDERCODE = p.ORIGDLVSALORDLINESALORDERCODE
            AND s.ORDERLINE = p.ORIGDLVSALORDERLINEORDERLINE
        LEFT JOIN SALESORDER s2 ON
            s2.CODE = s.SALESORDERCODE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = p.ABSUNIQUEID
            AND a.NAMENAME = 'OriginalPDCode'
        LEFT JOIN ORDERPARTNERBRAND o ON
            o.ORDPRNCUSTOMERSUPPLIERCODE = s2.ORDPRNCUSTOMERSUPPLIERCODE
        WHERE
            (
                p2.ITEMTYPEAFICODE = 'KGF'
                    OR p2.ITEMTYPEAFICODE = 'FKG'
            )
            AND (
                p.ITEMTYPEAFICODE = 'KFF'
                    OR p.ITEMTYPEAFICODE = 'FKF'
            )
            AND p2.PRODUCTIONORDERCODE IS NOT NULL
            AND s.LINETEMPLATECODE NOT IN (
                'CAP', 'CWD', 'CWE', 'ENQ', 'LAB', 'STO', 'TAS'
            )
        GROUP BY
            p.ORIGDLVSALORDLINESALORDERCODE,
            p2.USERPRIMARYUOMCODE,
            o.LONGDESCRIPTION,
            p.ORDERDATE,
            s.LINETEMPLATECODE,
            a.NAMENAME,
            a.VALUESTRING
    )
WHERE
    NAMENAME IS NULL
    --	AND  YEAR(ORDERDATE) = 2023
    --	AND BUYER = 'ADIDAS'
GROUP BY 
    BUYER,
    MONTH(ORDERDATE),
    YEAR(ORDERDATE);


-- DB2ADMIN.ITXVIEW_SUMSALESORDER_SA source

CREATE VIEW ITXVIEW_SUMSALESORDER_SA AS
SELECT
    --    o.LONGDESCRIPTION AS BUYER,
    s.CREATIONUSER AS SALES_ASISSTANT,
    MONTH(s.ORDERDATE) AS BULAN,
    YEAR(s.ORDERDATE) AS TAHUN,
    ROUND(SUM(s2.NETTO), 2) AS SUM_NETTO
FROM
    SALESORDER s
    --LEFT JOIN ORDERPARTNERBRAND o ON
    --    o.ORDPRNCUSTOMERSUPPLIERCODE = s.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            s2.SALESORDERCODE,
            COUNT(s2.SALESORDERCODE) AS COUNTLINE,
            SUM(s2.USERPRIMARYQUANTITY) AS NETTO
        FROM
            SALESORDERLINE s2
        GROUP BY
            s2.SALESORDERCODE
    )s2 ON
    s2.SALESORDERCODE = s.CODE
GROUP BY
    --    o.LONGDESCRIPTION,
    s.CREATIONUSER,
    MONTH(s.ORDERDATE),
    YEAR(s.ORDERDATE);


-- DB2ADMIN.ITXVIEW_SURATJALAN_BENANG_RETUR source

CREATE VIEW ITXVIEW_SURATJALAN_BENANG_RETUR AS 
SELECT
    B.INTDOCUMENTPROVISIONALCODE,
    B.ITEMDESCRIPTION,
    B.USERPRIMARYQUANTITY,
    B.USERSECONDARYQUANTITY,
    P.LONGDESCRIPTION AS JENIS_BENANG,
    ST.LOTCODE,
    ID_USER.FIRST_ AS TTD_HORMAT_KAMI
    --	B.SUBCODE01,
    --	B.SUBCODE02,
    --	B.SUBCODE03,
    --	B.SUBCODE04,
    --	B.SUBCODE05,
    --	B.SUBCODE06,
    --	B.SUBCODE07 
FROM
    INTERNALDOCUMENT A
LEFT JOIN INTERNALDOCUMENTLINE B ON
    A.PROVISIONALCODE = B.INTDOCUMENTPROVISIONALCODE
LEFT JOIN PRODUCT P ON
    B.SUBCODE01 = P.SUBCODE01
    AND
B.SUBCODE02 = P.SUBCODE02
    AND
B.SUBCODE03 = P.SUBCODE03
    AND
B.SUBCODE04 = P.SUBCODE04
    AND
B.SUBCODE05 = P.SUBCODE05
    AND
B.SUBCODE06 = P.SUBCODE06
    AND
B.SUBCODE07 = P.SUBCODE07
LEFT JOIN (
        SELECT
            *
        FROM
            STOCKTRANSACTION ST
        WHERE
            ST.TEMPLATECODE = '203'
            AND ST.TOKENCODE IS NULL
    )ST ON
    B.INTDOCUMENTPROVISIONALCODE = ST.ORDERCODE
    AND
B.ORDERLINE = ST.ORDERLINE
LEFT JOIN ACT_ID_USER ID_USER ON
    B.CREATIONUSER = ID_USER.ID_
WHERE
    A.ORDPRNCUSTOMERSUPPLIERCODE = 'P503'
    --    	AND B.INTDOCUMENTPROVISIONALCODE in ('I2M0122002273')--,'I2M0122002275')
GROUP BY
    B.INTDOCUMENTPROVISIONALCODE,
    B.ITEMDESCRIPTION,
    B.USERPRIMARYQUANTITY,
    B.USERSECONDARYQUANTITY,
    P.LONGDESCRIPTION,
    ST.LOTCODE,
    ID_USER.FIRST_;


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM AS
SELECT
    PROVISIONALCODE,
    code,
    elementcode,
    LOTCODE,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    terms_shipping,
    terms_shipping_description,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    ADDRESSEE,
    COLOR_DESC,
    COUNTRY_NM,
    QUALITYREASONCODE,
    jml_roll,
    jml_kg,
    jml_yd,
    jml_gw
FROM
    (
        SELECT
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.CODE AS code,
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE AS elementcode,
            ITXVIEW_DETAIL_EXIM.LOTCODE AS LOTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE,
            count(ITXVIEW_DETAIL_EXIM.CODE) AS jml_roll,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY * 0
                ELSE ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY
            END AS jml_kg,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2) * 0
                ELSE round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2)
            END AS jml_yd,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN (
                    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY + 0.6
                ) * 0
                ELSE ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY + 0.6
            END AS jml_gw
        FROM
            ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
        LEFT JOIN ITXVIEW_SUB_SURATJALAN_EXIM ITXVIEW_SUB_SURATJALAN_EXIM ON
            ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE = ITXVIEW_DETAIL_EXIM.PROVISIONALCODE
            AND ITXVIEW_SUB_SURATJALAN_EXIM.CODE = ITXVIEW_DETAIL_EXIM.CODE
        LEFT JOIN ELEMENTSINSPECTION E ON
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE = E.ELEMENTCODE
        GROUP BY
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.CODE,
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE,
            ITXVIEW_DETAIL_EXIM.LOTCODE,
            ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY,
            ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM. SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE
    );


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM2 source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM2 AS
SELECT
    DISTINCT PROVISIONALCODE,
    ALLOCATIONCODE ,
    ITEMELEMENTCODE,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    terms_shipping,
    terms_shipping_description,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    ADDRESSEE,
    COLOR_DESC,
    COUNTRY_NM,
    QUALITYREASONCODE,
    USERPRIMARYUOMCODE,
    QTY_KG,
    CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN BASESECONDARYQUANTITY
        WHEN USERSECONDARYUOMCODE = 'yd' THEN USERSECONDARYQUANTITY
        ELSE 0
    END QTY_YARDMETER,
    USERSECONDARYUOMCODE,
    CASE
        WHEN USERSECONDARYUOMCODE IN ('un') THEN qty_pcs
        ELSE 0
    END QTY_PCS,
    BASEPRIMARYUOMCODE,
    COUNTROLL,
    COUNTBALL,
    FOC_KG,
    CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN FOC_METER
        WHEN USERSECONDARYUOMCODE = 'yd' THEN FOC_YD
        ELSE 0
    END FOC_YARDMETER,
    JML_ROLL_FOC,
    COUNTERCODE
FROM
    (
        SELECT
            DISTINCT ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE,
            ALLOCATION.CODE AS ALLOCATIONCODE,
            ALLOCATION.ITEMELEMENTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE AS QUALITYREASONCODE,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE = 'DREPROV ' THEN ALLOCATION.USERPRIMARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                ELSE ALLOCATION.USERPRIMARYQUANTITY
            END AS QTY_KG,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE = 'DREPROV ' THEN ALLOCATION.USERSECONDARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                ELSE ALLOCATION.USERSECONDARYQUANTITY
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ROUND(ALLOCATION.BASESECONDARYQUANTITY * 0.9144, 2)
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                ELSE ROUND(ALLOCATION.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            ALLOCATION.USERPRIMARYUOMCODE AS USERPRIMARYUOMCODE,
            ALLOCATION.USERSECONDARYUOMCODE AS USERSECONDARYUOMCODE,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ALLOCATION.USERSECONDARYUSEDQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(ALLOCATION.USERSECONDARYUSEDQUANTITY , 2)
                WHEN ALLOCATION.ITEMTYPECODE = 'CAP'
                AND ALLOCATION.BASEPRIMARYUOMCODE IN (
                    'Lot', 'un'
                ) THEN ALLOCATION.BASEPRIMARYQUANTITY
                ELSE ALLOCATION.BASESECONDARYQUANTITY
            END qty_pcs,
            ALLOCATION.BASEPRIMARYUOMCODE,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'KFF' THEN COUNT(ALLOCATION.ITEMELEMENTCODE)
                ELSE 0
            END AS COUNTROLL,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'FKF' THEN COUNT(ALLOCATION.ITEMELEMENTCODE)
                ELSE 0
            END AS COUNTBALL,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ALLOCATION.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ALLOCATION.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YD,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ROUND(ALLOCATION.BASESECONDARYQUANTITY * 0.9144, 2)
                ELSE 0
            END AS FOC_METER,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN COUNT(E.QUALITYREASONCODE)
                ELSE 0
            END AS JML_ROLL_FOC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE
        FROM
            ITXVIEW_SUB_SURATJALAN_EXIM ITXVIEW_SUB_SURATJALAN_EXIM
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '0'
            )ALLOCATION ON
            ITXVIEW_SUB_SURATJALAN_EXIM.CODE = ALLOCATION.CODE
        LEFT JOIN ELEMENTS E ON
            ALLOCATION.ITEMELEMENTCODE = E.CODE
        WHERE
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
        GROUP BY
            ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE,
            ALLOCATION.CODE,
            ALLOCATION.ITEMELEMENTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE,
            ALLOCATION.ITEMELEMENTCODE,
            E.QUALITYREASONCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.BASESECONDARYQUANTITY,
            ALLOCATION.USERPRIMARYQUANTITY,
            ALLOCATION.USERPRIMARYUOMCODE,
            ALLOCATION.USERSECONDARYQUANTITY,
            ALLOCATION.USERSECONDARYUOMCODE,
            ALLOCATION.BASEPRIMARYUOMCODE,
            ALLOCATION.BASEPRIMARYQUANTITY,
            ALLOCATION.USERSECONDARYUSEDQUANTITY
    );


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM2A source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM2A AS
SELECT
    DISTINCT
    PROVISIONALCODE,
    COMPANYCODE,
    ALLOCATIONCODE ,
    ITEMELEMENTCODE,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    terms_shipping,
    terms_shipping_description,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    ADDRESSEE,
    --    COLOR_DESC,
    COUNTRY_NM,
    QUALITYREASONCODE,
    USERPRIMARYUOMCODE,
    QTY_KG,
     CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN BASESECONDARYQUANTITY
        WHEN USERSECONDARYUOMCODE = 'yd' THEN USERSECONDARYQUANTITY
        ELSE 0
    END QTY_YARDMETER,
    USERSECONDARYUOMCODE,
    CASE
        WHEN USERSECONDARYUOMCODE IN ('un') THEN qty_pcs
        ELSE 0
    END QTY_PCS,
    BASESECONDARYUOMCODE,
    CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN 'Meter'
        WHEN USERSECONDARYUOMCODE = 'yd' THEN 'Yards'
        ELSE ''
    END KET_YARDMETER,
    FOC_KG,
    CASE
        WHEN USERSECONDARYUOMCODE = 'm' THEN FOC_METER
        WHEN USERSECONDARYUOMCODE = 'yd' THEN FOC_YD
        ELSE 0
    END FOC_YARDMETER,
    JML_ROLL_FOC,
    COUNTROLL,
    COUNTBALL,
    COUNTERCODE
FROM
    (
        SELECT
            DISTINCT
        ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COMPANYCODE,
            ALLOCATION.CODE AS ALLOCATIONCODE,
            ALLOCATION.ITEMELEMENTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE AS QUALITYREASONCODE,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE = 'DREPROV ' THEN ALLOCATION.USERPRIMARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE <> 'DREPROV ' THEN 0
                ELSE ALLOCATION.USERPRIMARYQUANTITY
            END AS QTY_KG,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE = 'DREPROV ' THEN ALLOCATION.USERSECONDARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE <> 'DREPROV ' THEN 0
                ELSE ALLOCATION.USERSECONDARYQUANTITY
            END AS USERSECONDARYQUANTITY,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ALLOCATION.BASESECONDARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                ELSE ROUND(ALLOCATION.BASESECONDARYQUANTITY * 0.9144, 2)
            END BASESECONDARYQUANTITY,
            trim(ALLOCATION.USERPRIMARYUOMCODE) AS USERPRIMARYUOMCODE,
            trim(ALLOCATION.USERSECONDARYUOMCODE) AS USERSECONDARYUOMCODE,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'DREDEF', 'DREPROV', 'DRDDEF', 'DRPPROV'
                ) THEN ALLOCATION.BASESECONDARYQUANTITY
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN 0
                WHEN ALLOCATION.ITEMTYPECODE <> 'CAP' THEN round(ALLOCATION.BASESECONDARYQUANTITY , 2)
                WHEN ALLOCATION.ITEMTYPECODE = 'CAP'
                AND ALLOCATION.BASEPRIMARYUOMCODE IN (
                    'Lot', 'un'
                ) THEN ALLOCATION.BASEPRIMARYQUANTITY
                ELSE ALLOCATION.BASESECONDARYQUANTITY
            END qty_pcs,
            TRIM(ALLOCATION.BASESECONDARYUOMCODE) BASESECONDARYUOMCODE ,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'KFF' THEN COUNT(ALLOCATION.ITEMELEMENTCODE)
                ELSE 0
            END AS COUNTROLL,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'FKF' THEN COUNT(ALLOCATION.ITEMELEMENTCODE)
                ELSE 0
            END AS COUNTBALL,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ALLOCATION.USERPRIMARYQUANTITY
                ELSE 0
            END AS FOC_KG,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ALLOCATION.USERSECONDARYQUANTITY
                ELSE 0
            END AS FOC_YD,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN ROUND(ALLOCATION.BASESECONDARYQUANTITY * 0.9144, 2)
                ELSE 0
            END AS FOC_METER,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC'
                AND ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE IN(
                    'EXDPROV', 'EXPPROV', 'PFEPROV'
                ) THEN COUNT(E.QUALITYREASONCODE)
                ELSE 0
            END AS JML_ROLL_FOC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE
        FROM
            ITXVIEW_SUB_SURATJALAN_EXIM ITXVIEW_SUB_SURATJALAN_EXIM
        LEFT JOIN (
                SELECT
                    *
                FROM
                    ALLOCATION ALLOCATION
                WHERE
                    ALLOCATION.DETAILTYPE = '0'
            )ALLOCATION ON
            ITXVIEW_SUB_SURATJALAN_EXIM.CODE = ALLOCATION.CODE
            AND ITXVIEW_SUB_SURATJALAN_EXIM.COMPANYCODE = ALLOCATION.COMPANYCODE
        LEFT JOIN ELEMENTS E ON
            ALLOCATION.ITEMELEMENTCODE = E.CODE
            AND ITXVIEW_SUB_SURATJALAN_EXIM.COMPANYCODE = E.COMPANYCODE
        WHERE
            ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
            --                                    	AND ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE IN('PSM2301135')
            --    	AND ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE LIKE '%ESP22003%'
        GROUP BY
            ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COMPANYCODE,
            ALLOCATION.CODE,
            ALLOCATION.ITEMELEMENTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COLOR_DESC,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTERCODE,
            ALLOCATION.ITEMELEMENTCODE,
            E.QUALITYREASONCODE,
            ALLOCATION.ITEMTYPECODE,
            ALLOCATION.BASESECONDARYQUANTITY,
            ALLOCATION.USERPRIMARYQUANTITY,
            ALLOCATION.USERPRIMARYUOMCODE,
            ALLOCATION.USERSECONDARYQUANTITY,
            ALLOCATION.USERSECONDARYUOMCODE,
            ALLOCATION.BASESECONDARYUOMCODE,
            ALLOCATION.BASEPRIMARYQUANTITY,
            allocation.BASEPRIMARYUOMCODE,
            ALLOCATION.USERSECONDARYUSEDQUANTITY
    )
    --        WHERE PROVISIONALCODE ='PSM2301135';


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM3 source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM3 AS
SELECT
    DISTINCT PROVISIONALCODE,
    CODE,
    elementcode,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    terms_shipping,
    terms_shipping_description,
    lc_number,
    IssuingBank,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    ADDRESSEE,
    COUNTRY_NM,
    COUNTROLL,
    COUNTBALL,
    QTY_KG,
    CASE
        WHEN ITEMTYPEAFICODE = 'KFF' THEN QTY_YARD
        ELSE 0
    END AS QTY_YARD,
    CASE
        WHEN ITEMTYPEAFICODE = 'FKF' THEN QTY_YARD
        ELSE 0
    END AS QTY_PCS,
    QUALITYREASONCODE
FROM
    (
        SELECT
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.CODE AS code,
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE AS elementcode,
            ITXVIEW_DETAIL_EXIM.LOTCODE AS LOTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            a.VALUESTRING AS lc_number,
            a2.VALUESTRING AS IssuingBank,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE,
            count(ITXVIEW_DETAIL_EXIM.CODE) AS jml_roll,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'KFF' THEN 1
                ELSE 0
            END AS COUNTROLL,
            CASE
                WHEN ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE = 'FKF' THEN 1
                ELSE 0
            END AS COUNTBALL,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY * 0
                ELSE ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY
            END AS QTY_KG,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2) * 0
                ELSE round(ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY, 2)
            END AS QTY_YARD,
            CASE
                WHEN E.QUALITYREASONCODE = 'FOC' THEN (
                    ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY + 0.6
                ) * 0
                ELSE ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY + 0.6
            END AS jml_gw
        FROM
            ITXVIEW_DETAIL_EXIM ITXVIEW_DETAIL_EXIM
        LEFT JOIN ITXVIEW_SUB_SURATJALAN_EXIM ITXVIEW_SUB_SURATJALAN_EXIM ON
            ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE = ITXVIEW_DETAIL_EXIM.PROVISIONALCODE
            AND ITXVIEW_SUB_SURATJALAN_EXIM.CODE = ITXVIEW_DETAIL_EXIM.CODE
        LEFT JOIN ELEMENTSINSPECTION E ON
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE = E.ELEMENTCODE
        LEFT JOIN SALESDOCUMENT s ON
            s.PROVISIONALCODE = ITXVIEW_DETAIL_EXIM.PROVISIONALCODE
        LEFT JOIN ADSTORAGE a ON
            a.UNIQUEID = s.ABSUNIQUEID
            AND a.NAMENAME = 'LCNumber'
        LEFT JOIN ADSTORAGE a2 ON
            a2.UNIQUEID = s.ABSUNIQUEID
            AND a2.NAMENAME = 'IssuingBank'
        GROUP BY
            ITXVIEW_DETAIL_EXIM.PROVISIONALCODE,
            ITXVIEW_DETAIL_EXIM.CODE,
            ITXVIEW_DETAIL_EXIM.ITEMELEMENTCODE,
            ITXVIEW_DETAIL_EXIM.LOTCODE,
            ITXVIEW_DETAIL_EXIM.USERPRIMARYQUANTITY,
            ITXVIEW_DETAIL_EXIM.USERSECONDARYQUANTITY,
            ITXVIEW_SUB_SURATJALAN_EXIM.TRANSPORTSTARTDATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.JENIS_ORDER,
            ITXVIEW_SUB_SURATJALAN_EXIM.TGL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.TANGGAL_BERANGKAT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ISSUE_DATE,
            ITXVIEW_SUB_SURATJALAN_EXIM.KET_SHIPPING,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.TERMSOFSHIPPINGDESCRIPTION,
            ITXVIEW_SUB_SURATJALAN_EXIM.PAYMENTMETHODCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.PRICE,
            ITXVIEW_SUB_SURATJALAN_EXIM.UNIT,
            ITXVIEW_SUB_SURATJALAN_EXIM.ITEMTYPEAFICODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping,
            ITXVIEW_SUB_SURATJALAN_EXIM.terms_shipping_description,
            a.VALUESTRING,
            a2.VALUESTRING,
            ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE01,
            ITXVIEW_SUB_SURATJALAN_EXIM.SUBCODE05,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALREFERENCE,
            ITXVIEW_SUB_SURATJALAN_EXIM.EXTERNALITEM,
            ITXVIEW_SUB_SURATJALAN_EXIM.DLVSALORDERLINESALESORDERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.BRAND_NM,
            ITXVIEW_SUB_SURATJALAN_EXIM.CUSTOMERSUPPLIERCODE,
            ITXVIEW_SUB_SURATJALAN_EXIM.ADDRESSEE,
            ITXVIEW_SUB_SURATJALAN_EXIM.COUNTRY_NM,
            E.QUALITYREASONCODE
    )
GROUP BY
    PROVISIONALCODE,
    CODE,
    elementcode,
    TRANSPORTSTARTDATE,
    JENIS_ORDER,
    TGL_BERANGKAT,
    TANGGAL_BERANGKAT,
    ISSUE_DATE,
    KET_SHIPPING,
    TERMSOFSHIPPINGCODE,
    TERMSOFSHIPPINGDESCRIPTION,
    PAYMENTMETHODCODE,
    PRICE,
    UNIT,
    ITEMTYPEAFICODE,
    terms_shipping,
    terms_shipping_description,
    lc_number,
    IssuingBank,
    PROJECTCODE,
    SUBCODE01,
    SUBCODE05,
    EXTERNALREFERENCE,
    EXTERNALITEM,
    DLVSALORDERLINESALESORDERCODE,
    BRAND_NM,
    CUSTOMERSUPPLIERCODE,
    ADDRESSEE,
    COUNTRY_NM,
    COUNTROLL,
    COUNTBALL,
    QTY_KG,
    QTY_YARD,
    QUALITYREASONCODE;


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM_COUNT_JMLORDER source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM_COUNT_JMLORDER AS
SELECT
    SD.PROVISIONALCODE,
    COUNT(ITXVIEW_SUB_SURATJALAN_EXIM.PROJECTCODE) AS JMLORDER
FROM
    SALESDOCUMENT SD
LEFT JOIN ITXVIEW_SUB_SURATJALAN_EXIM ITXVIEW_SUB_SURATJALAN_EXIM ON
    SD.PROVISIONALCODE = ITXVIEW_SUB_SURATJALAN_EXIM.PROVISIONALCODE
GROUP BY
    SD.PROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_SURATJALAN_EXIM_FOC source

CREATE VIEW ITXVIEW_SURATJALAN_EXIM_FOC AS
SELECT
    ALLOCATION.LOTCODE,
    ALLOCATION.CODE,
    ALLOCATION.USERPRIMARYQUANTITY,
    ROUND(ALLOCATION.USERSECONDARYQUANTITY, 2) AS USERSECONDARYQUANTITY,
    ALLOCATION.ITEMELEMENTCODE,
    ITXVIEW_PACKINGLIST_EXIM.PROVISIONALCODE,
    ALLOCATION.PROJECTCODE,
    E.QUALITYREASONCODE,
    E.ELEMENTCODE
FROM
    ITXVIEW_PACKINGLIST_EXIM ITXVIEW_PACKINGLIST_EXIM
LEFT JOIN (
        SELECT
            *
        FROM
            ALLOCATION ALLOCATION
        WHERE
            ALLOCATION.DETAILTYPE = '0'
    )ALLOCATION ON
    ITXVIEW_PACKINGLIST_EXIM.CODE = ALLOCATION.CODE
LEFT JOIN ELEMENTSINSPECTION E ON
    ALLOCATION.ITEMELEMENTCODE = E.ELEMENTCODE
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL;


-- DB2ADMIN.ITXVIEW_SURATJALAN_PPC source

CREATE VIEW ITXVIEW_SURATJALAN_PPC AS
SELECT
    DISTINCT 
    SUBSTR(SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE, 1, 3) AS TIPE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    BUSINESSPARTNER.ADDRESSFAXNUMBER,
    ALLOCATION.CODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.BASESECONDARYUOMCODE,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE1,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE2,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE3,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTPOSTALCODE,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTTOWN,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTDISTRICT,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.ABSUNIQUEID,
    CASE
        WHEN SALESDOCUMENTLINE.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENT.EXTERNALREFERENCE
        ELSE SALESDOCUMENTLINE.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    TRIM(SALESDOCUMENTLINE.SUBCODE05) AS SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    CASE
        WHEN a.VALUESTRING IS NOT NULL THEN CAST(
            a.VALUESTRING AS decimal(5)
        )
        ELSE CAST(
            SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE AS decimal(5)
        )
    END DLVSALESORDERLINEORDERLINE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.CURRENCYCODE,
    SALESDOCUMENTLINE.PRICE,
    SALESDOCUMENTLINE.PRICEUNITOFMEASURECODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    BUSINESSPARTNER BUSINESSPARTNER
LEFT JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ALLOCATION ALLOCATION ON
    ALLOCATION.CUSTOMERCODE = CUSTOMERSUPPLIERDATA.CODE
RIGHT JOIN WRKDOCUMENTPRINT WRKDOCUMENTPRINT ON
    WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE = ALLOCATION.ORDERCODE
RIGHT JOIN SALESDOCUMENT SALESDOCUMENT ON
    SALESDOCUMENT.PROVISIONALCODE = WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    ALLOCATION.ORDERCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
    AND ALLOCATION.ORDERLINE = SALESDOCUMENTLINE.ORDERLINE
    AND ALLOCATION.ITEMTYPECODE = SALESDOCUMENTLINE.ITEMTYPEAFICODE
    AND ALLOCATION.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND ALLOCATION.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND ALLOCATION.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND ALLOCATION.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND ALLOCATION.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND ALLOCATION.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND ALLOCATION.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND ALLOCATION.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND ALLOCATION.DECOSUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
    AND ALLOCATION.DECOSUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
LEFT OUTER JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN SALESORDERLINE s ON
    s.SALESORDERCODE = SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE
    AND s.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s.ABSUNIQUEID
    AND a.NAMENAME = 'SampleComments5'
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    --    AND SALESDOCUMENT.PROVISIONALCODE = 'PCA2400002'
    --    AND SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE = 'DOM2300265';


-- DB2ADMIN.ITXVIEW_SURATJALAN_PPCNEW source

CREATE VIEW ITXVIEW_SURATJALAN_PPCNEW AS
SELECT 
    ALLOCATION.CODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.BASESECONDARYUOMCODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
    BUSINESSPARTNER.LEGALNAME1 AS LANGGANAN,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    BUSINESSPARTNER.ADDRESSFAXNUMBER,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.CURRENCYCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENTLINE.PRICE
FROM
    ALLOCATION ALLOCATION
LEFT JOIN 
	SALESDOCUMENT SALESDOCUMENT ON
    ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN 
	SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    ALLOCATION.PROJECTCODE = SALESDOCUMENTLINE.PROJECTCODE
    AND 
	ALLOCATION.DECOSUBCODE01 = SALESDOCUMENTLINE.SUBCODE01
    AND 
	ALLOCATION.DECOSUBCODE02 = SALESDOCUMENTLINE.SUBCODE02
    AND
	ALLOCATION.DECOSUBCODE03 = SALESDOCUMENTLINE.SUBCODE03
    AND
	ALLOCATION.DECOSUBCODE04 = SALESDOCUMENTLINE.SUBCODE04
    AND
	ALLOCATION.DECOSUBCODE05 = SALESDOCUMENTLINE.SUBCODE05
    AND
	ALLOCATION.DECOSUBCODE06 = SALESDOCUMENTLINE.SUBCODE06
    AND
	ALLOCATION.DECOSUBCODE07 = SALESDOCUMENTLINE.SUBCODE07
    AND
	ALLOCATION.DECOSUBCODE08 = SALESDOCUMENTLINE.SUBCODE08
    AND
	ALLOCATION.DECOSUBCODE09 = SALESDOCUMENTLINE.SUBCODE09
    AND
	ALLOCATION.DECOSUBCODE10 = SALESDOCUMENTLINE.SUBCODE10
    AND 
	SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE;


-- DB2ADMIN.ITXVIEW_SURATJALAN_PPCX source

CREATE VIEW ITXVIEW_SURATJALAN_PPCX AS
SELECT
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    BUSINESSPARTNER.ADDRESSFAXNUMBER,
    ITXVIEWALLOCATION0.LOTCODE,
    ALLOCATION.THEORETICISSUEDATE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.BASESECONDARYUOMCODE,
    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE1,
    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE2,
    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE3,
    WRKDOCUMENTPRINT.DELIVERYPOINTPOSTALCODE,
    WRKDOCUMENTPRINT.DELIVERYPOINTTOWN,
    WRKDOCUMENTPRINT.DELIVERYPOINTDISTRICT,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENTLINE.EXTERNALREFERENCE,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    SALESDOCUMENT.CURRENCYCODE,
    SALESDOCUMENTLINE.PRICE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    BUSINESSPARTNER BUSINESSPARTNER
LEFT OUTER JOIN DB2ADMIN.CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    BUSINESSPARTNER.NUMBERID = CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID
LEFT OUTER JOIN DB2ADMIN.ALLOCATION ALLOCATION ON
    CUSTOMERSUPPLIERDATA.CODE = ALLOCATION.CUSTOMERCODE
RIGHT OUTER JOIN DB2ADMIN.WRKDOCUMENTPRINT WRKDOCUMENTPRINT ON
    ALLOCATION.PROJECTCODE = WRKDOCUMENTPRINT.PROJECTLONGDESCRIPTION
    AND ALLOCATION.ORDERCODE = WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE
RIGHT OUTER JOIN DB2ADMIN.SALESDOCUMENT SALESDOCUMENT ON
    WRKDOCUMENTPRINT.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
    AND WRKDOCUMENTPRINT.PROJECTLONGDESCRIPTION = SALESDOCUMENT.PROJECTCODE
RIGHT OUTER JOIN DB2ADMIN.SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENT.PROVISIONALCODE = SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE
LEFT OUTER JOIN DB2ADMIN.ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT OUTER JOIN ITXVIEWALLOCATION0 ON
    ALLOCATION.CODE = ITXVIEWALLOCATION0.CODE;


-- DB2ADMIN.ITXVIEW_SURATJALAN_PPC_FOR_POSELESAI source

CREATE VIEW ITXVIEW_SURATJALAN_PPC_FOR_POSELESAI AS
SELECT
    DISTINCT 
    SALESDOCUMENT.PROGRESSSTATUS AS PROGRESSSTATUS_SALDOC,
    SALESDOCUMENT.DEFINITIVECOUNTERCODE,
    s.PROGRESSSTATUS,
    SALESDOCUMENT.DOCUMENTTYPETYPE,
    BUSINESSPARTNER.NUMBERID,
    BUSINESSPARTNER.LEGALNAME1,
    BUSINESSPARTNER.ADDRESSPHONENUMBER,
    BUSINESSPARTNER.ADDRESSFAXNUMBER,
    ALLOCATION.CODE,
    ALLOCATION.DECOSUBCODE01,
    ALLOCATION.DECOSUBCODE02,
    ALLOCATION.DECOSUBCODE03,
    ALLOCATION.DECOSUBCODE04,
    ALLOCATION.DECOSUBCODE05,
    ALLOCATION.DECOSUBCODE06,
    ALLOCATION.DECOSUBCODE07,
    ALLOCATION.DECOSUBCODE08,
    ALLOCATION.DECOSUBCODE09,
    ALLOCATION.DECOSUBCODE10,
    ALLOCATION.BASESECONDARYUOMCODE,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE1,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE2,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTADDRESSLINE3,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTPOSTALCODE,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTTOWN,
    --    WRKDOCUMENTPRINT.DELIVERYPOINTDISTRICT,
    SALESDOCUMENT.PROJECTCODE,
    SALESDOCUMENT.DEFINITIVEDOCUMENTDATE,
    SALESDOCUMENT.PROVISIONALCODE,
    SALESDOCUMENT.PROVISIONALDOCUMENTDATE,
    SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE,
    SALESDOCUMENT.ORDERPARTNERBRANDCODE,
    SALESDOCUMENT.GOODSISSUEDATE,
    SALESDOCUMENT.ABSUNIQUEID,
    CASE
        WHEN SALESDOCUMENT.EXTERNALREFERENCE IS NULL THEN SALESDOCUMENTLINE.EXTERNALREFERENCE
        ELSE SALESDOCUMENT.EXTERNALREFERENCE
    END AS PO_NUMBER,
    SALESDOCUMENTLINE.ITEMTYPEAFICODE,
    SALESDOCUMENTLINE.SUBCODE01,
    SALESDOCUMENTLINE.SUBCODE02,
    SALESDOCUMENTLINE.SUBCODE03,
    SALESDOCUMENTLINE.SUBCODE04,
    SALESDOCUMENTLINE.SUBCODE05,
    SALESDOCUMENTLINE.SUBCODE06,
    SALESDOCUMENTLINE.SUBCODE07,
    SALESDOCUMENTLINE.SUBCODE08,
    SALESDOCUMENTLINE.SUBCODE09,
    SALESDOCUMENTLINE.SUBCODE10,
    SALESDOCUMENTLINE.ITEMDESCRIPTION,
    SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE,
    CASE
        WHEN a.VALUESTRING IS NOT NULL THEN CAST(
            a.VALUESTRING AS decimal(5)
        )
        ELSE CAST(
            SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE AS decimal(5)
        )
    END DLVSALESORDERLINEORDERLINE,
    SALESDOCUMENT.PAYMENTMETHODCODE,
    SALESDOCUMENT.CURRENCYCODE,
    SALESDOCUMENTLINE.PRICE,
    ALLOCATION.USERSECONDARYUOMCODE AS PRICEUNITOFMEASURECODE,
    ORDERPARTNERBRAND.LONGDESCRIPTION
FROM
    SALESDOCUMENT SALESDOCUMENT
LEFT JOIN SALESDOCUMENTLINE SALESDOCUMENTLINE ON
    SALESDOCUMENTLINE.SALESDOCUMENTPROVISIONALCODE = SALESDOCUMENT.PROVISIONALCODE
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    SALESDOCUMENT.COMPANYCODE = ORDERPARTNER.CUSTOMERSUPPLIERCOMPANYCODE
    AND SALESDOCUMENT.ORDERTYPE = ORDERPARTNER.CUSTOMERSUPPLIERTYPE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNER.CUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN CUSTOMERSUPPLIERDATA CUSTOMERSUPPLIERDATA ON
    CUSTOMERSUPPLIERDATA.BUSINESSPARTNERNUMBERID = BUSINESSPARTNER.NUMBERID
LEFT JOIN ALLOCATION ALLOCATION ON
    ALLOCATION.CUSTOMERCODE = CUSTOMERSUPPLIERDATA.CODE
    --									AND ALLOCATION.PROJECTCODE = SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE 
    AND ALLOCATION.ORDERCODE = SALESDOCUMENT.PROVISIONALCODE
    AND ALLOCATION.ORDERLINE = SALESDOCUMENTLINE.ORDERLINE
LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
    SALESDOCUMENT.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
    AND SALESDOCUMENT.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN SALESORDERLINE s ON
    s.SALESORDERCODE = SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE
    AND s.ORDERLINE = SALESDOCUMENTLINE.DLVSALESORDERLINEORDERLINE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = s.ABSUNIQUEID
    AND a.NAMENAME = 'SampleComments5'
WHERE
    ALLOCATION.ORIGINTRNTRANSACTIONNUMBER IS NULL
    --    AND 
    --        ALLOCATION.CODE = '000000447460'
    --        SALESDOCUMENT.PROVISIONALCODE = 'SRE2300395'
    --        AND SALESDOCUMENTLINE.DLVSALORDERLINESALESORDERCODE = 'EXP2300390'
    --        AND NOT ALLOCATION.CODE IS NULL;


-- DB2ADMIN.ITXVIEW_SURCHARGE_COMMRECIAL_INV source

CREATE VIEW ITXVIEW_SURCHARGE_COMMRECIAL_INV AS 
SELECT
    PROVISIONALCODE,
    PROVISIONALCOUNTERCODE,
    --    SALESORDERCODE,
    sum(BIAYA_TAMBAHAN) AS BIAYA_TAMBAHAN,
    UPPER(judul) AS JUDUL
FROM
    (
        SELECT
            DISTINCT 
    s.PROVISIONALCODE AS PROVISIONALCODE,
            s3.SALESORDERCODE AS SALESORDERCODE,
            s.PROVISIONALCOUNTERCODE,
            s3.ORDERLINE,
            i.ITAXCODE AS KET,
            CASE
                WHEN i.ITAXCODE NOT IN (
                    '999', 'VT1'
                ) THEN i.VALUE
            END AS BIAYA_TAMBAHAN,
            CASE
                WHEN i.ITAXCODE = 'SUR' THEN 'Surcharge MOQ'
                WHEN i.ITAXCODE = 'MCQ'
                OR i.ITAXCODE = 'SCR'
                OR i.ITAXCODE = 'MC1' THEN 'Surcharge MCQ'
                WHEN i.ITAXCODE = 'FR1' THEN 'Surcharge'
                WHEN i.ITAXCODE = 'IN1' THEN 'Insurance'
                WHEN i.ITAXCODE = 'OH1'
                OR i.ITAXCODE = 'OH3' THEN 'Bank Charge'
                WHEN i.ITAXCODE = 'CFR' THEN 'COST REVISE FORM E ESP2300372 and ESP2300407'
                WHEN i.ITAXCODE = 'VT4' THEN 'VAT 11%'
                WHEN i.ITAXCODE = 'SUS' THEN 'Surcharge Export'
            END AS JUDUL
        FROM
            SALESDOCUMENT s
        LEFT JOIN SALESDOCUMENTLINE s4 ON
            s4.SALESDOCUMENTPROVISIONALCODE = s.PROVISIONALCODE
            AND s4.SALDOCPROVISIONALCOUNTERCODE = s.PROVISIONALCOUNTERCODE
        LEFT JOIN SALESORDERLINE s3 ON
            s3.SALESORDERCODE = s4.DLVSALORDERLINESALESORDERCODE
            AND s3.ORDERLINE = s4.DLVSALESORDERLINEORDERLINE
            AND s3.SUBCODE01 = s4.SUBCODE01
            AND s3.SUBCODE02 = s4.SUBCODE02
            AND s3.SUBCODE03 = s4.SUBCODE03
            AND s3.SUBCODE04 = s4.SUBCODE04
            AND s3.SUBCODE05 = s4.SUBCODE05
            AND s3.SUBCODE06 = s4.SUBCODE06
            AND s3.SUBCODE07 = s4.SUBCODE07
            AND s3.SUBCODE08 = s4.SUBCODE08
        LEFT JOIN INDTAXDETAIL i ON
            s3.ABSUNIQUEID = i.ABSUNIQUEID
        WHERE
            s.DOCUMENTTYPETYPE = 5
            AND i.ITAXCODE NOT IN (
                '999', 'VT1'
            )
            AND i.VALUE <> 0
            --         AND s.PROVISIONALCODE in('ESP2300909')
    )
WHERE
    BIAYA_TAMBAHAN <> 0
    --            AND PROVISIONALCODE LIKE '%ESP23%'
GROUP BY 
      PROVISIONALCODE,
    --      SALESORDERCODE,
    PROVISIONALCOUNTERCODE,
      JUDUL;


-- DB2ADMIN.ITXVIEW_TASK_ACT source

CREATE VIEW ITXVIEW_TASK_ACT AS
SELECT
    ACT_HI_ACTINST.PROC_INST_ID_ ,
    ACT_HI_ACTINST.EXECUTION_ID_ ,
    WFMLINKEDENTITY.REFERENCEDENTITYPK
FROM
    ACT_HI_ACTINST ACT_HI_ACTINST
LEFT JOIN ACT_HI_PROCINST ACT_HI_PROCINST ON
    ACT_HI_PROCINST.PROC_INST_ID_ = ACT_HI_ACTINST.PROC_INST_ID_
LEFT JOIN WFMLINKEDENTITY WFMLINKEDENTITY ON
    WFMLINKEDENTITY.REFERENCEDENTITYPK = ACT_HI_PROCINST.BUSINESS_KEY_
GROUP BY
    ACT_HI_ACTINST.PROC_INST_ID_ ,
    ACT_HI_ACTINST.EXECUTION_ID_ ,
    WFMLINKEDENTITY.REFERENCEDENTITYPK;


-- DB2ADMIN.ITXVIEW_TESTCHEMICAL source

CREATE VIEW ITXVIEW_TESTCHEMICAL AS
SELECT 
    MRNHEADER.PURCHASEORDERCODE,
    MRNHEADER.MRNDATE,
    BUSINESSPARTNER.LEGALNAME1,
    FULLITEMKEYDECODER.SHORTDESCRIPTION,
    MRNDETAIL.RECEIVEDQUANTITY,
    STOCKTRANSACTION.LOTCODE,
    QUALITYDOCUMENT.HEADERDATE,
    QUALITYDOCUMENT.LASTUPDATEUSER,
    QUALITYDOCUMENT.HEADERLINE,
    A.TGLHPB,
    A.TGLTERIMA
FROM
    MRNHEADER MRNHEADER
LEFT JOIN MRNDETAIL MRNDETAIL ON
    MRNDETAIL.MRNHEADERCODE = MRNHEADER.CODE
LEFT JOIN STOCKTRANSACTION STOCKTRANSACTION ON
    STOCKTRANSACTION.TRANSACTIONNUMBER = MRNDETAIL.TRANSACTIONNUMBER
LEFT JOIN QUALITYDOCUMENT QUALITYDOCUMENT ON
    QUALITYDOCUMENT.LOTCODE = STOCKTRANSACTION.LOTCODE
    AND QUALITYDOCUMENT.ITEMTYPEAFICODE = STOCKTRANSACTION.ITEMTYPECODE
    AND QUALITYDOCUMENT.SUBCODE01 = STOCKTRANSACTION.DECOSUBCODE01
    AND QUALITYDOCUMENT.SUBCODE02 = STOCKTRANSACTION.DECOSUBCODE02
    AND QUALITYDOCUMENT.SUBCODE03 = STOCKTRANSACTION.DECOSUBCODE03
    AND QUALITYDOCUMENT.SUBCODE04 = STOCKTRANSACTION.DECOSUBCODE04
    AND QUALITYDOCUMENT.SUBCODE05 = STOCKTRANSACTION.DECOSUBCODE05
    AND QUALITYDOCUMENT.SUBCODE06 = STOCKTRANSACTION.DECOSUBCODE06
    AND QUALITYDOCUMENT.SUBCODE07 = STOCKTRANSACTION.DECOSUBCODE07
    AND QUALITYDOCUMENT.SUBCODE08 = STOCKTRANSACTION.DECOSUBCODE08
    AND QUALITYDOCUMENT.SUBCODE09 = STOCKTRANSACTION.DECOSUBCODE09
    AND QUALITYDOCUMENT.SUBCODE10 = STOCKTRANSACTION.DECOSUBCODE10
LEFT JOIN FULLITEMKEYDECODER FULLITEMKEYDECODER ON
    FULLITEMKEYDECODER.ITEMTYPECODE = STOCKTRANSACTION.ITEMTYPECODE
    AND FULLITEMKEYDECODER.SUBCODE01 = STOCKTRANSACTION.DECOSUBCODE01
    AND FULLITEMKEYDECODER.SUBCODE02 = STOCKTRANSACTION.DECOSUBCODE02
    AND FULLITEMKEYDECODER.SUBCODE03 = STOCKTRANSACTION.DECOSUBCODE03
    AND FULLITEMKEYDECODER.SUBCODE04 = STOCKTRANSACTION.DECOSUBCODE04
    AND FULLITEMKEYDECODER.SUBCODE05 = STOCKTRANSACTION.DECOSUBCODE05
    AND FULLITEMKEYDECODER.SUBCODE06 = STOCKTRANSACTION.DECOSUBCODE06
    AND FULLITEMKEYDECODER.SUBCODE07 = STOCKTRANSACTION.DECOSUBCODE07
    AND FULLITEMKEYDECODER.SUBCODE08 = STOCKTRANSACTION.DECOSUBCODE08
    AND FULLITEMKEYDECODER.SUBCODE09 = STOCKTRANSACTION.DECOSUBCODE09
    AND FULLITEMKEYDECODER.SUBCODE10 = STOCKTRANSACTION.DECOSUBCODE10
    AND FULLITEMKEYDECODER.IDENTIFIER = STOCKTRANSACTION.FULLITEMIDENTIFIER
LEFT JOIN ORDERPARTNER ORDERPARTNER ON
    ORDERPARTNER.CUSTOMERSUPPLIERCODE = MRNHEADER.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN BUSINESSPARTNER BUSINESSPARTNER ON
    BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
LEFT JOIN (
        SELECT
            UNIQUEID,
            MAX(CASE WHEN FIELDNAME = 'tglhpb' THEN VALUEDATE END) AS tglhpb,
            MAX(CASE WHEN FIELDNAME = 'tglterima' THEN VALUEDATE END) AS tglterima
        FROM
            ADSTORAGE
        WHERE 
                NAMEENTITYNAME = 'QualityDocument'
            AND FIELDNAME = 'tglterima'
            OR FIELDNAME = 'tglhpb'
        GROUP BY
            UNIQUEID
    ) A 
    ON
    A.UNIQUEID = QUALITYDOCUMENT.ABSUNIQUEID
WHERE
    FULLITEMKEYDECODER.ITEMTYPECODE = 'DYC'
    --	AND MRNHEADER.PURCHASEORDERCODE = 'DYL2400009';


-- DB2ADMIN.ITXVIEW_TESTCHEMICAL_MINMAX source

CREATE VIEW ITXVIEW_TESTCHEMICAL_MINMAX AS
SELECT
    q.QUALITYDOCUMENTHEADERLINE,
    LISTAGG(
        TRIM(q.SUBCODEMIN) || '-' || TRIM(q.SUBCODEMAX),
        ', '
    ) AS PH1,
    LISTAGG(
        TRIM(q2.SUBCODEMIN) || '-' || TRIM(q2.SUBCODEMAX),
        ', '
    ) AS BJ,
    LISTAGG(
        TRIM(q3.SUBCODEMIN) || '-' || TRIM(q3.SUBCODEMAX),
        ', '
    ) AS SC
FROM
    QUALITYDOCLINE q
LEFT JOIN QUALITYDOCLINE q2 ON
    q2.QUALITYDOCUMENTHEADERLINE = q.QUALITYDOCUMENTHEADERLINE
    AND TRIM(q2.CHARACTERISTICCODE) = 'BJ'
LEFT JOIN QUALITYDOCLINE q3 ON
    q3.QUALITYDOCUMENTHEADERLINE = q.QUALITYDOCUMENTHEADERLINE
    AND TRIM(q3.CHARACTERISTICCODE) = 'SC'
WHERE
    --	q.QUALITYDOCUMENTHEADERLINE =
    TRIM(q.CHARACTERISTICCODE) = 'PH1'
GROUP BY
    q.QUALITYDOCUMENTHEADERLINE;


-- DB2ADMIN.ITXVIEW_TGLBAGIKAIN source

CREATE VIEW ITXVIEW_TGLBAGIKAIN AS
SELECT 
    PRODUCTIONORDERCODE,
    LISTAGG(
        TRANSACTIONDATE,
        ', '
    ) AS TRANSACTIONDATE
FROM
    (
        SELECT
            DISTINCT
        s4.PRODUCTIONORDERCODE,
            s4.TRANSACTIONDATE
        FROM
            STOCKTRANSACTION s4
        LEFT JOIN ITXVIEWKK i5 ON
            i5.PRODUCTIONORDERCODE = s4.PRODUCTIONORDERCODE
            AND i5.COMPANYCODE = s4.COMPANYCODE
        WHERE
            s4.ITEMTYPECODE = 'KGF'
    )
    --WHERE PRODUCTIONORDERCODE = '00051007'
GROUP BY 
        PRODUCTIONORDERCODE;


-- DB2ADMIN.ITXVIEW_TGLDELIV_GREIGE source

CREATE VIEW ITXVIEW_TGLDELIV_GREIGE AS 
SELECT
    DISTINCT 
	s.SALESORDERCODE,
    s.ORDERLINE,
    a_project1.VALUESTRING AS OPN1,
    a2_project1.VALUEDATE AS DATE1,
    a_project2.VALUESTRING AS OPN2,
    a2_project2.VALUEDATE AS DATE2,
    a_project3.VALUESTRING AS OPN3,
    a2_project3.VALUEDATE AS DATE3,
    a_project4.VALUESTRING AS OPN4,
    a2_project4.VALUEDATE AS DATE4
FROM
    SALESORDERLINE s
LEFT JOIN PRODUCTIONDEMAND p ON
    p.ORIGDLVSALORDLINESALORDERCODE = s.SALESORDERCODE
    AND p.ORIGDLVSALORDERLINEORDERLINE = s.ORDERLINE
    -- FROM PROJECT 1
LEFT JOIN ADSTORAGE a_project1 ON
    a_project1.UNIQUEID = p.ABSUNIQUEID
    AND a_project1.FIELDNAME = 'ProAllow'
LEFT JOIN PRODUCTIONDEMAND p2_project1 ON
    p2_project1.ORIGDLVSALORDLINESALORDERCODE = a_project1.VALUESTRING
LEFT JOIN ADSTORAGE a2_project1 ON
    a2_project1.UNIQUEID = p2_project1.ABSUNIQUEID
    AND a2_project1.FIELDNAME = 'RMPGreigeReqDateTo'
    -- FROM PROJECT 2 
LEFT JOIN ADSTORAGE a_project2 ON
    a_project2.UNIQUEID = p.ABSUNIQUEID
    AND a_project2.FIELDNAME = 'ProAllow2'
LEFT JOIN PRODUCTIONDEMAND p2_project2 ON
    p2_project2.ORIGDLVSALORDLINESALORDERCODE = a_project2.VALUESTRING
LEFT JOIN ADSTORAGE a2_project2 ON
    a2_project2.UNIQUEID = p2_project2.ABSUNIQUEID
    AND a2_project2.FIELDNAME = 'RMPGreigeReqDateTo'
    -- FROM PROJECT 3 
LEFT JOIN ADSTORAGE a_project3 ON
    a_project3.UNIQUEID = p.ABSUNIQUEID
    AND a_project3.FIELDNAME = 'ProAllow3'
LEFT JOIN PRODUCTIONDEMAND p2_project3 ON
    p2_project3.ORIGDLVSALORDLINESALORDERCODE = a_project3.VALUESTRING
LEFT JOIN ADSTORAGE a2_project3 ON
    a2_project3.UNIQUEID = p2_project3.ABSUNIQUEID
    AND a2_project3.FIELDNAME = 'RMPGreigeReqDateTo'
    -- FROM PROJECT 4 
LEFT JOIN ADSTORAGE a_project4 ON
    a_project4.UNIQUEID = p.ABSUNIQUEID
    AND a_project4.FIELDNAME = 'ProAllow4'
LEFT JOIN PRODUCTIONDEMAND p2_project4 ON
    p2_project4.ORIGDLVSALORDLINESALORDERCODE = a_project4.VALUESTRING
LEFT JOIN ADSTORAGE a2_project4 ON
    a2_project4.UNIQUEID = p2_project4.ABSUNIQUEID
    AND a2_project4.FIELDNAME = 'RMPGreigeReqDateTo';


-- DB2ADMIN.ITXVIEW_TGLDELIV_GREIGE_DEMANDKGF source

CREATE VIEW ITXVIEW_TGLDELIV_GREIGE_DEMANDKGF AS 
SELECT
    DISTINCT 
	s.SALESORDERCODE,
    s.ORDERLINE,
    a.VALUEDATE
FROM
    SALESORDERLINE s
LEFT JOIN PRODUCTIONDEMAND p ON
    p.ORIGDLVSALORDLINESALORDERCODE = s.SALESORDERCODE
    AND p.ORIGDLVSALORDERLINEORDERLINE = s.ORDERLINE
    AND p.ITEMTYPEAFICODE = 'KGF'
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = p.ABSUNIQUEID
    AND a.FIELDNAME = 'RMPGreigeReqDateTo';


-- DB2ADMIN.ITXVIEW_TINGGI_KNT source

CREATE VIEW ITXVIEW_TINGGI_KNT AS
SELECT
    ADSTORAGE.UNIQUEID,
    ADSTORAGE.FIELDNAME,
    ADSTORAGE.VALUEDECIMAL
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    ADSTORAGE.FIELDNAME = 'tinggi';


-- DB2ADMIN.ITXVIEW_TOLNETTO source

CREATE VIEW ITXVIEW_TOLNETTO AS 
SELECT
    p.CODE,
    s.SALESORDERLINESALESORDERCODE,
    s2.ORDPRNCUSTOMERSUPPLIERCODE,
    o.ABSUNIQUEID,
    s.USERPRIMARYQUANTITY,
    a.VALUEDECIMAL AS N,
    a2.VALUEDECIMAL AS P
FROM
    PRODUCTIONDEMAND p
LEFT JOIN SALESORDERDELIVERY s ON
    s.SALORDLINESALORDERCOMPANYCODE = p.COMPANYCODE
    AND s.SALORDLINESALORDERCOUNTERCODE = p.DLVSALORDLINESALORDCNTCODE
    AND s.SALESORDERLINESALESORDERCODE = p.DLVSALORDERLINESALESORDERCODE
    AND s.SALESORDERLINEORDERLINE = p.DLVSALESORDERLINEORDERLINE
    AND s.SALESORDERLINEORDERSUBLINE = p.DLVSALESORDERLINEORDERSUBLINE
    AND s.SALORDLINECOMPONENTORDERLINE = p.DLVSALORDLINECMPORDERLINE
    AND s.DELIVERYLINE = p.DELIVERYDELIVERYLINE
LEFT JOIN SALESORDER s2 ON
    s2.CODE = s.SALESORDERLINESALESORDERCODE
LEFT JOIN ORDERPARTNER o ON
    o.CUSTOMERSUPPLIERCODE = s2.ORDPRNCUSTOMERSUPPLIERCODE
LEFT JOIN ADSTORAGE a ON
    a.UNIQUEID = o.ABSUNIQUEID
    AND NOT a.VALUEDECIMAL IS NULL
    AND a.FIELDNAME = 'ShippingToleranceN'
LEFT JOIN ADSTORAGE a2 ON
    a2.UNIQUEID = o.ABSUNIQUEID
    AND NOT a2.VALUEDECIMAL IS NULL
    AND a2.FIELDNAME = 'ShippingToleranceP';


-- DB2ADMIN.ITXVIEW_TOTAL_EXIM_FOC source

CREATE VIEW ITXVIEW_TOTAL_EXIM_FOC AS
SELECT
    PROVISIONALCODE,
    COUNT(code) AS TOTAL_JML_ROLL,
    SUM(BASEPRIMARYQUANTITY) AS TOTAL_JML_KG,
    SUM(BASESECONDARYQUANTITY)AS TOTAL_JML_YARD
FROM
    (
        SELECT
            a.code,
            sjexm.PROVISIONALCODE,
            sjexm.JENIS_ORDER,
            a.LINENUMBER,
            a.PROJECTCODE,
            a.BASEPRIMARYQUANTITY,
            ROUND( a.BASESECONDARYQUANTITY, 2) AS BASESECONDARYQUANTITY,
            e.QUALITYREASONCODE,
            e.ELEMENTCODE
        FROM
            ITXVIEW_SURATJALAN_EXIM sjexm
        LEFT JOIN ALLOCATION a ON
            sjexm.code = a.code
        LEFT JOIN ELEMENTSINSPECTION e ON
            a.ITEMELEMENTCODE = e.ELEMENTCODE
        WHERE
            a.STOCKTYPECODE = 'AFW'
            AND e.QUALITYREASONCODE = 'FOC'
            AND sjexm.jenis_order <> 'REPLCEXP'
        GROUP BY
            a.code,
            sjexm.PROVISIONALCODE,
            sjexm.JENIS_ORDER,
            a.LINENUMBER,
            a.PROJECTCODE,
            a.BASEPRIMARYQUANTITY,
            a.BASESECONDARYQUANTITY,
            e.QUALITYREASONCODE,
            e.ELEMENTCODE
    )
GROUP BY
    PROVISIONALCODE;


-- DB2ADMIN.ITXVIEW_TQ_DESKRIPSI source

CREATE VIEW ITXVIEW_TQ_DESKRIPSI AS
SELECT
    A.CODE AS DEMANDNO,
    TRIM(B.PRODUCTIONORDERCODE) AS PRODUCTIONORDERCODE,
    TRIM(E.LEGALNAME1) AS LEGALNAME1,
    TRIM(C.BUYER) AS BUYER,
    TRIM(C.NO_ITEM) AS NO_ITEM,
    TRIM(C.SALESORDERCODE) AS SALESORDERCODE,
    TRIM(C.ITEMDESCRIPTION) AS ITEMDESCRIPTION,
    C.STATISTICALGROUPCODE AS SEASON,
    TRIM(A.SUBCODE05) AS NO_WARNA,
    F.WARNA,
    TRIM(A.SUBCODE02) AS SUBCODE02,
    TRIM(A.SUBCODE03) AS SUBCODE03,
    CASE
        WHEN C.PO_HEADER IS NULL THEN C.PO_LINE
        ELSE C.PO_HEADER
    END AS PO_NUMBER,
    D.NAMENAME,
    D.VALUEDECIMAL
FROM
    PRODUCTIONDEMAND A
LEFT JOIN (
        SELECT
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
        FROM
            PRODUCTIONDEMANDSTEP PRODUCTIONDEMANDSTEP
        GROUP BY
            PRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE,
            PRODUCTIONDEMANDSTEP.PRODUCTIONDEMANDCODE
    ) B ON
    A.CODE = B.PRODUCTIONDEMANDCODE
LEFT JOIN (
        SELECT
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDER.EXTERNALREFERENCE AS PO_HEADER,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE AS QTY_ORDER_UOM,
            SALESORDERLINE.EXTERNALREFERENCE AS PO_LINE,
            SUM(SALESORDERLINE.BASEPRIMARYQUANTITY) AS QTY_ORDER,
            SUM(SALESORDERLINE.BASESECONDARYQUANTITY) AS QTY_PANJANG_ORDER,
            SALESORDERLINE.BASESECONDARYUOMCODE AS QTY_PANJANG_ORDER_UOM,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION AS BUYER,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION AS NO_ITEM
        FROM
            SALESORDER SALESORDER
        LEFT JOIN SALESORDERLINE SALESORDERLINE ON
            SALESORDER.CODE = SALESORDERLINE.SALESORDERCODE
        LEFT JOIN SALESORDERDELIVERY SALESORDERDELIVERY ON
            SALESORDERLINE.SALESORDERCODE = SALESORDERDELIVERY.SALESORDERLINESALESORDERCODE
            AND SALESORDERLINE.ORDERLINE = SALESORDERDELIVERY.SALESORDERLINEORDERLINE
        LEFT JOIN ORDERPARTNERBRAND ORDERPARTNERBRAND ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERPARTNERBRAND.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDER.ORDERPARTNERBRANDCODE = ORDERPARTNERBRAND.CODE
        LEFT JOIN ORDERITEMORDERPARTNERLINK ORDERITEMORDERPARTNERLINK ON
            SALESORDER.ORDPRNCUSTOMERSUPPLIERCODE = ORDERITEMORDERPARTNERLINK.ORDPRNCUSTOMERSUPPLIERCODE
            AND SALESORDERLINE.ITEMTYPEAFICODE = ORDERITEMORDERPARTNERLINK.ITEMTYPEAFICODE
            AND SALESORDERLINE.SUBCODE01 = ORDERITEMORDERPARTNERLINK.SUBCODE01
            AND SALESORDERLINE.SUBCODE02 = ORDERITEMORDERPARTNERLINK.SUBCODE02
            AND SALESORDERLINE.SUBCODE03 = ORDERITEMORDERPARTNERLINK.SUBCODE03
            AND SALESORDERLINE.SUBCODE04 = ORDERITEMORDERPARTNERLINK.SUBCODE04
            AND SALESORDERLINE.SUBCODE05 = ORDERITEMORDERPARTNERLINK.SUBCODE05
            AND SALESORDERLINE.SUBCODE06 = ORDERITEMORDERPARTNERLINK.SUBCODE06
            AND SALESORDERLINE.SUBCODE07 = ORDERITEMORDERPARTNERLINK.SUBCODE07
            AND SALESORDERLINE.SUBCODE08 = ORDERITEMORDERPARTNERLINK.SUBCODE08
            AND SALESORDERLINE.SUBCODE09 = ORDERITEMORDERPARTNERLINK.SUBCODE09
            AND SALESORDERLINE.SUBCODE10 = ORDERITEMORDERPARTNERLINK.SUBCODE10
        GROUP BY
            SALESORDER.ORDERPARTNERBRANDCODE,
            SALESORDER.STATISTICALGROUPCODE,
            SALESORDER.EXTERNALREFERENCE,
            SALESORDERLINE.SALESORDERCODE,
            SALESORDERLINE.ITEMDESCRIPTION,
            SALESORDERLINE.ORDERLINE,
            SALESORDERLINE.SUBCODE03,
            SALESORDERLINE.SUBCODE05,
            SALESORDERLINE.BASEPRIMARYUOMCODE,
            SALESORDERLINE.BASESECONDARYUOMCODE,
            SALESORDERLINE.EXTERNALREFERENCE,
            SALESORDERDELIVERY.DELIVERYDATE,
            ORDERPARTNERBRAND.LONGDESCRIPTION,
            ORDERITEMORDERPARTNERLINK.LONGDESCRIPTION
    ) C ON
    A.ORIGDLVSALORDLINESALORDERCODE = C.SALESORDERCODE
    AND A.ORIGDLVSALORDERLINEORDERLINE = C.ORDERLINE
LEFT JOIN (
        SELECT
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10,
            LISTAGG(
                TRIM(ADSTORAGE.NAMENAME),
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS NAMENAME,
            LISTAGG(
                ADSTORAGE.VALUEDECIMAL,
                ','
            ) WITHIN GROUP(
            ORDER BY
                ADSTORAGE.NAMENAME ASC
            ) AS VALUEDECIMAL
        FROM
            PRODUCT PRODUCT
        LEFT JOIN ADSTORAGE ADSTORAGE ON
            PRODUCT.ABSUNIQUEID = ADSTORAGE.UNIQUEID
        GROUP BY
            PRODUCT.SUBCODE01,
            PRODUCT.SUBCODE02,
            PRODUCT.SUBCODE03,
            PRODUCT.SUBCODE04,
            PRODUCT.SUBCODE05,
            PRODUCT.SUBCODE06,
            PRODUCT.SUBCODE07,
            PRODUCT.SUBCODE08,
            PRODUCT.SUBCODE09,
            PRODUCT.SUBCODE10
    ) D ON
    A.SUBCODE01 = D.SUBCODE01
    AND A.SUBCODE02 = D.SUBCODE02
    AND A.SUBCODE03 = D.SUBCODE03
    AND A.SUBCODE04 = D.SUBCODE04
    AND A.SUBCODE05 = D.SUBCODE05
    AND A.SUBCODE06 = D.SUBCODE06
    AND A.SUBCODE07 = D.SUBCODE07
    AND A.SUBCODE08 = D.SUBCODE08
    AND A.SUBCODE09 = D.SUBCODE09
    AND A.SUBCODE10 = D.SUBCODE10
LEFT JOIN (
        SELECT
            BUSINESSPARTNER.LEGALNAME1,
            ORDERPARTNER.CUSTOMERSUPPLIERCODE
        FROM
            BUSINESSPARTNER BUSINESSPARTNER
        LEFT JOIN ORDERPARTNER ORDERPARTNER ON
            BUSINESSPARTNER.NUMBERID = ORDERPARTNER.ORDERBUSINESSPARTNERNUMBERID
    ) E ON
    A.CUSTOMERCODE = E.CUSTOMERSUPPLIERCODE
LEFT JOIN (
        SELECT
            ITXVIEWCOLOR.ITEMTYPECODE,
            ITXVIEWCOLOR.SUBCODE01,
            ITXVIEWCOLOR.SUBCODE02,
            ITXVIEWCOLOR.SUBCODE03,
            ITXVIEWCOLOR.SUBCODE04,
            ITXVIEWCOLOR.SUBCODE05,
            ITXVIEWCOLOR.SUBCODE06,
            ITXVIEWCOLOR.SUBCODE07,
            ITXVIEWCOLOR.SUBCODE08,
            ITXVIEWCOLOR.SUBCODE09,
            ITXVIEWCOLOR.SUBCODE10,
            ITXVIEWCOLOR.WARNA
        FROM
            ITXVIEWCOLOR ITXVIEWCOLOR
    ) F ON
    A.ITEMTYPEAFICODE = F.ITEMTYPECODE
    AND A.SUBCODE01 = F.SUBCODE01
    AND A.SUBCODE02 = F.SUBCODE02
    AND A.SUBCODE03 = F.SUBCODE03
    AND A.SUBCODE04 = F.SUBCODE04
    AND A.SUBCODE05 = F.SUBCODE05
    AND A.SUBCODE06 = F.SUBCODE06
    AND A.SUBCODE07 = F.SUBCODE07
    AND A.SUBCODE08 = F.SUBCODE08
    AND A.SUBCODE09 = F.SUBCODE09
    AND A.SUBCODE10 = F.SUBCODE10;


-- DB2ADMIN.ITXVIEW_VOLAIR source

CREATE VIEW ITXVIEW_VOLAIR AS
SELECT
    VIEWPRODUCTIONRESERVATION.ITEMTYPEAFICODE,
    VIEWPRODUCTIONRESERVATION.PICKUPQUANTITY,
    VIEWPRODUCTIONRESERVATION.PRODUCTIONORDERCODE,
    VIEWPRODUCTIONDEMANDSTEP.FINALUSERPRIMARYQUANTITY
FROM
    DB2ADMIN.VIEWPRODUCTIONRESERVATION VIEWPRODUCTIONRESERVATION
LEFT OUTER JOIN DB2ADMIN.VIEWPRODUCTIONDEMANDSTEP VIEWPRODUCTIONDEMANDSTEP ON
    VIEWPRODUCTIONRESERVATION.PRODUCTIONORDERCODE = VIEWPRODUCTIONDEMANDSTEP.PRODUCTIONORDERCODE
    AND VIEWPRODUCTIONRESERVATION.PRODRESERVATIONLINKGROUPCODE = VIEWPRODUCTIONDEMANDSTEP.OPERATIONCODE
WHERE
    VIEWPRODUCTIONRESERVATION.ITEMTYPEAFICODE = 'RFD';


-- DB2ADMIN.ITXVIEW_WIDTHKOKNT source

CREATE VIEW ITXVIEW_WIDTHKOKNT AS
SELECT
    ADSTORAGE.NAMENAME,
    ADSTORAGE.VALUEDECIMAL,
    PRODUCT.ITEMTYPECODE,
    PRODUCT.SUBCODE01,
    PRODUCT.SUBCODE02,
    PRODUCT.SUBCODE03,
    PRODUCT.SUBCODE04
FROM
    DB2ADMIN.ADSTORAGE ADSTORAGE
RIGHT OUTER JOIN DB2ADMIN.PRODUCT PRODUCT ON
    ADSTORAGE.UNIQUEID = PRODUCT.ABSUNIQUEID
WHERE
    NAMENAME = 'Width';